
H747_DISCO_CM4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08100000  08100000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000001a8  08100298  08100298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08100440  08100440  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .init_array   00000004  08100440  08100440  00010440  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08100444  08100444  00010444  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000004  10000000  08100448  00020000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000020  10000004  0810044c  00020004  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  10000024  0810044c  00020024  2**0
                  ALLOC
  8 .ARM.attributes 00000030  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
  9 .debug_info   000029b2  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 0000059e  00000000  00000000  000229e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 000002d8  00000000  00000000  00022f88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 00000290  00000000  00000000  00023260  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  0003bc9b  00000000  00000000  000234f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   00002f0b  00000000  00000000  0005f18b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    00188fb2  00000000  00000000  00062096  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000050  00000000  00000000  001eb048  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00000a14  00000000  00000000  001eb098  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08100298 <__do_global_dtors_aux>:
 8100298:	b510      	push	{r4, lr}
 810029a:	4c05      	ldr	r4, [pc, #20]	; (81002b0 <__do_global_dtors_aux+0x18>)
 810029c:	7823      	ldrb	r3, [r4, #0]
 810029e:	b933      	cbnz	r3, 81002ae <__do_global_dtors_aux+0x16>
 81002a0:	4b04      	ldr	r3, [pc, #16]	; (81002b4 <__do_global_dtors_aux+0x1c>)
 81002a2:	b113      	cbz	r3, 81002aa <__do_global_dtors_aux+0x12>
 81002a4:	4804      	ldr	r0, [pc, #16]	; (81002b8 <__do_global_dtors_aux+0x20>)
 81002a6:	f3af 8000 	nop.w
 81002aa:	2301      	movs	r3, #1
 81002ac:	7023      	strb	r3, [r4, #0]
 81002ae:	bd10      	pop	{r4, pc}
 81002b0:	10000004 	.word	0x10000004
 81002b4:	00000000 	.word	0x00000000
 81002b8:	08100428 	.word	0x08100428

081002bc <frame_dummy>:
 81002bc:	b508      	push	{r3, lr}
 81002be:	4b03      	ldr	r3, [pc, #12]	; (81002cc <frame_dummy+0x10>)
 81002c0:	b11b      	cbz	r3, 81002ca <frame_dummy+0xe>
 81002c2:	4903      	ldr	r1, [pc, #12]	; (81002d0 <frame_dummy+0x14>)
 81002c4:	4803      	ldr	r0, [pc, #12]	; (81002d4 <frame_dummy+0x18>)
 81002c6:	f3af 8000 	nop.w
 81002ca:	bd08      	pop	{r3, pc}
 81002cc:	00000000 	.word	0x00000000
 81002d0:	10000008 	.word	0x10000008
 81002d4:	08100428 	.word	0x08100428

081002d8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 81002d8:	b480      	push	{r7}
 81002da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 81002dc:	4b09      	ldr	r3, [pc, #36]	; (8100304 <SystemInit+0x2c>)
 81002de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 81002e2:	4a08      	ldr	r2, [pc, #32]	; (8100304 <SystemInit+0x2c>)
 81002e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 81002e8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 81002ec:	4b05      	ldr	r3, [pc, #20]	; (8100304 <SystemInit+0x2c>)
 81002ee:	691b      	ldr	r3, [r3, #16]
 81002f0:	4a04      	ldr	r2, [pc, #16]	; (8100304 <SystemInit+0x2c>)
 81002f2:	f043 0310 	orr.w	r3, r3, #16
 81002f6:	6113      	str	r3, [r2, #16]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 81002f8:	bf00      	nop
 81002fa:	46bd      	mov	sp, r7
 81002fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100300:	4770      	bx	lr
 8100302:	bf00      	nop
 8100304:	e000ed00 	.word	0xe000ed00

08100308 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8100308:	b480      	push	{r7}
 810030a:	b083      	sub	sp, #12
 810030c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
    while (1);
 810030e:	e7fe      	b.n	810030e <main+0x6>

08100310 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8100310:	b480      	push	{r7}
 8100312:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8100314:	e7fe      	b.n	8100314 <NMI_Handler+0x4>

08100316 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8100316:	b480      	push	{r7}
 8100318:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 810031a:	e7fe      	b.n	810031a <HardFault_Handler+0x4>

0810031c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 810031c:	b480      	push	{r7}
 810031e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8100320:	e7fe      	b.n	8100320 <MemManage_Handler+0x4>

08100322 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8100322:	b480      	push	{r7}
 8100324:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8100326:	e7fe      	b.n	8100326 <BusFault_Handler+0x4>

08100328 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8100328:	b480      	push	{r7}
 810032a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 810032c:	e7fe      	b.n	810032c <UsageFault_Handler+0x4>

0810032e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 810032e:	b480      	push	{r7}
 8100330:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8100332:	bf00      	nop
 8100334:	46bd      	mov	sp, r7
 8100336:	f85d 7b04 	ldr.w	r7, [sp], #4
 810033a:	4770      	bx	lr

0810033c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 810033c:	b480      	push	{r7}
 810033e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8100340:	bf00      	nop
 8100342:	46bd      	mov	sp, r7
 8100344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100348:	4770      	bx	lr

0810034a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 810034a:	b480      	push	{r7}
 810034c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 810034e:	bf00      	nop
 8100350:	46bd      	mov	sp, r7
 8100352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100356:	4770      	bx	lr

08100358 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8100358:	b580      	push	{r7, lr}
 810035a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 810035c:	f000 f82c 	bl	81003b8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8100360:	bf00      	nop
 8100362:	bd80      	pop	{r7, pc}

08100364 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8100364:	f8df d034 	ldr.w	sp, [pc, #52]	; 810039c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8100368:	f7ff ffb6 	bl	81002d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 810036c:	480c      	ldr	r0, [pc, #48]	; (81003a0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 810036e:	490d      	ldr	r1, [pc, #52]	; (81003a4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8100370:	4a0d      	ldr	r2, [pc, #52]	; (81003a8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8100372:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8100374:	e002      	b.n	810037c <LoopCopyDataInit>

08100376 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8100376:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8100378:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 810037a:	3304      	adds	r3, #4

0810037c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 810037c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 810037e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8100380:	d3f9      	bcc.n	8100376 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8100382:	4a0a      	ldr	r2, [pc, #40]	; (81003ac <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8100384:	4c0a      	ldr	r4, [pc, #40]	; (81003b0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8100386:	2300      	movs	r3, #0
  b LoopFillZerobss
 8100388:	e001      	b.n	810038e <LoopFillZerobss>

0810038a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 810038a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 810038c:	3204      	adds	r2, #4

0810038e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 810038e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8100390:	d3fb      	bcc.n	810038a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8100392:	f000 f825 	bl	81003e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8100396:	f7ff ffb7 	bl	8100308 <main>
  bx  lr
 810039a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 810039c:	10048000 	.word	0x10048000
  ldr r0, =_sdata
 81003a0:	10000000 	.word	0x10000000
  ldr r1, =_edata
 81003a4:	10000004 	.word	0x10000004
  ldr r2, =_sidata
 81003a8:	08100448 	.word	0x08100448
  ldr r2, =_sbss
 81003ac:	10000004 	.word	0x10000004
  ldr r4, =_ebss
 81003b0:	10000024 	.word	0x10000024

081003b4 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 81003b4:	e7fe      	b.n	81003b4 <ADC3_IRQHandler>
	...

081003b8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 81003b8:	b480      	push	{r7}
 81003ba:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 81003bc:	4b06      	ldr	r3, [pc, #24]	; (81003d8 <HAL_IncTick+0x20>)
 81003be:	781b      	ldrb	r3, [r3, #0]
 81003c0:	461a      	mov	r2, r3
 81003c2:	4b06      	ldr	r3, [pc, #24]	; (81003dc <HAL_IncTick+0x24>)
 81003c4:	681b      	ldr	r3, [r3, #0]
 81003c6:	4413      	add	r3, r2
 81003c8:	4a04      	ldr	r2, [pc, #16]	; (81003dc <HAL_IncTick+0x24>)
 81003ca:	6013      	str	r3, [r2, #0]
}
 81003cc:	bf00      	nop
 81003ce:	46bd      	mov	sp, r7
 81003d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81003d4:	4770      	bx	lr
 81003d6:	bf00      	nop
 81003d8:	10000000 	.word	0x10000000
 81003dc:	10000020 	.word	0x10000020

081003e0 <__libc_init_array>:
 81003e0:	b570      	push	{r4, r5, r6, lr}
 81003e2:	4d0d      	ldr	r5, [pc, #52]	; (8100418 <__libc_init_array+0x38>)
 81003e4:	4c0d      	ldr	r4, [pc, #52]	; (810041c <__libc_init_array+0x3c>)
 81003e6:	1b64      	subs	r4, r4, r5
 81003e8:	10a4      	asrs	r4, r4, #2
 81003ea:	2600      	movs	r6, #0
 81003ec:	42a6      	cmp	r6, r4
 81003ee:	d109      	bne.n	8100404 <__libc_init_array+0x24>
 81003f0:	4d0b      	ldr	r5, [pc, #44]	; (8100420 <__libc_init_array+0x40>)
 81003f2:	4c0c      	ldr	r4, [pc, #48]	; (8100424 <__libc_init_array+0x44>)
 81003f4:	f000 f818 	bl	8100428 <_init>
 81003f8:	1b64      	subs	r4, r4, r5
 81003fa:	10a4      	asrs	r4, r4, #2
 81003fc:	2600      	movs	r6, #0
 81003fe:	42a6      	cmp	r6, r4
 8100400:	d105      	bne.n	810040e <__libc_init_array+0x2e>
 8100402:	bd70      	pop	{r4, r5, r6, pc}
 8100404:	f855 3b04 	ldr.w	r3, [r5], #4
 8100408:	4798      	blx	r3
 810040a:	3601      	adds	r6, #1
 810040c:	e7ee      	b.n	81003ec <__libc_init_array+0xc>
 810040e:	f855 3b04 	ldr.w	r3, [r5], #4
 8100412:	4798      	blx	r3
 8100414:	3601      	adds	r6, #1
 8100416:	e7f2      	b.n	81003fe <__libc_init_array+0x1e>
 8100418:	08100440 	.word	0x08100440
 810041c:	08100440 	.word	0x08100440
 8100420:	08100440 	.word	0x08100440
 8100424:	08100444 	.word	0x08100444

08100428 <_init>:
 8100428:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810042a:	bf00      	nop
 810042c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 810042e:	bc08      	pop	{r3}
 8100430:	469e      	mov	lr, r3
 8100432:	4770      	bx	lr

08100434 <_fini>:
 8100434:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8100436:	bf00      	nop
 8100438:	bcf8      	pop	{r3, r4, r5, r6, r7}
 810043a:	bc08      	pop	{r3}
 810043c:	469e      	mov	lr, r3
 810043e:	4770      	bx	lr
