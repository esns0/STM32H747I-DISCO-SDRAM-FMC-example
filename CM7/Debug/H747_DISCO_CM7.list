
H747_DISCO_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003b9c  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08003e34  08003e34  00013e34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003e44  08003e44  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08003e44  08003e44  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003e44  08003e44  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003e44  08003e44  00013e44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003e48  08003e48  00013e48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  24000000  08003e4c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001068  24000010  08003e5c  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  24001078  08003e5c  00021078  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ccbc  00000000  00000000  0002003e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e77  00000000  00000000  0002ccfa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009f0  00000000  00000000  0002eb78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000008f8  00000000  00000000  0002f568  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003e4db  00000000  00000000  0002fe60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000daac  00000000  00000000  0006e33b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001907dc  00000000  00000000  0007bde7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0020c5c3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000026b4  00000000  00000000  0020c614  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000010 	.word	0x24000010
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08003e1c 	.word	0x08003e1c

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000014 	.word	0x24000014
 80002d4:	08003e1c 	.word	0x08003e1c

080002d8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80002d8:	b480      	push	{r7}
 80002da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80002dc:	4b3d      	ldr	r3, [pc, #244]	; (80003d4 <SystemInit+0xfc>)
 80002de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80002e2:	4a3c      	ldr	r2, [pc, #240]	; (80003d4 <SystemInit+0xfc>)
 80002e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80002e8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80002ec:	4b39      	ldr	r3, [pc, #228]	; (80003d4 <SystemInit+0xfc>)
 80002ee:	691b      	ldr	r3, [r3, #16]
 80002f0:	4a38      	ldr	r2, [pc, #224]	; (80003d4 <SystemInit+0xfc>)
 80002f2:	f043 0310 	orr.w	r3, r3, #16
 80002f6:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80002f8:	4b37      	ldr	r3, [pc, #220]	; (80003d8 <SystemInit+0x100>)
 80002fa:	681b      	ldr	r3, [r3, #0]
 80002fc:	f003 030f 	and.w	r3, r3, #15
 8000300:	2b06      	cmp	r3, #6
 8000302:	d807      	bhi.n	8000314 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000304:	4b34      	ldr	r3, [pc, #208]	; (80003d8 <SystemInit+0x100>)
 8000306:	681b      	ldr	r3, [r3, #0]
 8000308:	f023 030f 	bic.w	r3, r3, #15
 800030c:	4a32      	ldr	r2, [pc, #200]	; (80003d8 <SystemInit+0x100>)
 800030e:	f043 0307 	orr.w	r3, r3, #7
 8000312:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000314:	4b31      	ldr	r3, [pc, #196]	; (80003dc <SystemInit+0x104>)
 8000316:	681b      	ldr	r3, [r3, #0]
 8000318:	4a30      	ldr	r2, [pc, #192]	; (80003dc <SystemInit+0x104>)
 800031a:	f043 0301 	orr.w	r3, r3, #1
 800031e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000320:	4b2e      	ldr	r3, [pc, #184]	; (80003dc <SystemInit+0x104>)
 8000322:	2200      	movs	r2, #0
 8000324:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000326:	4b2d      	ldr	r3, [pc, #180]	; (80003dc <SystemInit+0x104>)
 8000328:	681a      	ldr	r2, [r3, #0]
 800032a:	492c      	ldr	r1, [pc, #176]	; (80003dc <SystemInit+0x104>)
 800032c:	4b2c      	ldr	r3, [pc, #176]	; (80003e0 <SystemInit+0x108>)
 800032e:	4013      	ands	r3, r2
 8000330:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000332:	4b29      	ldr	r3, [pc, #164]	; (80003d8 <SystemInit+0x100>)
 8000334:	681b      	ldr	r3, [r3, #0]
 8000336:	f003 0308 	and.w	r3, r3, #8
 800033a:	2b00      	cmp	r3, #0
 800033c:	d007      	beq.n	800034e <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800033e:	4b26      	ldr	r3, [pc, #152]	; (80003d8 <SystemInit+0x100>)
 8000340:	681b      	ldr	r3, [r3, #0]
 8000342:	f023 030f 	bic.w	r3, r3, #15
 8000346:	4a24      	ldr	r2, [pc, #144]	; (80003d8 <SystemInit+0x100>)
 8000348:	f043 0307 	orr.w	r3, r3, #7
 800034c:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800034e:	4b23      	ldr	r3, [pc, #140]	; (80003dc <SystemInit+0x104>)
 8000350:	2200      	movs	r2, #0
 8000352:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000354:	4b21      	ldr	r3, [pc, #132]	; (80003dc <SystemInit+0x104>)
 8000356:	2200      	movs	r2, #0
 8000358:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800035a:	4b20      	ldr	r3, [pc, #128]	; (80003dc <SystemInit+0x104>)
 800035c:	2200      	movs	r2, #0
 800035e:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000360:	4b1e      	ldr	r3, [pc, #120]	; (80003dc <SystemInit+0x104>)
 8000362:	4a20      	ldr	r2, [pc, #128]	; (80003e4 <SystemInit+0x10c>)
 8000364:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000366:	4b1d      	ldr	r3, [pc, #116]	; (80003dc <SystemInit+0x104>)
 8000368:	4a1f      	ldr	r2, [pc, #124]	; (80003e8 <SystemInit+0x110>)
 800036a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800036c:	4b1b      	ldr	r3, [pc, #108]	; (80003dc <SystemInit+0x104>)
 800036e:	4a1f      	ldr	r2, [pc, #124]	; (80003ec <SystemInit+0x114>)
 8000370:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000372:	4b1a      	ldr	r3, [pc, #104]	; (80003dc <SystemInit+0x104>)
 8000374:	2200      	movs	r2, #0
 8000376:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000378:	4b18      	ldr	r3, [pc, #96]	; (80003dc <SystemInit+0x104>)
 800037a:	4a1c      	ldr	r2, [pc, #112]	; (80003ec <SystemInit+0x114>)
 800037c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800037e:	4b17      	ldr	r3, [pc, #92]	; (80003dc <SystemInit+0x104>)
 8000380:	2200      	movs	r2, #0
 8000382:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000384:	4b15      	ldr	r3, [pc, #84]	; (80003dc <SystemInit+0x104>)
 8000386:	4a19      	ldr	r2, [pc, #100]	; (80003ec <SystemInit+0x114>)
 8000388:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800038a:	4b14      	ldr	r3, [pc, #80]	; (80003dc <SystemInit+0x104>)
 800038c:	2200      	movs	r2, #0
 800038e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000390:	4b12      	ldr	r3, [pc, #72]	; (80003dc <SystemInit+0x104>)
 8000392:	681b      	ldr	r3, [r3, #0]
 8000394:	4a11      	ldr	r2, [pc, #68]	; (80003dc <SystemInit+0x104>)
 8000396:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800039a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800039c:	4b0f      	ldr	r3, [pc, #60]	; (80003dc <SystemInit+0x104>)
 800039e:	2200      	movs	r2, #0
 80003a0:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 80003a2:	4b13      	ldr	r3, [pc, #76]	; (80003f0 <SystemInit+0x118>)
 80003a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80003a6:	4a12      	ldr	r2, [pc, #72]	; (80003f0 <SystemInit+0x118>)
 80003a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80003ac:	6253      	str	r3, [r2, #36]	; 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80003ae:	4b11      	ldr	r3, [pc, #68]	; (80003f4 <SystemInit+0x11c>)
 80003b0:	681a      	ldr	r2, [r3, #0]
 80003b2:	4b11      	ldr	r3, [pc, #68]	; (80003f8 <SystemInit+0x120>)
 80003b4:	4013      	ands	r3, r2
 80003b6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80003ba:	d202      	bcs.n	80003c2 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80003bc:	4b0f      	ldr	r3, [pc, #60]	; (80003fc <SystemInit+0x124>)
 80003be:	2201      	movs	r2, #1
 80003c0:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80003c2:	4b0f      	ldr	r3, [pc, #60]	; (8000400 <SystemInit+0x128>)
 80003c4:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80003c8:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 80003ca:	bf00      	nop
 80003cc:	46bd      	mov	sp, r7
 80003ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003d2:	4770      	bx	lr
 80003d4:	e000ed00 	.word	0xe000ed00
 80003d8:	52002000 	.word	0x52002000
 80003dc:	58024400 	.word	0x58024400
 80003e0:	eaf6ed7f 	.word	0xeaf6ed7f
 80003e4:	02020200 	.word	0x02020200
 80003e8:	01ff0000 	.word	0x01ff0000
 80003ec:	01010280 	.word	0x01010280
 80003f0:	580000c0 	.word	0x580000c0
 80003f4:	5c001000 	.word	0x5c001000
 80003f8:	ffff0000 	.word	0xffff0000
 80003fc:	51008108 	.word	0x51008108
 8000400:	52004000 	.word	0x52004000

08000404 <MX_FMC_Init>:

SDRAM_HandleTypeDef hsdram1;

/* FMC initialization function */
void MX_FMC_Init(void)
{
 8000404:	b580      	push	{r7, lr}
 8000406:	b090      	sub	sp, #64	; 0x40
 8000408:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 800040a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800040e:	2200      	movs	r2, #0
 8000410:	601a      	str	r2, [r3, #0]
 8000412:	605a      	str	r2, [r3, #4]
 8000414:	609a      	str	r2, [r3, #8]
 8000416:	60da      	str	r2, [r3, #12]
 8000418:	611a      	str	r2, [r3, #16]
 800041a:	615a      	str	r2, [r3, #20]
 800041c:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 800041e:	4b2e      	ldr	r3, [pc, #184]	; (80004d8 <MX_FMC_Init+0xd4>)
 8000420:	4a2e      	ldr	r2, [pc, #184]	; (80004dc <MX_FMC_Init+0xd8>)
 8000422:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 8000424:	4b2c      	ldr	r3, [pc, #176]	; (80004d8 <MX_FMC_Init+0xd4>)
 8000426:	2201      	movs	r2, #1
 8000428:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_9;
 800042a:	4b2b      	ldr	r3, [pc, #172]	; (80004d8 <MX_FMC_Init+0xd4>)
 800042c:	2201      	movs	r2, #1
 800042e:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8000430:	4b29      	ldr	r3, [pc, #164]	; (80004d8 <MX_FMC_Init+0xd4>)
 8000432:	2204      	movs	r2, #4
 8000434:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_32;
 8000436:	4b28      	ldr	r3, [pc, #160]	; (80004d8 <MX_FMC_Init+0xd4>)
 8000438:	2220      	movs	r2, #32
 800043a:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 800043c:	4b26      	ldr	r3, [pc, #152]	; (80004d8 <MX_FMC_Init+0xd4>)
 800043e:	2240      	movs	r2, #64	; 0x40
 8000440:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_1;
 8000442:	4b25      	ldr	r3, [pc, #148]	; (80004d8 <MX_FMC_Init+0xd4>)
 8000444:	2280      	movs	r2, #128	; 0x80
 8000446:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8000448:	4b23      	ldr	r3, [pc, #140]	; (80004d8 <MX_FMC_Init+0xd4>)
 800044a:	2200      	movs	r2, #0
 800044c:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 800044e:	4b22      	ldr	r3, [pc, #136]	; (80004d8 <MX_FMC_Init+0xd4>)
 8000450:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000454:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 8000456:	4b20      	ldr	r3, [pc, #128]	; (80004d8 <MX_FMC_Init+0xd4>)
 8000458:	2200      	movs	r2, #0
 800045a:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_2;
 800045c:	4b1e      	ldr	r3, [pc, #120]	; (80004d8 <MX_FMC_Init+0xd4>)
 800045e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000462:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 16;
 8000464:	2310      	movs	r3, #16
 8000466:	627b      	str	r3, [r7, #36]	; 0x24
  SdramTiming.ExitSelfRefreshDelay = 16;
 8000468:	2310      	movs	r3, #16
 800046a:	62bb      	str	r3, [r7, #40]	; 0x28
  SdramTiming.SelfRefreshTime = 16;
 800046c:	2310      	movs	r3, #16
 800046e:	62fb      	str	r3, [r7, #44]	; 0x2c
  SdramTiming.RowCycleDelay = 16;
 8000470:	2310      	movs	r3, #16
 8000472:	633b      	str	r3, [r7, #48]	; 0x30
  SdramTiming.WriteRecoveryTime = 16;
 8000474:	2310      	movs	r3, #16
 8000476:	637b      	str	r3, [r7, #52]	; 0x34
  SdramTiming.RPDelay = 16;
 8000478:	2310      	movs	r3, #16
 800047a:	63bb      	str	r3, [r7, #56]	; 0x38
  SdramTiming.RCDDelay = 16;
 800047c:	2310      	movs	r3, #16
 800047e:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8000480:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000484:	4619      	mov	r1, r3
 8000486:	4814      	ldr	r0, [pc, #80]	; (80004d8 <MX_FMC_Init+0xd4>)
 8000488:	f003 f9f4 	bl	8003874 <HAL_SDRAM_Init>
 800048c:	4603      	mov	r3, r0
 800048e:	2b00      	cmp	r3, #0
 8000490:	d001      	beq.n	8000496 <MX_FMC_Init+0x92>
  {
    Error_Handler( );
 8000492:	f000 fa9d 	bl	80009d0 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */
    IS42S32800G_Context_t IS42S32800G_init;
    IS42S32800G_init.TargetBank = FMC_SDRAM_CMD_TARGET_BANK2;
 8000496:	2308      	movs	r3, #8
 8000498:	607b      	str	r3, [r7, #4]
    IS42S32800G_init.RefreshMode = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 800049a:	2303      	movs	r3, #3
 800049c:	60bb      	str	r3, [r7, #8]
    IS42S32800G_init.RefreshRate = REFRESH_COUNT;
 800049e:	f240 6303 	movw	r3, #1539	; 0x603
 80004a2:	60fb      	str	r3, [r7, #12]
    IS42S32800G_init.BurstLength = IS42S32800G_BURST_LENGTH_1;
 80004a4:	2300      	movs	r3, #0
 80004a6:	613b      	str	r3, [r7, #16]
    IS42S32800G_init.BurstType = IS42S32800G_BURST_TYPE_SEQUENTIAL;
 80004a8:	2300      	movs	r3, #0
 80004aa:	617b      	str	r3, [r7, #20]
    IS42S32800G_init.CASLatency = IS42S32800G_CAS_LATENCY_2;
 80004ac:	2320      	movs	r3, #32
 80004ae:	61bb      	str	r3, [r7, #24]
    IS42S32800G_init.OperationMode = IS42S32800G_OPERATING_MODE_STANDARD;
 80004b0:	2300      	movs	r3, #0
 80004b2:	61fb      	str	r3, [r7, #28]
    IS42S32800G_init.WriteBurstMode = IS42S32800G_WRITEBURST_MODE_SINGLE;
 80004b4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80004b8:	623b      	str	r3, [r7, #32]

    if (IS42S32800G_Init(&hsdram1, &IS42S32800G_init) != IS42S32800G_OK)
 80004ba:	1d3b      	adds	r3, r7, #4
 80004bc:	4619      	mov	r1, r3
 80004be:	4806      	ldr	r0, [pc, #24]	; (80004d8 <MX_FMC_Init+0xd4>)
 80004c0:	f003 fb74 	bl	8003bac <IS42S32800G_Init>
 80004c4:	4603      	mov	r3, r0
 80004c6:	2b00      	cmp	r3, #0
 80004c8:	d001      	beq.n	80004ce <MX_FMC_Init+0xca>
    {
        Error_Handler();
 80004ca:	f000 fa81 	bl	80009d0 <Error_Handler>
    }
  /* USER CODE END FMC_Init 2 */
}
 80004ce:	bf00      	nop
 80004d0:	3740      	adds	r7, #64	; 0x40
 80004d2:	46bd      	mov	sp, r7
 80004d4:	bd80      	pop	{r7, pc}
 80004d6:	bf00      	nop
 80004d8:	2400002c 	.word	0x2400002c
 80004dc:	52004140 	.word	0x52004140

080004e0 <HAL_FMC_MspInit>:

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 80004e0:	b580      	push	{r7, lr}
 80004e2:	b0ba      	sub	sp, #232	; 0xe8
 80004e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004e6:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80004ea:	2200      	movs	r2, #0
 80004ec:	601a      	str	r2, [r3, #0]
 80004ee:	605a      	str	r2, [r3, #4]
 80004f0:	609a      	str	r2, [r3, #8]
 80004f2:	60da      	str	r2, [r3, #12]
 80004f4:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 80004f6:	4b5c      	ldr	r3, [pc, #368]	; (8000668 <HAL_FMC_MspInit+0x188>)
 80004f8:	681b      	ldr	r3, [r3, #0]
 80004fa:	2b00      	cmp	r3, #0
 80004fc:	f040 80b0 	bne.w	8000660 <HAL_FMC_MspInit+0x180>
    return;
  }
  FMC_Initialized = 1;
 8000500:	4b59      	ldr	r3, [pc, #356]	; (8000668 <HAL_FMC_MspInit+0x188>)
 8000502:	2201      	movs	r2, #1
 8000504:	601a      	str	r2, [r3, #0]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000506:	f107 0308 	add.w	r3, r7, #8
 800050a:	22c8      	movs	r2, #200	; 0xc8
 800050c:	2100      	movs	r1, #0
 800050e:	4618      	mov	r0, r3
 8000510:	f003 fc7c 	bl	8003e0c <memset>

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FMC;
 8000514:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000518:	f04f 0300 	mov.w	r3, #0
 800051c:	e9c7 2302 	strd	r2, r3, [r7, #8]
    PeriphClkInitStruct.FmcClockSelection = RCC_FMCCLKSOURCE_D1HCLK;
 8000520:	2300      	movs	r3, #0
 8000522:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000524:	f107 0308 	add.w	r3, r7, #8
 8000528:	4618      	mov	r0, r3
 800052a:	f001 fdf5 	bl	8002118 <HAL_RCCEx_PeriphCLKConfig>
 800052e:	4603      	mov	r3, r0
 8000530:	2b00      	cmp	r3, #0
 8000532:	d001      	beq.n	8000538 <HAL_FMC_MspInit+0x58>
    {
      Error_Handler();
 8000534:	f000 fa4c 	bl	80009d0 <Error_Handler>
    }

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8000538:	4b4c      	ldr	r3, [pc, #304]	; (800066c <HAL_FMC_MspInit+0x18c>)
 800053a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800053e:	4a4b      	ldr	r2, [pc, #300]	; (800066c <HAL_FMC_MspInit+0x18c>)
 8000540:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000544:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8000548:	4b48      	ldr	r3, [pc, #288]	; (800066c <HAL_FMC_MspInit+0x18c>)
 800054a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800054e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000552:	607b      	str	r3, [r7, #4]
 8000554:	687b      	ldr	r3, [r7, #4]
  PE14   ------> FMC_D11
  PH7   ------> FMC_SDCKE1
  PD8   ------> FMC_D13
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_1
 8000556:	f240 63ff 	movw	r3, #1791	; 0x6ff
 800055a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
                          |GPIO_PIN_0|GPIO_PIN_7|GPIO_PIN_2|GPIO_PIN_3
                          |GPIO_PIN_9|GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800055e:	2302      	movs	r3, #2
 8000560:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000564:	2300      	movs	r3, #0
 8000566:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800056a:	2303      	movs	r3, #3
 800056c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000570:	230c      	movs	r3, #12
 8000572:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4

  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000576:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800057a:	4619      	mov	r1, r3
 800057c:	483c      	ldr	r0, [pc, #240]	; (8000670 <HAL_FMC_MspInit+0x190>)
 800057e:	f000 fc1d 	bl	8000dbc <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_10|GPIO_PIN_9
 8000582:	f64f 7383 	movw	r3, #65411	; 0xff83
 8000586:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_15|GPIO_PIN_8
                          |GPIO_PIN_13|GPIO_PIN_7|GPIO_PIN_14;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800058a:	2302      	movs	r3, #2
 800058c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000590:	2300      	movs	r3, #0
 8000592:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000596:	2303      	movs	r3, #3
 8000598:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800059c:	230c      	movs	r3, #12
 800059e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80005a2:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80005a6:	4619      	mov	r1, r3
 80005a8:	4832      	ldr	r0, [pc, #200]	; (8000674 <HAL_FMC_MspInit+0x194>)
 80005aa:	f000 fc07 	bl	8000dbc <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_14|GPIO_PIN_13|GPIO_PIN_5
 80005ae:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80005b2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_9|GPIO_PIN_12
                          |GPIO_PIN_6|GPIO_PIN_8|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005b6:	2302      	movs	r3, #2
 80005b8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005bc:	2300      	movs	r3, #0
 80005be:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80005c2:	2303      	movs	r3, #3
 80005c4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80005c8:	230c      	movs	r3, #12
 80005ca:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4

  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80005ce:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80005d2:	4619      	mov	r1, r3
 80005d4:	4828      	ldr	r0, [pc, #160]	; (8000678 <HAL_FMC_MspInit+0x198>)
 80005d6:	f000 fbf1 	bl	8000dbc <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_5|GPIO_PIN_4
 80005da:	f248 1333 	movw	r3, #33075	; 0x8133
 80005de:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
                          |GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005e2:	2302      	movs	r3, #2
 80005e4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005e8:	2300      	movs	r3, #0
 80005ea:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80005ee:	2303      	movs	r3, #3
 80005f0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80005f4:	230c      	movs	r3, #12
 80005f6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4

  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80005fa:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80005fe:	4619      	mov	r1, r3
 8000600:	481e      	ldr	r0, [pc, #120]	; (800067c <HAL_FMC_MspInit+0x19c>)
 8000602:	f000 fbdb 	bl	8000dbc <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15|GPIO_PIN_14
 8000606:	f24c 7303 	movw	r3, #50947	; 0xc703
 800060a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
                          |GPIO_PIN_10|GPIO_PIN_9|GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800060e:	2302      	movs	r3, #2
 8000610:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000614:	2300      	movs	r3, #0
 8000616:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800061a:	2303      	movs	r3, #3
 800061c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000620:	230c      	movs	r3, #12
 8000622:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000626:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800062a:	4619      	mov	r1, r3
 800062c:	4814      	ldr	r0, [pc, #80]	; (8000680 <HAL_FMC_MspInit+0x1a0>)
 800062e:	f000 fbc5 	bl	8000dbc <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_3
 8000632:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8000636:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
                          |GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_12|GPIO_PIN_15|GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800063a:	2302      	movs	r3, #2
 800063c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000640:	2300      	movs	r3, #0
 8000642:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000646:	2303      	movs	r3, #3
 8000648:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800064c:	230c      	movs	r3, #12
 800064e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4

  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000652:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000656:	4619      	mov	r1, r3
 8000658:	480a      	ldr	r0, [pc, #40]	; (8000684 <HAL_FMC_MspInit+0x1a4>)
 800065a:	f000 fbaf 	bl	8000dbc <HAL_GPIO_Init>
 800065e:	e000      	b.n	8000662 <HAL_FMC_MspInit+0x182>
    return;
 8000660:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8000662:	37e8      	adds	r7, #232	; 0xe8
 8000664:	46bd      	mov	sp, r7
 8000666:	bd80      	pop	{r7, pc}
 8000668:	24000060 	.word	0x24000060
 800066c:	58024400 	.word	0x58024400
 8000670:	58022000 	.word	0x58022000
 8000674:	58021000 	.word	0x58021000
 8000678:	58021c00 	.word	0x58021c00
 800067c:	58021800 	.word	0x58021800
 8000680:	58020c00 	.word	0x58020c00
 8000684:	58021400 	.word	0x58021400

08000688 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* sdramHandle){
 8000688:	b580      	push	{r7, lr}
 800068a:	b082      	sub	sp, #8
 800068c:	af00      	add	r7, sp, #0
 800068e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8000690:	f7ff ff26 	bl	80004e0 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8000694:	bf00      	nop
 8000696:	3708      	adds	r7, #8
 8000698:	46bd      	mov	sp, r7
 800069a:	bd80      	pop	{r7, pc}

0800069c <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	b08c      	sub	sp, #48	; 0x30
 80006a0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006a2:	f107 031c 	add.w	r3, r7, #28
 80006a6:	2200      	movs	r2, #0
 80006a8:	601a      	str	r2, [r3, #0]
 80006aa:	605a      	str	r2, [r3, #4]
 80006ac:	609a      	str	r2, [r3, #8]
 80006ae:	60da      	str	r2, [r3, #12]
 80006b0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80006b2:	4b39      	ldr	r3, [pc, #228]	; (8000798 <MX_GPIO_Init+0xfc>)
 80006b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006b8:	4a37      	ldr	r2, [pc, #220]	; (8000798 <MX_GPIO_Init+0xfc>)
 80006ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80006be:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80006c2:	4b35      	ldr	r3, [pc, #212]	; (8000798 <MX_GPIO_Init+0xfc>)
 80006c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80006cc:	61bb      	str	r3, [r7, #24]
 80006ce:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80006d0:	4b31      	ldr	r3, [pc, #196]	; (8000798 <MX_GPIO_Init+0xfc>)
 80006d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006d6:	4a30      	ldr	r2, [pc, #192]	; (8000798 <MX_GPIO_Init+0xfc>)
 80006d8:	f043 0310 	orr.w	r3, r3, #16
 80006dc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80006e0:	4b2d      	ldr	r3, [pc, #180]	; (8000798 <MX_GPIO_Init+0xfc>)
 80006e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006e6:	f003 0310 	and.w	r3, r3, #16
 80006ea:	617b      	str	r3, [r7, #20]
 80006ec:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006ee:	4b2a      	ldr	r3, [pc, #168]	; (8000798 <MX_GPIO_Init+0xfc>)
 80006f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006f4:	4a28      	ldr	r2, [pc, #160]	; (8000798 <MX_GPIO_Init+0xfc>)
 80006f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006fa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80006fe:	4b26      	ldr	r3, [pc, #152]	; (8000798 <MX_GPIO_Init+0xfc>)
 8000700:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000704:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000708:	613b      	str	r3, [r7, #16]
 800070a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800070c:	4b22      	ldr	r3, [pc, #136]	; (8000798 <MX_GPIO_Init+0xfc>)
 800070e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000712:	4a21      	ldr	r2, [pc, #132]	; (8000798 <MX_GPIO_Init+0xfc>)
 8000714:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000718:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800071c:	4b1e      	ldr	r3, [pc, #120]	; (8000798 <MX_GPIO_Init+0xfc>)
 800071e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000722:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000726:	60fb      	str	r3, [r7, #12]
 8000728:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800072a:	4b1b      	ldr	r3, [pc, #108]	; (8000798 <MX_GPIO_Init+0xfc>)
 800072c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000730:	4a19      	ldr	r2, [pc, #100]	; (8000798 <MX_GPIO_Init+0xfc>)
 8000732:	f043 0308 	orr.w	r3, r3, #8
 8000736:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800073a:	4b17      	ldr	r3, [pc, #92]	; (8000798 <MX_GPIO_Init+0xfc>)
 800073c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000740:	f003 0308 	and.w	r3, r3, #8
 8000744:	60bb      	str	r3, [r7, #8]
 8000746:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000748:	4b13      	ldr	r3, [pc, #76]	; (8000798 <MX_GPIO_Init+0xfc>)
 800074a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800074e:	4a12      	ldr	r2, [pc, #72]	; (8000798 <MX_GPIO_Init+0xfc>)
 8000750:	f043 0320 	orr.w	r3, r3, #32
 8000754:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000758:	4b0f      	ldr	r3, [pc, #60]	; (8000798 <MX_GPIO_Init+0xfc>)
 800075a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800075e:	f003 0320 	and.w	r3, r3, #32
 8000762:	607b      	str	r3, [r7, #4]
 8000764:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, LED_1_Pin|LED_2_Pin, GPIO_PIN_RESET);
 8000766:	2200      	movs	r2, #0
 8000768:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 800076c:	480b      	ldr	r0, [pc, #44]	; (800079c <MX_GPIO_Init+0x100>)
 800076e:	f000 fcd5 	bl	800111c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PIPin PIPin */
  GPIO_InitStruct.Pin = LED_1_Pin|LED_2_Pin;
 8000772:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000776:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000778:	2301      	movs	r3, #1
 800077a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800077c:	2300      	movs	r3, #0
 800077e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000780:	2300      	movs	r3, #0
 8000782:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000784:	f107 031c 	add.w	r3, r7, #28
 8000788:	4619      	mov	r1, r3
 800078a:	4804      	ldr	r0, [pc, #16]	; (800079c <MX_GPIO_Init+0x100>)
 800078c:	f000 fb16 	bl	8000dbc <HAL_GPIO_Init>

}
 8000790:	bf00      	nop
 8000792:	3730      	adds	r7, #48	; 0x30
 8000794:	46bd      	mov	sp, r7
 8000796:	bd80      	pop	{r7, pc}
 8000798:	58024400 	.word	0x58024400
 800079c:	58022000 	.word	0x58022000

080007a0 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b086      	sub	sp, #24
 80007a4:	af00      	add	r7, sp, #0
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80007a6:	4b49      	ldr	r3, [pc, #292]	; (80008cc <main+0x12c>)
 80007a8:	695b      	ldr	r3, [r3, #20]
 80007aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d11b      	bne.n	80007ea <main+0x4a>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80007b2:	f3bf 8f4f 	dsb	sy
}
 80007b6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80007b8:	f3bf 8f6f 	isb	sy
}
 80007bc:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80007be:	4b43      	ldr	r3, [pc, #268]	; (80008cc <main+0x12c>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80007c6:	f3bf 8f4f 	dsb	sy
}
 80007ca:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80007cc:	f3bf 8f6f 	isb	sy
}
 80007d0:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80007d2:	4b3e      	ldr	r3, [pc, #248]	; (80008cc <main+0x12c>)
 80007d4:	695b      	ldr	r3, [r3, #20]
 80007d6:	4a3d      	ldr	r2, [pc, #244]	; (80008cc <main+0x12c>)
 80007d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80007dc:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80007de:	f3bf 8f4f 	dsb	sy
}
 80007e2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80007e4:	f3bf 8f6f 	isb	sy
}
 80007e8:	e000      	b.n	80007ec <main+0x4c>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80007ea:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 80007ec:	4b37      	ldr	r3, [pc, #220]	; (80008cc <main+0x12c>)
 80007ee:	695b      	ldr	r3, [r3, #20]
 80007f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d138      	bne.n	800086a <main+0xca>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 80007f8:	4b34      	ldr	r3, [pc, #208]	; (80008cc <main+0x12c>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000800:	f3bf 8f4f 	dsb	sy
}
 8000804:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000806:	4b31      	ldr	r3, [pc, #196]	; (80008cc <main+0x12c>)
 8000808:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800080c:	60bb      	str	r3, [r7, #8]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800080e:	68bb      	ldr	r3, [r7, #8]
 8000810:	0b5b      	lsrs	r3, r3, #13
 8000812:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000816:	607b      	str	r3, [r7, #4]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000818:	68bb      	ldr	r3, [r7, #8]
 800081a:	08db      	lsrs	r3, r3, #3
 800081c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000820:	603b      	str	r3, [r7, #0]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	015a      	lsls	r2, r3, #5
 8000826:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 800082a:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 800082c:	683a      	ldr	r2, [r7, #0]
 800082e:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000830:	4926      	ldr	r1, [pc, #152]	; (80008cc <main+0x12c>)
 8000832:	4313      	orrs	r3, r2
 8000834:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000838:	683b      	ldr	r3, [r7, #0]
 800083a:	1e5a      	subs	r2, r3, #1
 800083c:	603a      	str	r2, [r7, #0]
 800083e:	2b00      	cmp	r3, #0
 8000840:	d1ef      	bne.n	8000822 <main+0x82>
    } while(sets-- != 0U);
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	1e5a      	subs	r2, r3, #1
 8000846:	607a      	str	r2, [r7, #4]
 8000848:	2b00      	cmp	r3, #0
 800084a:	d1e5      	bne.n	8000818 <main+0x78>
  __ASM volatile ("dsb 0xF":::"memory");
 800084c:	f3bf 8f4f 	dsb	sy
}
 8000850:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000852:	4b1e      	ldr	r3, [pc, #120]	; (80008cc <main+0x12c>)
 8000854:	695b      	ldr	r3, [r3, #20]
 8000856:	4a1d      	ldr	r2, [pc, #116]	; (80008cc <main+0x12c>)
 8000858:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800085c:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800085e:	f3bf 8f4f 	dsb	sy
}
 8000862:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000864:	f3bf 8f6f 	isb	sy
}
 8000868:	e000      	b.n	800086c <main+0xcc>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 800086a:	bf00      	nop
//    }
    /* USER CODE END Boot_Mode_Sequence_1 */
    /* MCU Configuration--------------------------------------------------------*/

    /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
    HAL_Init();
 800086c:	f000 f924 	bl	8000ab8 <HAL_Init>
    /* USER CODE BEGIN Init */

    /* USER CODE END Init */

    /* Configure the system clock */
    SystemClock_Config();
 8000870:	f000 f832 	bl	80008d8 <SystemClock_Config>
    /* USER CODE BEGIN SysInit */

    /* USER CODE END SysInit */

    /* Initialize all configured peripherals */
    MX_GPIO_Init();
 8000874:	f7ff ff12 	bl	800069c <MX_GPIO_Init>
    MX_FMC_Init();
 8000878:	f7ff fdc4 	bl	8000404 <MX_FMC_Init>
    /* USER CODE BEGIN 2 */

    // write
    uint32_t* p = (uint32_t*)SDRAM_BASE_ADDRESS;
 800087c:	f04f 4350 	mov.w	r3, #3489660928	; 0xd0000000
 8000880:	60fb      	str	r3, [r7, #12]

    for (uint32_t i = 0; i < (0x02000000 / 4); i++)
 8000882:	2300      	movs	r3, #0
 8000884:	617b      	str	r3, [r7, #20]
 8000886:	e008      	b.n	800089a <main+0xfa>
    {
        *(p + i) = 0x12345678;
 8000888:	697b      	ldr	r3, [r7, #20]
 800088a:	009b      	lsls	r3, r3, #2
 800088c:	68fa      	ldr	r2, [r7, #12]
 800088e:	4413      	add	r3, r2
 8000890:	4a0f      	ldr	r2, [pc, #60]	; (80008d0 <main+0x130>)
 8000892:	601a      	str	r2, [r3, #0]
    for (uint32_t i = 0; i < (0x02000000 / 4); i++)
 8000894:	697b      	ldr	r3, [r7, #20]
 8000896:	3301      	adds	r3, #1
 8000898:	617b      	str	r3, [r7, #20]
 800089a:	697b      	ldr	r3, [r7, #20]
 800089c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80008a0:	d3f2      	bcc.n	8000888 <main+0xe8>
    }

    // read
    for (uint32_t i = 0; i < 1024; i++)
 80008a2:	2300      	movs	r3, #0
 80008a4:	613b      	str	r3, [r7, #16]
 80008a6:	e00b      	b.n	80008c0 <main+0x120>
    {
        r_buf[i] = *(p + i);
 80008a8:	693b      	ldr	r3, [r7, #16]
 80008aa:	009b      	lsls	r3, r3, #2
 80008ac:	68fa      	ldr	r2, [r7, #12]
 80008ae:	4413      	add	r3, r2
 80008b0:	681a      	ldr	r2, [r3, #0]
 80008b2:	4908      	ldr	r1, [pc, #32]	; (80008d4 <main+0x134>)
 80008b4:	693b      	ldr	r3, [r7, #16]
 80008b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    for (uint32_t i = 0; i < 1024; i++)
 80008ba:	693b      	ldr	r3, [r7, #16]
 80008bc:	3301      	adds	r3, #1
 80008be:	613b      	str	r3, [r7, #16]
 80008c0:	693b      	ldr	r3, [r7, #16]
 80008c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80008c6:	d3ef      	bcc.n	80008a8 <main+0x108>
    }
    /* USER CODE END 2 */

    /* Infinite loop */
    /* USER CODE BEGIN WHILE */
    while (1)
 80008c8:	e7fe      	b.n	80008c8 <main+0x128>
 80008ca:	bf00      	nop
 80008cc:	e000ed00 	.word	0xe000ed00
 80008d0:	12345678 	.word	0x12345678
 80008d4:	24000064 	.word	0x24000064

080008d8 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	b09c      	sub	sp, #112	; 0x70
 80008dc:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008e2:	224c      	movs	r2, #76	; 0x4c
 80008e4:	2100      	movs	r1, #0
 80008e6:	4618      	mov	r0, r3
 80008e8:	f003 fa90 	bl	8003e0c <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008ec:	1d3b      	adds	r3, r7, #4
 80008ee:	2220      	movs	r2, #32
 80008f0:	2100      	movs	r1, #0
 80008f2:	4618      	mov	r0, r3
 80008f4:	f003 fa8a 	bl	8003e0c <memset>

    /** Supply configuration update enable
     */
    HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 80008f8:	2004      	movs	r0, #4
 80008fa:	f000 fc29 	bl	8001150 <HAL_PWREx_ConfigSupply>

    /** Configure the main internal regulator output voltage
     */
    __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80008fe:	2300      	movs	r3, #0
 8000900:	603b      	str	r3, [r7, #0]
 8000902:	4b31      	ldr	r3, [pc, #196]	; (80009c8 <SystemClock_Config+0xf0>)
 8000904:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000906:	4a30      	ldr	r2, [pc, #192]	; (80009c8 <SystemClock_Config+0xf0>)
 8000908:	f023 0301 	bic.w	r3, r3, #1
 800090c:	62d3      	str	r3, [r2, #44]	; 0x2c
 800090e:	4b2e      	ldr	r3, [pc, #184]	; (80009c8 <SystemClock_Config+0xf0>)
 8000910:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000912:	f003 0301 	and.w	r3, r3, #1
 8000916:	603b      	str	r3, [r7, #0]
 8000918:	4b2c      	ldr	r3, [pc, #176]	; (80009cc <SystemClock_Config+0xf4>)
 800091a:	699b      	ldr	r3, [r3, #24]
 800091c:	4a2b      	ldr	r2, [pc, #172]	; (80009cc <SystemClock_Config+0xf4>)
 800091e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000922:	6193      	str	r3, [r2, #24]
 8000924:	4b29      	ldr	r3, [pc, #164]	; (80009cc <SystemClock_Config+0xf4>)
 8000926:	699b      	ldr	r3, [r3, #24]
 8000928:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800092c:	603b      	str	r3, [r7, #0]
 800092e:	683b      	ldr	r3, [r7, #0]

    while (!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY))
 8000930:	bf00      	nop
 8000932:	4b26      	ldr	r3, [pc, #152]	; (80009cc <SystemClock_Config+0xf4>)
 8000934:	699b      	ldr	r3, [r3, #24]
 8000936:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800093a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800093e:	d1f8      	bne.n	8000932 <SystemClock_Config+0x5a>
    }

    /** Initializes the RCC Oscillators according to the specified parameters
     * in the RCC_OscInitTypeDef structure.
     */
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000940:	2302      	movs	r3, #2
 8000942:	627b      	str	r3, [r7, #36]	; 0x24
    RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000944:	2301      	movs	r3, #1
 8000946:	633b      	str	r3, [r7, #48]	; 0x30
    RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000948:	2340      	movs	r3, #64	; 0x40
 800094a:	637b      	str	r3, [r7, #52]	; 0x34
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800094c:	2302      	movs	r3, #2
 800094e:	64bb      	str	r3, [r7, #72]	; 0x48
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000950:	2300      	movs	r3, #0
 8000952:	64fb      	str	r3, [r7, #76]	; 0x4c
    RCC_OscInitStruct.PLL.PLLM = 4;
 8000954:	2304      	movs	r3, #4
 8000956:	653b      	str	r3, [r7, #80]	; 0x50
    RCC_OscInitStruct.PLL.PLLN = 50;
 8000958:	2332      	movs	r3, #50	; 0x32
 800095a:	657b      	str	r3, [r7, #84]	; 0x54
    RCC_OscInitStruct.PLL.PLLP = 2;
 800095c:	2302      	movs	r3, #2
 800095e:	65bb      	str	r3, [r7, #88]	; 0x58
    RCC_OscInitStruct.PLL.PLLQ = 5;
 8000960:	2305      	movs	r3, #5
 8000962:	65fb      	str	r3, [r7, #92]	; 0x5c
    RCC_OscInitStruct.PLL.PLLR = 2;
 8000964:	2302      	movs	r3, #2
 8000966:	663b      	str	r3, [r7, #96]	; 0x60
    RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000968:	230c      	movs	r3, #12
 800096a:	667b      	str	r3, [r7, #100]	; 0x64
    RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800096c:	2300      	movs	r3, #0
 800096e:	66bb      	str	r3, [r7, #104]	; 0x68
    RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000970:	2300      	movs	r3, #0
 8000972:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000974:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000978:	4618      	mov	r0, r3
 800097a:	f000 fc43 	bl	8001204 <HAL_RCC_OscConfig>
 800097e:	4603      	mov	r3, r0
 8000980:	2b00      	cmp	r3, #0
 8000982:	d001      	beq.n	8000988 <SystemClock_Config+0xb0>
    {
        Error_Handler();
 8000984:	f000 f824 	bl	80009d0 <Error_Handler>
    }

    /** Initializes the CPU, AHB and APB buses clocks
     */
    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000988:	233f      	movs	r3, #63	; 0x3f
 800098a:	607b      	str	r3, [r7, #4]
            | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2
            | RCC_CLOCKTYPE_D3PCLK1 | RCC_CLOCKTYPE_D1PCLK1;
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800098c:	2303      	movs	r3, #3
 800098e:	60bb      	str	r3, [r7, #8]
    RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000990:	2300      	movs	r3, #0
 8000992:	60fb      	str	r3, [r7, #12]
    RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000994:	2308      	movs	r3, #8
 8000996:	613b      	str	r3, [r7, #16]
    RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000998:	2340      	movs	r3, #64	; 0x40
 800099a:	617b      	str	r3, [r7, #20]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800099c:	2340      	movs	r3, #64	; 0x40
 800099e:	61bb      	str	r3, [r7, #24]
    RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80009a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80009a4:	61fb      	str	r3, [r7, #28]
    RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80009a6:	2340      	movs	r3, #64	; 0x40
 80009a8:	623b      	str	r3, [r7, #32]

    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80009aa:	1d3b      	adds	r3, r7, #4
 80009ac:	2102      	movs	r1, #2
 80009ae:	4618      	mov	r0, r3
 80009b0:	f001 f882 	bl	8001ab8 <HAL_RCC_ClockConfig>
 80009b4:	4603      	mov	r3, r0
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d001      	beq.n	80009be <SystemClock_Config+0xe6>
    {
        Error_Handler();
 80009ba:	f000 f809 	bl	80009d0 <Error_Handler>
    }
}
 80009be:	bf00      	nop
 80009c0:	3770      	adds	r7, #112	; 0x70
 80009c2:	46bd      	mov	sp, r7
 80009c4:	bd80      	pop	{r7, pc}
 80009c6:	bf00      	nop
 80009c8:	58000400 	.word	0x58000400
 80009cc:	58024800 	.word	0x58024800

080009d0 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 80009d0:	b480      	push	{r7}
 80009d2:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80009d4:	b672      	cpsid	i
}
 80009d6:	bf00      	nop
    /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */
    __disable_irq();
    while (1)
 80009d8:	e7fe      	b.n	80009d8 <Error_Handler+0x8>
	...

080009dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009dc:	b480      	push	{r7}
 80009de:	b083      	sub	sp, #12
 80009e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009e2:	4b0a      	ldr	r3, [pc, #40]	; (8000a0c <HAL_MspInit+0x30>)
 80009e4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80009e8:	4a08      	ldr	r2, [pc, #32]	; (8000a0c <HAL_MspInit+0x30>)
 80009ea:	f043 0302 	orr.w	r3, r3, #2
 80009ee:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80009f2:	4b06      	ldr	r3, [pc, #24]	; (8000a0c <HAL_MspInit+0x30>)
 80009f4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80009f8:	f003 0302 	and.w	r3, r3, #2
 80009fc:	607b      	str	r3, [r7, #4]
 80009fe:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a00:	bf00      	nop
 8000a02:	370c      	adds	r7, #12
 8000a04:	46bd      	mov	sp, r7
 8000a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0a:	4770      	bx	lr
 8000a0c:	58024400 	.word	0x58024400

08000a10 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a10:	b480      	push	{r7}
 8000a12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a14:	e7fe      	b.n	8000a14 <NMI_Handler+0x4>

08000a16 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a16:	b480      	push	{r7}
 8000a18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a1a:	e7fe      	b.n	8000a1a <HardFault_Handler+0x4>

08000a1c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a1c:	b480      	push	{r7}
 8000a1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a20:	e7fe      	b.n	8000a20 <MemManage_Handler+0x4>

08000a22 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a22:	b480      	push	{r7}
 8000a24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a26:	e7fe      	b.n	8000a26 <BusFault_Handler+0x4>

08000a28 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a2c:	e7fe      	b.n	8000a2c <UsageFault_Handler+0x4>

08000a2e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a2e:	b480      	push	{r7}
 8000a30:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a32:	bf00      	nop
 8000a34:	46bd      	mov	sp, r7
 8000a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3a:	4770      	bx	lr

08000a3c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a40:	bf00      	nop
 8000a42:	46bd      	mov	sp, r7
 8000a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a48:	4770      	bx	lr

08000a4a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a4a:	b480      	push	{r7}
 8000a4c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a4e:	bf00      	nop
 8000a50:	46bd      	mov	sp, r7
 8000a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a56:	4770      	bx	lr

08000a58 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a5c:	f000 f89e 	bl	8000b9c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a60:	bf00      	nop
 8000a62:	bd80      	pop	{r7, pc}

08000a64 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000a64:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a9c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000a68:	f7ff fc36 	bl	80002d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a6c:	480c      	ldr	r0, [pc, #48]	; (8000aa0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000a6e:	490d      	ldr	r1, [pc, #52]	; (8000aa4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000a70:	4a0d      	ldr	r2, [pc, #52]	; (8000aa8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000a72:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a74:	e002      	b.n	8000a7c <LoopCopyDataInit>

08000a76 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a76:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a78:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a7a:	3304      	adds	r3, #4

08000a7c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a7c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a7e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a80:	d3f9      	bcc.n	8000a76 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a82:	4a0a      	ldr	r2, [pc, #40]	; (8000aac <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000a84:	4c0a      	ldr	r4, [pc, #40]	; (8000ab0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000a86:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a88:	e001      	b.n	8000a8e <LoopFillZerobss>

08000a8a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a8a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a8c:	3204      	adds	r2, #4

08000a8e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a8e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a90:	d3fb      	bcc.n	8000a8a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000a92:	f003 f997 	bl	8003dc4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a96:	f7ff fe83 	bl	80007a0 <main>
  bx  lr
 8000a9a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000a9c:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000aa0:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000aa4:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 8000aa8:	08003e4c 	.word	0x08003e4c
  ldr r2, =_sbss
 8000aac:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 8000ab0:	24001078 	.word	0x24001078

08000ab4 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ab4:	e7fe      	b.n	8000ab4 <ADC3_IRQHandler>
	...

08000ab8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b082      	sub	sp, #8
 8000abc:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000abe:	2003      	movs	r0, #3
 8000ac0:	f000 f94a 	bl	8000d58 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000ac4:	f001 f9ae 	bl	8001e24 <HAL_RCC_GetSysClockFreq>
 8000ac8:	4602      	mov	r2, r0
 8000aca:	4b15      	ldr	r3, [pc, #84]	; (8000b20 <HAL_Init+0x68>)
 8000acc:	699b      	ldr	r3, [r3, #24]
 8000ace:	0a1b      	lsrs	r3, r3, #8
 8000ad0:	f003 030f 	and.w	r3, r3, #15
 8000ad4:	4913      	ldr	r1, [pc, #76]	; (8000b24 <HAL_Init+0x6c>)
 8000ad6:	5ccb      	ldrb	r3, [r1, r3]
 8000ad8:	f003 031f 	and.w	r3, r3, #31
 8000adc:	fa22 f303 	lsr.w	r3, r2, r3
 8000ae0:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000ae2:	4b0f      	ldr	r3, [pc, #60]	; (8000b20 <HAL_Init+0x68>)
 8000ae4:	699b      	ldr	r3, [r3, #24]
 8000ae6:	f003 030f 	and.w	r3, r3, #15
 8000aea:	4a0e      	ldr	r2, [pc, #56]	; (8000b24 <HAL_Init+0x6c>)
 8000aec:	5cd3      	ldrb	r3, [r2, r3]
 8000aee:	f003 031f 	and.w	r3, r3, #31
 8000af2:	687a      	ldr	r2, [r7, #4]
 8000af4:	fa22 f303 	lsr.w	r3, r2, r3
 8000af8:	4a0b      	ldr	r2, [pc, #44]	; (8000b28 <HAL_Init+0x70>)
 8000afa:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000afc:	4a0b      	ldr	r2, [pc, #44]	; (8000b2c <HAL_Init+0x74>)
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000b02:	200f      	movs	r0, #15
 8000b04:	f000 f814 	bl	8000b30 <HAL_InitTick>
 8000b08:	4603      	mov	r3, r0
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d001      	beq.n	8000b12 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000b0e:	2301      	movs	r3, #1
 8000b10:	e002      	b.n	8000b18 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000b12:	f7ff ff63 	bl	80009dc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b16:	2300      	movs	r3, #0
}
 8000b18:	4618      	mov	r0, r3
 8000b1a:	3708      	adds	r7, #8
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	bd80      	pop	{r7, pc}
 8000b20:	58024400 	.word	0x58024400
 8000b24:	08003e34 	.word	0x08003e34
 8000b28:	24000004 	.word	0x24000004
 8000b2c:	24000000 	.word	0x24000000

08000b30 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b082      	sub	sp, #8
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000b38:	4b15      	ldr	r3, [pc, #84]	; (8000b90 <HAL_InitTick+0x60>)
 8000b3a:	781b      	ldrb	r3, [r3, #0]
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d101      	bne.n	8000b44 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000b40:	2301      	movs	r3, #1
 8000b42:	e021      	b.n	8000b88 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000b44:	4b13      	ldr	r3, [pc, #76]	; (8000b94 <HAL_InitTick+0x64>)
 8000b46:	681a      	ldr	r2, [r3, #0]
 8000b48:	4b11      	ldr	r3, [pc, #68]	; (8000b90 <HAL_InitTick+0x60>)
 8000b4a:	781b      	ldrb	r3, [r3, #0]
 8000b4c:	4619      	mov	r1, r3
 8000b4e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b52:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b56:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b5a:	4618      	mov	r0, r3
 8000b5c:	f000 f921 	bl	8000da2 <HAL_SYSTICK_Config>
 8000b60:	4603      	mov	r3, r0
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d001      	beq.n	8000b6a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000b66:	2301      	movs	r3, #1
 8000b68:	e00e      	b.n	8000b88 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	2b0f      	cmp	r3, #15
 8000b6e:	d80a      	bhi.n	8000b86 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b70:	2200      	movs	r2, #0
 8000b72:	6879      	ldr	r1, [r7, #4]
 8000b74:	f04f 30ff 	mov.w	r0, #4294967295
 8000b78:	f000 f8f9 	bl	8000d6e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b7c:	4a06      	ldr	r2, [pc, #24]	; (8000b98 <HAL_InitTick+0x68>)
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b82:	2300      	movs	r3, #0
 8000b84:	e000      	b.n	8000b88 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000b86:	2301      	movs	r3, #1
}
 8000b88:	4618      	mov	r0, r3
 8000b8a:	3708      	adds	r7, #8
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	bd80      	pop	{r7, pc}
 8000b90:	2400000c 	.word	0x2400000c
 8000b94:	24000000 	.word	0x24000000
 8000b98:	24000008 	.word	0x24000008

08000b9c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000ba0:	4b06      	ldr	r3, [pc, #24]	; (8000bbc <HAL_IncTick+0x20>)
 8000ba2:	781b      	ldrb	r3, [r3, #0]
 8000ba4:	461a      	mov	r2, r3
 8000ba6:	4b06      	ldr	r3, [pc, #24]	; (8000bc0 <HAL_IncTick+0x24>)
 8000ba8:	681b      	ldr	r3, [r3, #0]
 8000baa:	4413      	add	r3, r2
 8000bac:	4a04      	ldr	r2, [pc, #16]	; (8000bc0 <HAL_IncTick+0x24>)
 8000bae:	6013      	str	r3, [r2, #0]
}
 8000bb0:	bf00      	nop
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb8:	4770      	bx	lr
 8000bba:	bf00      	nop
 8000bbc:	2400000c 	.word	0x2400000c
 8000bc0:	24001064 	.word	0x24001064

08000bc4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	af00      	add	r7, sp, #0
  return uwTick;
 8000bc8:	4b03      	ldr	r3, [pc, #12]	; (8000bd8 <HAL_GetTick+0x14>)
 8000bca:	681b      	ldr	r3, [r3, #0]
}
 8000bcc:	4618      	mov	r0, r3
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop
 8000bd8:	24001064 	.word	0x24001064

08000bdc <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8000be0:	4b03      	ldr	r3, [pc, #12]	; (8000bf0 <HAL_GetREVID+0x14>)
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	0c1b      	lsrs	r3, r3, #16
}
 8000be6:	4618      	mov	r0, r3
 8000be8:	46bd      	mov	sp, r7
 8000bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bee:	4770      	bx	lr
 8000bf0:	5c001000 	.word	0x5c001000

08000bf4 <__NVIC_SetPriorityGrouping>:
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	b085      	sub	sp, #20
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	f003 0307 	and.w	r3, r3, #7
 8000c02:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c04:	4b0b      	ldr	r3, [pc, #44]	; (8000c34 <__NVIC_SetPriorityGrouping+0x40>)
 8000c06:	68db      	ldr	r3, [r3, #12]
 8000c08:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c0a:	68ba      	ldr	r2, [r7, #8]
 8000c0c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c10:	4013      	ands	r3, r2
 8000c12:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c14:	68fb      	ldr	r3, [r7, #12]
 8000c16:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c18:	68bb      	ldr	r3, [r7, #8]
 8000c1a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000c1c:	4b06      	ldr	r3, [pc, #24]	; (8000c38 <__NVIC_SetPriorityGrouping+0x44>)
 8000c1e:	4313      	orrs	r3, r2
 8000c20:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c22:	4a04      	ldr	r2, [pc, #16]	; (8000c34 <__NVIC_SetPriorityGrouping+0x40>)
 8000c24:	68bb      	ldr	r3, [r7, #8]
 8000c26:	60d3      	str	r3, [r2, #12]
}
 8000c28:	bf00      	nop
 8000c2a:	3714      	adds	r7, #20
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c32:	4770      	bx	lr
 8000c34:	e000ed00 	.word	0xe000ed00
 8000c38:	05fa0000 	.word	0x05fa0000

08000c3c <__NVIC_GetPriorityGrouping>:
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c40:	4b04      	ldr	r3, [pc, #16]	; (8000c54 <__NVIC_GetPriorityGrouping+0x18>)
 8000c42:	68db      	ldr	r3, [r3, #12]
 8000c44:	0a1b      	lsrs	r3, r3, #8
 8000c46:	f003 0307 	and.w	r3, r3, #7
}
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c52:	4770      	bx	lr
 8000c54:	e000ed00 	.word	0xe000ed00

08000c58 <__NVIC_SetPriority>:
{
 8000c58:	b480      	push	{r7}
 8000c5a:	b083      	sub	sp, #12
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	4603      	mov	r3, r0
 8000c60:	6039      	str	r1, [r7, #0]
 8000c62:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000c64:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	db0a      	blt.n	8000c82 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c6c:	683b      	ldr	r3, [r7, #0]
 8000c6e:	b2da      	uxtb	r2, r3
 8000c70:	490c      	ldr	r1, [pc, #48]	; (8000ca4 <__NVIC_SetPriority+0x4c>)
 8000c72:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000c76:	0112      	lsls	r2, r2, #4
 8000c78:	b2d2      	uxtb	r2, r2
 8000c7a:	440b      	add	r3, r1
 8000c7c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000c80:	e00a      	b.n	8000c98 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c82:	683b      	ldr	r3, [r7, #0]
 8000c84:	b2da      	uxtb	r2, r3
 8000c86:	4908      	ldr	r1, [pc, #32]	; (8000ca8 <__NVIC_SetPriority+0x50>)
 8000c88:	88fb      	ldrh	r3, [r7, #6]
 8000c8a:	f003 030f 	and.w	r3, r3, #15
 8000c8e:	3b04      	subs	r3, #4
 8000c90:	0112      	lsls	r2, r2, #4
 8000c92:	b2d2      	uxtb	r2, r2
 8000c94:	440b      	add	r3, r1
 8000c96:	761a      	strb	r2, [r3, #24]
}
 8000c98:	bf00      	nop
 8000c9a:	370c      	adds	r7, #12
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca2:	4770      	bx	lr
 8000ca4:	e000e100 	.word	0xe000e100
 8000ca8:	e000ed00 	.word	0xe000ed00

08000cac <NVIC_EncodePriority>:
{
 8000cac:	b480      	push	{r7}
 8000cae:	b089      	sub	sp, #36	; 0x24
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	60f8      	str	r0, [r7, #12]
 8000cb4:	60b9      	str	r1, [r7, #8]
 8000cb6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000cb8:	68fb      	ldr	r3, [r7, #12]
 8000cba:	f003 0307 	and.w	r3, r3, #7
 8000cbe:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000cc0:	69fb      	ldr	r3, [r7, #28]
 8000cc2:	f1c3 0307 	rsb	r3, r3, #7
 8000cc6:	2b04      	cmp	r3, #4
 8000cc8:	bf28      	it	cs
 8000cca:	2304      	movcs	r3, #4
 8000ccc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000cce:	69fb      	ldr	r3, [r7, #28]
 8000cd0:	3304      	adds	r3, #4
 8000cd2:	2b06      	cmp	r3, #6
 8000cd4:	d902      	bls.n	8000cdc <NVIC_EncodePriority+0x30>
 8000cd6:	69fb      	ldr	r3, [r7, #28]
 8000cd8:	3b03      	subs	r3, #3
 8000cda:	e000      	b.n	8000cde <NVIC_EncodePriority+0x32>
 8000cdc:	2300      	movs	r3, #0
 8000cde:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ce0:	f04f 32ff 	mov.w	r2, #4294967295
 8000ce4:	69bb      	ldr	r3, [r7, #24]
 8000ce6:	fa02 f303 	lsl.w	r3, r2, r3
 8000cea:	43da      	mvns	r2, r3
 8000cec:	68bb      	ldr	r3, [r7, #8]
 8000cee:	401a      	ands	r2, r3
 8000cf0:	697b      	ldr	r3, [r7, #20]
 8000cf2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000cf4:	f04f 31ff 	mov.w	r1, #4294967295
 8000cf8:	697b      	ldr	r3, [r7, #20]
 8000cfa:	fa01 f303 	lsl.w	r3, r1, r3
 8000cfe:	43d9      	mvns	r1, r3
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d04:	4313      	orrs	r3, r2
}
 8000d06:	4618      	mov	r0, r3
 8000d08:	3724      	adds	r7, #36	; 0x24
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d10:	4770      	bx	lr
	...

08000d14 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b082      	sub	sp, #8
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	3b01      	subs	r3, #1
 8000d20:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d24:	d301      	bcc.n	8000d2a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d26:	2301      	movs	r3, #1
 8000d28:	e00f      	b.n	8000d4a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d2a:	4a0a      	ldr	r2, [pc, #40]	; (8000d54 <SysTick_Config+0x40>)
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	3b01      	subs	r3, #1
 8000d30:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d32:	210f      	movs	r1, #15
 8000d34:	f04f 30ff 	mov.w	r0, #4294967295
 8000d38:	f7ff ff8e 	bl	8000c58 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d3c:	4b05      	ldr	r3, [pc, #20]	; (8000d54 <SysTick_Config+0x40>)
 8000d3e:	2200      	movs	r2, #0
 8000d40:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d42:	4b04      	ldr	r3, [pc, #16]	; (8000d54 <SysTick_Config+0x40>)
 8000d44:	2207      	movs	r2, #7
 8000d46:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d48:	2300      	movs	r3, #0
}
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	3708      	adds	r7, #8
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	bd80      	pop	{r7, pc}
 8000d52:	bf00      	nop
 8000d54:	e000e010 	.word	0xe000e010

08000d58 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b082      	sub	sp, #8
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d60:	6878      	ldr	r0, [r7, #4]
 8000d62:	f7ff ff47 	bl	8000bf4 <__NVIC_SetPriorityGrouping>
}
 8000d66:	bf00      	nop
 8000d68:	3708      	adds	r7, #8
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	bd80      	pop	{r7, pc}

08000d6e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d6e:	b580      	push	{r7, lr}
 8000d70:	b086      	sub	sp, #24
 8000d72:	af00      	add	r7, sp, #0
 8000d74:	4603      	mov	r3, r0
 8000d76:	60b9      	str	r1, [r7, #8]
 8000d78:	607a      	str	r2, [r7, #4]
 8000d7a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000d7c:	f7ff ff5e 	bl	8000c3c <__NVIC_GetPriorityGrouping>
 8000d80:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d82:	687a      	ldr	r2, [r7, #4]
 8000d84:	68b9      	ldr	r1, [r7, #8]
 8000d86:	6978      	ldr	r0, [r7, #20]
 8000d88:	f7ff ff90 	bl	8000cac <NVIC_EncodePriority>
 8000d8c:	4602      	mov	r2, r0
 8000d8e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000d92:	4611      	mov	r1, r2
 8000d94:	4618      	mov	r0, r3
 8000d96:	f7ff ff5f 	bl	8000c58 <__NVIC_SetPriority>
}
 8000d9a:	bf00      	nop
 8000d9c:	3718      	adds	r7, #24
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	bd80      	pop	{r7, pc}

08000da2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000da2:	b580      	push	{r7, lr}
 8000da4:	b082      	sub	sp, #8
 8000da6:	af00      	add	r7, sp, #0
 8000da8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000daa:	6878      	ldr	r0, [r7, #4]
 8000dac:	f7ff ffb2 	bl	8000d14 <SysTick_Config>
 8000db0:	4603      	mov	r3, r0
}
 8000db2:	4618      	mov	r0, r3
 8000db4:	3708      	adds	r7, #8
 8000db6:	46bd      	mov	sp, r7
 8000db8:	bd80      	pop	{r7, pc}
	...

08000dbc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	b089      	sub	sp, #36	; 0x24
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
 8000dc4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8000dca:	4b89      	ldr	r3, [pc, #548]	; (8000ff0 <HAL_GPIO_Init+0x234>)
 8000dcc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8000dce:	e194      	b.n	80010fa <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000dd0:	683b      	ldr	r3, [r7, #0]
 8000dd2:	681a      	ldr	r2, [r3, #0]
 8000dd4:	2101      	movs	r1, #1
 8000dd6:	69fb      	ldr	r3, [r7, #28]
 8000dd8:	fa01 f303 	lsl.w	r3, r1, r3
 8000ddc:	4013      	ands	r3, r2
 8000dde:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8000de0:	693b      	ldr	r3, [r7, #16]
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	f000 8186 	beq.w	80010f4 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000de8:	683b      	ldr	r3, [r7, #0]
 8000dea:	685b      	ldr	r3, [r3, #4]
 8000dec:	f003 0303 	and.w	r3, r3, #3
 8000df0:	2b01      	cmp	r3, #1
 8000df2:	d005      	beq.n	8000e00 <HAL_GPIO_Init+0x44>
 8000df4:	683b      	ldr	r3, [r7, #0]
 8000df6:	685b      	ldr	r3, [r3, #4]
 8000df8:	f003 0303 	and.w	r3, r3, #3
 8000dfc:	2b02      	cmp	r3, #2
 8000dfe:	d130      	bne.n	8000e62 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	689b      	ldr	r3, [r3, #8]
 8000e04:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000e06:	69fb      	ldr	r3, [r7, #28]
 8000e08:	005b      	lsls	r3, r3, #1
 8000e0a:	2203      	movs	r2, #3
 8000e0c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e10:	43db      	mvns	r3, r3
 8000e12:	69ba      	ldr	r2, [r7, #24]
 8000e14:	4013      	ands	r3, r2
 8000e16:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000e18:	683b      	ldr	r3, [r7, #0]
 8000e1a:	68da      	ldr	r2, [r3, #12]
 8000e1c:	69fb      	ldr	r3, [r7, #28]
 8000e1e:	005b      	lsls	r3, r3, #1
 8000e20:	fa02 f303 	lsl.w	r3, r2, r3
 8000e24:	69ba      	ldr	r2, [r7, #24]
 8000e26:	4313      	orrs	r3, r2
 8000e28:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	69ba      	ldr	r2, [r7, #24]
 8000e2e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	685b      	ldr	r3, [r3, #4]
 8000e34:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000e36:	2201      	movs	r2, #1
 8000e38:	69fb      	ldr	r3, [r7, #28]
 8000e3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e3e:	43db      	mvns	r3, r3
 8000e40:	69ba      	ldr	r2, [r7, #24]
 8000e42:	4013      	ands	r3, r2
 8000e44:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e46:	683b      	ldr	r3, [r7, #0]
 8000e48:	685b      	ldr	r3, [r3, #4]
 8000e4a:	091b      	lsrs	r3, r3, #4
 8000e4c:	f003 0201 	and.w	r2, r3, #1
 8000e50:	69fb      	ldr	r3, [r7, #28]
 8000e52:	fa02 f303 	lsl.w	r3, r2, r3
 8000e56:	69ba      	ldr	r2, [r7, #24]
 8000e58:	4313      	orrs	r3, r2
 8000e5a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	69ba      	ldr	r2, [r7, #24]
 8000e60:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e62:	683b      	ldr	r3, [r7, #0]
 8000e64:	685b      	ldr	r3, [r3, #4]
 8000e66:	f003 0303 	and.w	r3, r3, #3
 8000e6a:	2b03      	cmp	r3, #3
 8000e6c:	d017      	beq.n	8000e9e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	68db      	ldr	r3, [r3, #12]
 8000e72:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000e74:	69fb      	ldr	r3, [r7, #28]
 8000e76:	005b      	lsls	r3, r3, #1
 8000e78:	2203      	movs	r2, #3
 8000e7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e7e:	43db      	mvns	r3, r3
 8000e80:	69ba      	ldr	r2, [r7, #24]
 8000e82:	4013      	ands	r3, r2
 8000e84:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e86:	683b      	ldr	r3, [r7, #0]
 8000e88:	689a      	ldr	r2, [r3, #8]
 8000e8a:	69fb      	ldr	r3, [r7, #28]
 8000e8c:	005b      	lsls	r3, r3, #1
 8000e8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e92:	69ba      	ldr	r2, [r7, #24]
 8000e94:	4313      	orrs	r3, r2
 8000e96:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	69ba      	ldr	r2, [r7, #24]
 8000e9c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e9e:	683b      	ldr	r3, [r7, #0]
 8000ea0:	685b      	ldr	r3, [r3, #4]
 8000ea2:	f003 0303 	and.w	r3, r3, #3
 8000ea6:	2b02      	cmp	r3, #2
 8000ea8:	d123      	bne.n	8000ef2 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000eaa:	69fb      	ldr	r3, [r7, #28]
 8000eac:	08da      	lsrs	r2, r3, #3
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	3208      	adds	r2, #8
 8000eb2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000eb6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000eb8:	69fb      	ldr	r3, [r7, #28]
 8000eba:	f003 0307 	and.w	r3, r3, #7
 8000ebe:	009b      	lsls	r3, r3, #2
 8000ec0:	220f      	movs	r2, #15
 8000ec2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec6:	43db      	mvns	r3, r3
 8000ec8:	69ba      	ldr	r2, [r7, #24]
 8000eca:	4013      	ands	r3, r2
 8000ecc:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000ece:	683b      	ldr	r3, [r7, #0]
 8000ed0:	691a      	ldr	r2, [r3, #16]
 8000ed2:	69fb      	ldr	r3, [r7, #28]
 8000ed4:	f003 0307 	and.w	r3, r3, #7
 8000ed8:	009b      	lsls	r3, r3, #2
 8000eda:	fa02 f303 	lsl.w	r3, r2, r3
 8000ede:	69ba      	ldr	r2, [r7, #24]
 8000ee0:	4313      	orrs	r3, r2
 8000ee2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000ee4:	69fb      	ldr	r3, [r7, #28]
 8000ee6:	08da      	lsrs	r2, r3, #3
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	3208      	adds	r2, #8
 8000eec:	69b9      	ldr	r1, [r7, #24]
 8000eee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000ef8:	69fb      	ldr	r3, [r7, #28]
 8000efa:	005b      	lsls	r3, r3, #1
 8000efc:	2203      	movs	r2, #3
 8000efe:	fa02 f303 	lsl.w	r3, r2, r3
 8000f02:	43db      	mvns	r3, r3
 8000f04:	69ba      	ldr	r2, [r7, #24]
 8000f06:	4013      	ands	r3, r2
 8000f08:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f0a:	683b      	ldr	r3, [r7, #0]
 8000f0c:	685b      	ldr	r3, [r3, #4]
 8000f0e:	f003 0203 	and.w	r2, r3, #3
 8000f12:	69fb      	ldr	r3, [r7, #28]
 8000f14:	005b      	lsls	r3, r3, #1
 8000f16:	fa02 f303 	lsl.w	r3, r2, r3
 8000f1a:	69ba      	ldr	r2, [r7, #24]
 8000f1c:	4313      	orrs	r3, r2
 8000f1e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	69ba      	ldr	r2, [r7, #24]
 8000f24:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000f26:	683b      	ldr	r3, [r7, #0]
 8000f28:	685b      	ldr	r3, [r3, #4]
 8000f2a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	f000 80e0 	beq.w	80010f4 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f34:	4b2f      	ldr	r3, [pc, #188]	; (8000ff4 <HAL_GPIO_Init+0x238>)
 8000f36:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000f3a:	4a2e      	ldr	r2, [pc, #184]	; (8000ff4 <HAL_GPIO_Init+0x238>)
 8000f3c:	f043 0302 	orr.w	r3, r3, #2
 8000f40:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000f44:	4b2b      	ldr	r3, [pc, #172]	; (8000ff4 <HAL_GPIO_Init+0x238>)
 8000f46:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000f4a:	f003 0302 	and.w	r3, r3, #2
 8000f4e:	60fb      	str	r3, [r7, #12]
 8000f50:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000f52:	4a29      	ldr	r2, [pc, #164]	; (8000ff8 <HAL_GPIO_Init+0x23c>)
 8000f54:	69fb      	ldr	r3, [r7, #28]
 8000f56:	089b      	lsrs	r3, r3, #2
 8000f58:	3302      	adds	r3, #2
 8000f5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8000f60:	69fb      	ldr	r3, [r7, #28]
 8000f62:	f003 0303 	and.w	r3, r3, #3
 8000f66:	009b      	lsls	r3, r3, #2
 8000f68:	220f      	movs	r2, #15
 8000f6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f6e:	43db      	mvns	r3, r3
 8000f70:	69ba      	ldr	r2, [r7, #24]
 8000f72:	4013      	ands	r3, r2
 8000f74:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	4a20      	ldr	r2, [pc, #128]	; (8000ffc <HAL_GPIO_Init+0x240>)
 8000f7a:	4293      	cmp	r3, r2
 8000f7c:	d052      	beq.n	8001024 <HAL_GPIO_Init+0x268>
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	4a1f      	ldr	r2, [pc, #124]	; (8001000 <HAL_GPIO_Init+0x244>)
 8000f82:	4293      	cmp	r3, r2
 8000f84:	d031      	beq.n	8000fea <HAL_GPIO_Init+0x22e>
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	4a1e      	ldr	r2, [pc, #120]	; (8001004 <HAL_GPIO_Init+0x248>)
 8000f8a:	4293      	cmp	r3, r2
 8000f8c:	d02b      	beq.n	8000fe6 <HAL_GPIO_Init+0x22a>
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	4a1d      	ldr	r2, [pc, #116]	; (8001008 <HAL_GPIO_Init+0x24c>)
 8000f92:	4293      	cmp	r3, r2
 8000f94:	d025      	beq.n	8000fe2 <HAL_GPIO_Init+0x226>
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	4a1c      	ldr	r2, [pc, #112]	; (800100c <HAL_GPIO_Init+0x250>)
 8000f9a:	4293      	cmp	r3, r2
 8000f9c:	d01f      	beq.n	8000fde <HAL_GPIO_Init+0x222>
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	4a1b      	ldr	r2, [pc, #108]	; (8001010 <HAL_GPIO_Init+0x254>)
 8000fa2:	4293      	cmp	r3, r2
 8000fa4:	d019      	beq.n	8000fda <HAL_GPIO_Init+0x21e>
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	4a1a      	ldr	r2, [pc, #104]	; (8001014 <HAL_GPIO_Init+0x258>)
 8000faa:	4293      	cmp	r3, r2
 8000fac:	d013      	beq.n	8000fd6 <HAL_GPIO_Init+0x21a>
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	4a19      	ldr	r2, [pc, #100]	; (8001018 <HAL_GPIO_Init+0x25c>)
 8000fb2:	4293      	cmp	r3, r2
 8000fb4:	d00d      	beq.n	8000fd2 <HAL_GPIO_Init+0x216>
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	4a18      	ldr	r2, [pc, #96]	; (800101c <HAL_GPIO_Init+0x260>)
 8000fba:	4293      	cmp	r3, r2
 8000fbc:	d007      	beq.n	8000fce <HAL_GPIO_Init+0x212>
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	4a17      	ldr	r2, [pc, #92]	; (8001020 <HAL_GPIO_Init+0x264>)
 8000fc2:	4293      	cmp	r3, r2
 8000fc4:	d101      	bne.n	8000fca <HAL_GPIO_Init+0x20e>
 8000fc6:	2309      	movs	r3, #9
 8000fc8:	e02d      	b.n	8001026 <HAL_GPIO_Init+0x26a>
 8000fca:	230a      	movs	r3, #10
 8000fcc:	e02b      	b.n	8001026 <HAL_GPIO_Init+0x26a>
 8000fce:	2308      	movs	r3, #8
 8000fd0:	e029      	b.n	8001026 <HAL_GPIO_Init+0x26a>
 8000fd2:	2307      	movs	r3, #7
 8000fd4:	e027      	b.n	8001026 <HAL_GPIO_Init+0x26a>
 8000fd6:	2306      	movs	r3, #6
 8000fd8:	e025      	b.n	8001026 <HAL_GPIO_Init+0x26a>
 8000fda:	2305      	movs	r3, #5
 8000fdc:	e023      	b.n	8001026 <HAL_GPIO_Init+0x26a>
 8000fde:	2304      	movs	r3, #4
 8000fe0:	e021      	b.n	8001026 <HAL_GPIO_Init+0x26a>
 8000fe2:	2303      	movs	r3, #3
 8000fe4:	e01f      	b.n	8001026 <HAL_GPIO_Init+0x26a>
 8000fe6:	2302      	movs	r3, #2
 8000fe8:	e01d      	b.n	8001026 <HAL_GPIO_Init+0x26a>
 8000fea:	2301      	movs	r3, #1
 8000fec:	e01b      	b.n	8001026 <HAL_GPIO_Init+0x26a>
 8000fee:	bf00      	nop
 8000ff0:	58000080 	.word	0x58000080
 8000ff4:	58024400 	.word	0x58024400
 8000ff8:	58000400 	.word	0x58000400
 8000ffc:	58020000 	.word	0x58020000
 8001000:	58020400 	.word	0x58020400
 8001004:	58020800 	.word	0x58020800
 8001008:	58020c00 	.word	0x58020c00
 800100c:	58021000 	.word	0x58021000
 8001010:	58021400 	.word	0x58021400
 8001014:	58021800 	.word	0x58021800
 8001018:	58021c00 	.word	0x58021c00
 800101c:	58022000 	.word	0x58022000
 8001020:	58022400 	.word	0x58022400
 8001024:	2300      	movs	r3, #0
 8001026:	69fa      	ldr	r2, [r7, #28]
 8001028:	f002 0203 	and.w	r2, r2, #3
 800102c:	0092      	lsls	r2, r2, #2
 800102e:	4093      	lsls	r3, r2
 8001030:	69ba      	ldr	r2, [r7, #24]
 8001032:	4313      	orrs	r3, r2
 8001034:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001036:	4938      	ldr	r1, [pc, #224]	; (8001118 <HAL_GPIO_Init+0x35c>)
 8001038:	69fb      	ldr	r3, [r7, #28]
 800103a:	089b      	lsrs	r3, r3, #2
 800103c:	3302      	adds	r3, #2
 800103e:	69ba      	ldr	r2, [r7, #24]
 8001040:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001044:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800104c:	693b      	ldr	r3, [r7, #16]
 800104e:	43db      	mvns	r3, r3
 8001050:	69ba      	ldr	r2, [r7, #24]
 8001052:	4013      	ands	r3, r2
 8001054:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001056:	683b      	ldr	r3, [r7, #0]
 8001058:	685b      	ldr	r3, [r3, #4]
 800105a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800105e:	2b00      	cmp	r3, #0
 8001060:	d003      	beq.n	800106a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001062:	69ba      	ldr	r2, [r7, #24]
 8001064:	693b      	ldr	r3, [r7, #16]
 8001066:	4313      	orrs	r3, r2
 8001068:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800106a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800106e:	69bb      	ldr	r3, [r7, #24]
 8001070:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001072:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001076:	685b      	ldr	r3, [r3, #4]
 8001078:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800107a:	693b      	ldr	r3, [r7, #16]
 800107c:	43db      	mvns	r3, r3
 800107e:	69ba      	ldr	r2, [r7, #24]
 8001080:	4013      	ands	r3, r2
 8001082:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001084:	683b      	ldr	r3, [r7, #0]
 8001086:	685b      	ldr	r3, [r3, #4]
 8001088:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800108c:	2b00      	cmp	r3, #0
 800108e:	d003      	beq.n	8001098 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001090:	69ba      	ldr	r2, [r7, #24]
 8001092:	693b      	ldr	r3, [r7, #16]
 8001094:	4313      	orrs	r3, r2
 8001096:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001098:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800109c:	69bb      	ldr	r3, [r7, #24]
 800109e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80010a0:	697b      	ldr	r3, [r7, #20]
 80010a2:	685b      	ldr	r3, [r3, #4]
 80010a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80010a6:	693b      	ldr	r3, [r7, #16]
 80010a8:	43db      	mvns	r3, r3
 80010aa:	69ba      	ldr	r2, [r7, #24]
 80010ac:	4013      	ands	r3, r2
 80010ae:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80010b0:	683b      	ldr	r3, [r7, #0]
 80010b2:	685b      	ldr	r3, [r3, #4]
 80010b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d003      	beq.n	80010c4 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80010bc:	69ba      	ldr	r2, [r7, #24]
 80010be:	693b      	ldr	r3, [r7, #16]
 80010c0:	4313      	orrs	r3, r2
 80010c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80010c4:	697b      	ldr	r3, [r7, #20]
 80010c6:	69ba      	ldr	r2, [r7, #24]
 80010c8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80010ca:	697b      	ldr	r3, [r7, #20]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80010d0:	693b      	ldr	r3, [r7, #16]
 80010d2:	43db      	mvns	r3, r3
 80010d4:	69ba      	ldr	r2, [r7, #24]
 80010d6:	4013      	ands	r3, r2
 80010d8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80010da:	683b      	ldr	r3, [r7, #0]
 80010dc:	685b      	ldr	r3, [r3, #4]
 80010de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d003      	beq.n	80010ee <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80010e6:	69ba      	ldr	r2, [r7, #24]
 80010e8:	693b      	ldr	r3, [r7, #16]
 80010ea:	4313      	orrs	r3, r2
 80010ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80010ee:	697b      	ldr	r3, [r7, #20]
 80010f0:	69ba      	ldr	r2, [r7, #24]
 80010f2:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80010f4:	69fb      	ldr	r3, [r7, #28]
 80010f6:	3301      	adds	r3, #1
 80010f8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80010fa:	683b      	ldr	r3, [r7, #0]
 80010fc:	681a      	ldr	r2, [r3, #0]
 80010fe:	69fb      	ldr	r3, [r7, #28]
 8001100:	fa22 f303 	lsr.w	r3, r2, r3
 8001104:	2b00      	cmp	r3, #0
 8001106:	f47f ae63 	bne.w	8000dd0 <HAL_GPIO_Init+0x14>
  }
}
 800110a:	bf00      	nop
 800110c:	bf00      	nop
 800110e:	3724      	adds	r7, #36	; 0x24
 8001110:	46bd      	mov	sp, r7
 8001112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001116:	4770      	bx	lr
 8001118:	58000400 	.word	0x58000400

0800111c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800111c:	b480      	push	{r7}
 800111e:	b083      	sub	sp, #12
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
 8001124:	460b      	mov	r3, r1
 8001126:	807b      	strh	r3, [r7, #2]
 8001128:	4613      	mov	r3, r2
 800112a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800112c:	787b      	ldrb	r3, [r7, #1]
 800112e:	2b00      	cmp	r3, #0
 8001130:	d003      	beq.n	800113a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001132:	887a      	ldrh	r2, [r7, #2]
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8001138:	e003      	b.n	8001142 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800113a:	887b      	ldrh	r3, [r7, #2]
 800113c:	041a      	lsls	r2, r3, #16
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	619a      	str	r2, [r3, #24]
}
 8001142:	bf00      	nop
 8001144:	370c      	adds	r7, #12
 8001146:	46bd      	mov	sp, r7
 8001148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114c:	4770      	bx	lr
	...

08001150 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b084      	sub	sp, #16
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8001158:	4b29      	ldr	r3, [pc, #164]	; (8001200 <HAL_PWREx_ConfigSupply+0xb0>)
 800115a:	68db      	ldr	r3, [r3, #12]
 800115c:	f003 0307 	and.w	r3, r3, #7
 8001160:	2b06      	cmp	r3, #6
 8001162:	d00a      	beq.n	800117a <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8001164:	4b26      	ldr	r3, [pc, #152]	; (8001200 <HAL_PWREx_ConfigSupply+0xb0>)
 8001166:	68db      	ldr	r3, [r3, #12]
 8001168:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800116c:	687a      	ldr	r2, [r7, #4]
 800116e:	429a      	cmp	r2, r3
 8001170:	d001      	beq.n	8001176 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8001172:	2301      	movs	r3, #1
 8001174:	e040      	b.n	80011f8 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8001176:	2300      	movs	r3, #0
 8001178:	e03e      	b.n	80011f8 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800117a:	4b21      	ldr	r3, [pc, #132]	; (8001200 <HAL_PWREx_ConfigSupply+0xb0>)
 800117c:	68db      	ldr	r3, [r3, #12]
 800117e:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8001182:	491f      	ldr	r1, [pc, #124]	; (8001200 <HAL_PWREx_ConfigSupply+0xb0>)
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	4313      	orrs	r3, r2
 8001188:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800118a:	f7ff fd1b 	bl	8000bc4 <HAL_GetTick>
 800118e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001190:	e009      	b.n	80011a6 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001192:	f7ff fd17 	bl	8000bc4 <HAL_GetTick>
 8001196:	4602      	mov	r2, r0
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	1ad3      	subs	r3, r2, r3
 800119c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80011a0:	d901      	bls.n	80011a6 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80011a2:	2301      	movs	r3, #1
 80011a4:	e028      	b.n	80011f8 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80011a6:	4b16      	ldr	r3, [pc, #88]	; (8001200 <HAL_PWREx_ConfigSupply+0xb0>)
 80011a8:	685b      	ldr	r3, [r3, #4]
 80011aa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80011ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80011b2:	d1ee      	bne.n	8001192 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	2b1e      	cmp	r3, #30
 80011b8:	d008      	beq.n	80011cc <HAL_PWREx_ConfigSupply+0x7c>
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	2b2e      	cmp	r3, #46	; 0x2e
 80011be:	d005      	beq.n	80011cc <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	2b1d      	cmp	r3, #29
 80011c4:	d002      	beq.n	80011cc <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	2b2d      	cmp	r3, #45	; 0x2d
 80011ca:	d114      	bne.n	80011f6 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 80011cc:	f7ff fcfa 	bl	8000bc4 <HAL_GetTick>
 80011d0:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80011d2:	e009      	b.n	80011e8 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80011d4:	f7ff fcf6 	bl	8000bc4 <HAL_GetTick>
 80011d8:	4602      	mov	r2, r0
 80011da:	68fb      	ldr	r3, [r7, #12]
 80011dc:	1ad3      	subs	r3, r2, r3
 80011de:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80011e2:	d901      	bls.n	80011e8 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 80011e4:	2301      	movs	r3, #1
 80011e6:	e007      	b.n	80011f8 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80011e8:	4b05      	ldr	r3, [pc, #20]	; (8001200 <HAL_PWREx_ConfigSupply+0xb0>)
 80011ea:	68db      	ldr	r3, [r3, #12]
 80011ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80011f4:	d1ee      	bne.n	80011d4 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80011f6:	2300      	movs	r3, #0
}
 80011f8:	4618      	mov	r0, r3
 80011fa:	3710      	adds	r7, #16
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bd80      	pop	{r7, pc}
 8001200:	58024800 	.word	0x58024800

08001204 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b08c      	sub	sp, #48	; 0x30
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	2b00      	cmp	r3, #0
 8001210:	d102      	bne.n	8001218 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001212:	2301      	movs	r3, #1
 8001214:	f000 bc48 	b.w	8001aa8 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	f003 0301 	and.w	r3, r3, #1
 8001220:	2b00      	cmp	r3, #0
 8001222:	f000 8088 	beq.w	8001336 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001226:	4b99      	ldr	r3, [pc, #612]	; (800148c <HAL_RCC_OscConfig+0x288>)
 8001228:	691b      	ldr	r3, [r3, #16]
 800122a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800122e:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001230:	4b96      	ldr	r3, [pc, #600]	; (800148c <HAL_RCC_OscConfig+0x288>)
 8001232:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001234:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8001236:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001238:	2b10      	cmp	r3, #16
 800123a:	d007      	beq.n	800124c <HAL_RCC_OscConfig+0x48>
 800123c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800123e:	2b18      	cmp	r3, #24
 8001240:	d111      	bne.n	8001266 <HAL_RCC_OscConfig+0x62>
 8001242:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001244:	f003 0303 	and.w	r3, r3, #3
 8001248:	2b02      	cmp	r3, #2
 800124a:	d10c      	bne.n	8001266 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800124c:	4b8f      	ldr	r3, [pc, #572]	; (800148c <HAL_RCC_OscConfig+0x288>)
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001254:	2b00      	cmp	r3, #0
 8001256:	d06d      	beq.n	8001334 <HAL_RCC_OscConfig+0x130>
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	685b      	ldr	r3, [r3, #4]
 800125c:	2b00      	cmp	r3, #0
 800125e:	d169      	bne.n	8001334 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001260:	2301      	movs	r3, #1
 8001262:	f000 bc21 	b.w	8001aa8 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	685b      	ldr	r3, [r3, #4]
 800126a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800126e:	d106      	bne.n	800127e <HAL_RCC_OscConfig+0x7a>
 8001270:	4b86      	ldr	r3, [pc, #536]	; (800148c <HAL_RCC_OscConfig+0x288>)
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	4a85      	ldr	r2, [pc, #532]	; (800148c <HAL_RCC_OscConfig+0x288>)
 8001276:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800127a:	6013      	str	r3, [r2, #0]
 800127c:	e02e      	b.n	80012dc <HAL_RCC_OscConfig+0xd8>
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	685b      	ldr	r3, [r3, #4]
 8001282:	2b00      	cmp	r3, #0
 8001284:	d10c      	bne.n	80012a0 <HAL_RCC_OscConfig+0x9c>
 8001286:	4b81      	ldr	r3, [pc, #516]	; (800148c <HAL_RCC_OscConfig+0x288>)
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	4a80      	ldr	r2, [pc, #512]	; (800148c <HAL_RCC_OscConfig+0x288>)
 800128c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001290:	6013      	str	r3, [r2, #0]
 8001292:	4b7e      	ldr	r3, [pc, #504]	; (800148c <HAL_RCC_OscConfig+0x288>)
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	4a7d      	ldr	r2, [pc, #500]	; (800148c <HAL_RCC_OscConfig+0x288>)
 8001298:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800129c:	6013      	str	r3, [r2, #0]
 800129e:	e01d      	b.n	80012dc <HAL_RCC_OscConfig+0xd8>
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	685b      	ldr	r3, [r3, #4]
 80012a4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80012a8:	d10c      	bne.n	80012c4 <HAL_RCC_OscConfig+0xc0>
 80012aa:	4b78      	ldr	r3, [pc, #480]	; (800148c <HAL_RCC_OscConfig+0x288>)
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	4a77      	ldr	r2, [pc, #476]	; (800148c <HAL_RCC_OscConfig+0x288>)
 80012b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80012b4:	6013      	str	r3, [r2, #0]
 80012b6:	4b75      	ldr	r3, [pc, #468]	; (800148c <HAL_RCC_OscConfig+0x288>)
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	4a74      	ldr	r2, [pc, #464]	; (800148c <HAL_RCC_OscConfig+0x288>)
 80012bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012c0:	6013      	str	r3, [r2, #0]
 80012c2:	e00b      	b.n	80012dc <HAL_RCC_OscConfig+0xd8>
 80012c4:	4b71      	ldr	r3, [pc, #452]	; (800148c <HAL_RCC_OscConfig+0x288>)
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	4a70      	ldr	r2, [pc, #448]	; (800148c <HAL_RCC_OscConfig+0x288>)
 80012ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80012ce:	6013      	str	r3, [r2, #0]
 80012d0:	4b6e      	ldr	r3, [pc, #440]	; (800148c <HAL_RCC_OscConfig+0x288>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	4a6d      	ldr	r2, [pc, #436]	; (800148c <HAL_RCC_OscConfig+0x288>)
 80012d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80012da:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	685b      	ldr	r3, [r3, #4]
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d013      	beq.n	800130c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012e4:	f7ff fc6e 	bl	8000bc4 <HAL_GetTick>
 80012e8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80012ea:	e008      	b.n	80012fe <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80012ec:	f7ff fc6a 	bl	8000bc4 <HAL_GetTick>
 80012f0:	4602      	mov	r2, r0
 80012f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012f4:	1ad3      	subs	r3, r2, r3
 80012f6:	2b64      	cmp	r3, #100	; 0x64
 80012f8:	d901      	bls.n	80012fe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80012fa:	2303      	movs	r3, #3
 80012fc:	e3d4      	b.n	8001aa8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80012fe:	4b63      	ldr	r3, [pc, #396]	; (800148c <HAL_RCC_OscConfig+0x288>)
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001306:	2b00      	cmp	r3, #0
 8001308:	d0f0      	beq.n	80012ec <HAL_RCC_OscConfig+0xe8>
 800130a:	e014      	b.n	8001336 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800130c:	f7ff fc5a 	bl	8000bc4 <HAL_GetTick>
 8001310:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001312:	e008      	b.n	8001326 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001314:	f7ff fc56 	bl	8000bc4 <HAL_GetTick>
 8001318:	4602      	mov	r2, r0
 800131a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800131c:	1ad3      	subs	r3, r2, r3
 800131e:	2b64      	cmp	r3, #100	; 0x64
 8001320:	d901      	bls.n	8001326 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001322:	2303      	movs	r3, #3
 8001324:	e3c0      	b.n	8001aa8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001326:	4b59      	ldr	r3, [pc, #356]	; (800148c <HAL_RCC_OscConfig+0x288>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800132e:	2b00      	cmp	r3, #0
 8001330:	d1f0      	bne.n	8001314 <HAL_RCC_OscConfig+0x110>
 8001332:	e000      	b.n	8001336 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001334:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	f003 0302 	and.w	r3, r3, #2
 800133e:	2b00      	cmp	r3, #0
 8001340:	f000 80ca 	beq.w	80014d8 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001344:	4b51      	ldr	r3, [pc, #324]	; (800148c <HAL_RCC_OscConfig+0x288>)
 8001346:	691b      	ldr	r3, [r3, #16]
 8001348:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800134c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800134e:	4b4f      	ldr	r3, [pc, #316]	; (800148c <HAL_RCC_OscConfig+0x288>)
 8001350:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001352:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8001354:	6a3b      	ldr	r3, [r7, #32]
 8001356:	2b00      	cmp	r3, #0
 8001358:	d007      	beq.n	800136a <HAL_RCC_OscConfig+0x166>
 800135a:	6a3b      	ldr	r3, [r7, #32]
 800135c:	2b18      	cmp	r3, #24
 800135e:	d156      	bne.n	800140e <HAL_RCC_OscConfig+0x20a>
 8001360:	69fb      	ldr	r3, [r7, #28]
 8001362:	f003 0303 	and.w	r3, r3, #3
 8001366:	2b00      	cmp	r3, #0
 8001368:	d151      	bne.n	800140e <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800136a:	4b48      	ldr	r3, [pc, #288]	; (800148c <HAL_RCC_OscConfig+0x288>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	f003 0304 	and.w	r3, r3, #4
 8001372:	2b00      	cmp	r3, #0
 8001374:	d005      	beq.n	8001382 <HAL_RCC_OscConfig+0x17e>
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	68db      	ldr	r3, [r3, #12]
 800137a:	2b00      	cmp	r3, #0
 800137c:	d101      	bne.n	8001382 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800137e:	2301      	movs	r3, #1
 8001380:	e392      	b.n	8001aa8 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001382:	4b42      	ldr	r3, [pc, #264]	; (800148c <HAL_RCC_OscConfig+0x288>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	f023 0219 	bic.w	r2, r3, #25
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	68db      	ldr	r3, [r3, #12]
 800138e:	493f      	ldr	r1, [pc, #252]	; (800148c <HAL_RCC_OscConfig+0x288>)
 8001390:	4313      	orrs	r3, r2
 8001392:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001394:	f7ff fc16 	bl	8000bc4 <HAL_GetTick>
 8001398:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800139a:	e008      	b.n	80013ae <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800139c:	f7ff fc12 	bl	8000bc4 <HAL_GetTick>
 80013a0:	4602      	mov	r2, r0
 80013a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013a4:	1ad3      	subs	r3, r2, r3
 80013a6:	2b02      	cmp	r3, #2
 80013a8:	d901      	bls.n	80013ae <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80013aa:	2303      	movs	r3, #3
 80013ac:	e37c      	b.n	8001aa8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80013ae:	4b37      	ldr	r3, [pc, #220]	; (800148c <HAL_RCC_OscConfig+0x288>)
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	f003 0304 	and.w	r3, r3, #4
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d0f0      	beq.n	800139c <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013ba:	f7ff fc0f 	bl	8000bdc <HAL_GetREVID>
 80013be:	4603      	mov	r3, r0
 80013c0:	f241 0203 	movw	r2, #4099	; 0x1003
 80013c4:	4293      	cmp	r3, r2
 80013c6:	d817      	bhi.n	80013f8 <HAL_RCC_OscConfig+0x1f4>
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	691b      	ldr	r3, [r3, #16]
 80013cc:	2b40      	cmp	r3, #64	; 0x40
 80013ce:	d108      	bne.n	80013e2 <HAL_RCC_OscConfig+0x1de>
 80013d0:	4b2e      	ldr	r3, [pc, #184]	; (800148c <HAL_RCC_OscConfig+0x288>)
 80013d2:	685b      	ldr	r3, [r3, #4]
 80013d4:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80013d8:	4a2c      	ldr	r2, [pc, #176]	; (800148c <HAL_RCC_OscConfig+0x288>)
 80013da:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013de:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80013e0:	e07a      	b.n	80014d8 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013e2:	4b2a      	ldr	r3, [pc, #168]	; (800148c <HAL_RCC_OscConfig+0x288>)
 80013e4:	685b      	ldr	r3, [r3, #4]
 80013e6:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	691b      	ldr	r3, [r3, #16]
 80013ee:	031b      	lsls	r3, r3, #12
 80013f0:	4926      	ldr	r1, [pc, #152]	; (800148c <HAL_RCC_OscConfig+0x288>)
 80013f2:	4313      	orrs	r3, r2
 80013f4:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80013f6:	e06f      	b.n	80014d8 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013f8:	4b24      	ldr	r3, [pc, #144]	; (800148c <HAL_RCC_OscConfig+0x288>)
 80013fa:	685b      	ldr	r3, [r3, #4]
 80013fc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	691b      	ldr	r3, [r3, #16]
 8001404:	061b      	lsls	r3, r3, #24
 8001406:	4921      	ldr	r1, [pc, #132]	; (800148c <HAL_RCC_OscConfig+0x288>)
 8001408:	4313      	orrs	r3, r2
 800140a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800140c:	e064      	b.n	80014d8 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	68db      	ldr	r3, [r3, #12]
 8001412:	2b00      	cmp	r3, #0
 8001414:	d047      	beq.n	80014a6 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001416:	4b1d      	ldr	r3, [pc, #116]	; (800148c <HAL_RCC_OscConfig+0x288>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	f023 0219 	bic.w	r2, r3, #25
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	68db      	ldr	r3, [r3, #12]
 8001422:	491a      	ldr	r1, [pc, #104]	; (800148c <HAL_RCC_OscConfig+0x288>)
 8001424:	4313      	orrs	r3, r2
 8001426:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001428:	f7ff fbcc 	bl	8000bc4 <HAL_GetTick>
 800142c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800142e:	e008      	b.n	8001442 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001430:	f7ff fbc8 	bl	8000bc4 <HAL_GetTick>
 8001434:	4602      	mov	r2, r0
 8001436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001438:	1ad3      	subs	r3, r2, r3
 800143a:	2b02      	cmp	r3, #2
 800143c:	d901      	bls.n	8001442 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800143e:	2303      	movs	r3, #3
 8001440:	e332      	b.n	8001aa8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001442:	4b12      	ldr	r3, [pc, #72]	; (800148c <HAL_RCC_OscConfig+0x288>)
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	f003 0304 	and.w	r3, r3, #4
 800144a:	2b00      	cmp	r3, #0
 800144c:	d0f0      	beq.n	8001430 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800144e:	f7ff fbc5 	bl	8000bdc <HAL_GetREVID>
 8001452:	4603      	mov	r3, r0
 8001454:	f241 0203 	movw	r2, #4099	; 0x1003
 8001458:	4293      	cmp	r3, r2
 800145a:	d819      	bhi.n	8001490 <HAL_RCC_OscConfig+0x28c>
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	691b      	ldr	r3, [r3, #16]
 8001460:	2b40      	cmp	r3, #64	; 0x40
 8001462:	d108      	bne.n	8001476 <HAL_RCC_OscConfig+0x272>
 8001464:	4b09      	ldr	r3, [pc, #36]	; (800148c <HAL_RCC_OscConfig+0x288>)
 8001466:	685b      	ldr	r3, [r3, #4]
 8001468:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800146c:	4a07      	ldr	r2, [pc, #28]	; (800148c <HAL_RCC_OscConfig+0x288>)
 800146e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001472:	6053      	str	r3, [r2, #4]
 8001474:	e030      	b.n	80014d8 <HAL_RCC_OscConfig+0x2d4>
 8001476:	4b05      	ldr	r3, [pc, #20]	; (800148c <HAL_RCC_OscConfig+0x288>)
 8001478:	685b      	ldr	r3, [r3, #4]
 800147a:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	691b      	ldr	r3, [r3, #16]
 8001482:	031b      	lsls	r3, r3, #12
 8001484:	4901      	ldr	r1, [pc, #4]	; (800148c <HAL_RCC_OscConfig+0x288>)
 8001486:	4313      	orrs	r3, r2
 8001488:	604b      	str	r3, [r1, #4]
 800148a:	e025      	b.n	80014d8 <HAL_RCC_OscConfig+0x2d4>
 800148c:	58024400 	.word	0x58024400
 8001490:	4b9a      	ldr	r3, [pc, #616]	; (80016fc <HAL_RCC_OscConfig+0x4f8>)
 8001492:	685b      	ldr	r3, [r3, #4]
 8001494:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	691b      	ldr	r3, [r3, #16]
 800149c:	061b      	lsls	r3, r3, #24
 800149e:	4997      	ldr	r1, [pc, #604]	; (80016fc <HAL_RCC_OscConfig+0x4f8>)
 80014a0:	4313      	orrs	r3, r2
 80014a2:	604b      	str	r3, [r1, #4]
 80014a4:	e018      	b.n	80014d8 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80014a6:	4b95      	ldr	r3, [pc, #596]	; (80016fc <HAL_RCC_OscConfig+0x4f8>)
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	4a94      	ldr	r2, [pc, #592]	; (80016fc <HAL_RCC_OscConfig+0x4f8>)
 80014ac:	f023 0301 	bic.w	r3, r3, #1
 80014b0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014b2:	f7ff fb87 	bl	8000bc4 <HAL_GetTick>
 80014b6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80014b8:	e008      	b.n	80014cc <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80014ba:	f7ff fb83 	bl	8000bc4 <HAL_GetTick>
 80014be:	4602      	mov	r2, r0
 80014c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014c2:	1ad3      	subs	r3, r2, r3
 80014c4:	2b02      	cmp	r3, #2
 80014c6:	d901      	bls.n	80014cc <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80014c8:	2303      	movs	r3, #3
 80014ca:	e2ed      	b.n	8001aa8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80014cc:	4b8b      	ldr	r3, [pc, #556]	; (80016fc <HAL_RCC_OscConfig+0x4f8>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	f003 0304 	and.w	r3, r3, #4
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d1f0      	bne.n	80014ba <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	f003 0310 	and.w	r3, r3, #16
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	f000 80a9 	beq.w	8001638 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80014e6:	4b85      	ldr	r3, [pc, #532]	; (80016fc <HAL_RCC_OscConfig+0x4f8>)
 80014e8:	691b      	ldr	r3, [r3, #16]
 80014ea:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80014ee:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80014f0:	4b82      	ldr	r3, [pc, #520]	; (80016fc <HAL_RCC_OscConfig+0x4f8>)
 80014f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014f4:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80014f6:	69bb      	ldr	r3, [r7, #24]
 80014f8:	2b08      	cmp	r3, #8
 80014fa:	d007      	beq.n	800150c <HAL_RCC_OscConfig+0x308>
 80014fc:	69bb      	ldr	r3, [r7, #24]
 80014fe:	2b18      	cmp	r3, #24
 8001500:	d13a      	bne.n	8001578 <HAL_RCC_OscConfig+0x374>
 8001502:	697b      	ldr	r3, [r7, #20]
 8001504:	f003 0303 	and.w	r3, r3, #3
 8001508:	2b01      	cmp	r3, #1
 800150a:	d135      	bne.n	8001578 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800150c:	4b7b      	ldr	r3, [pc, #492]	; (80016fc <HAL_RCC_OscConfig+0x4f8>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001514:	2b00      	cmp	r3, #0
 8001516:	d005      	beq.n	8001524 <HAL_RCC_OscConfig+0x320>
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	69db      	ldr	r3, [r3, #28]
 800151c:	2b80      	cmp	r3, #128	; 0x80
 800151e:	d001      	beq.n	8001524 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8001520:	2301      	movs	r3, #1
 8001522:	e2c1      	b.n	8001aa8 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001524:	f7ff fb5a 	bl	8000bdc <HAL_GetREVID>
 8001528:	4603      	mov	r3, r0
 800152a:	f241 0203 	movw	r2, #4099	; 0x1003
 800152e:	4293      	cmp	r3, r2
 8001530:	d817      	bhi.n	8001562 <HAL_RCC_OscConfig+0x35e>
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	6a1b      	ldr	r3, [r3, #32]
 8001536:	2b20      	cmp	r3, #32
 8001538:	d108      	bne.n	800154c <HAL_RCC_OscConfig+0x348>
 800153a:	4b70      	ldr	r3, [pc, #448]	; (80016fc <HAL_RCC_OscConfig+0x4f8>)
 800153c:	685b      	ldr	r3, [r3, #4]
 800153e:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8001542:	4a6e      	ldr	r2, [pc, #440]	; (80016fc <HAL_RCC_OscConfig+0x4f8>)
 8001544:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001548:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800154a:	e075      	b.n	8001638 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800154c:	4b6b      	ldr	r3, [pc, #428]	; (80016fc <HAL_RCC_OscConfig+0x4f8>)
 800154e:	685b      	ldr	r3, [r3, #4]
 8001550:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	6a1b      	ldr	r3, [r3, #32]
 8001558:	069b      	lsls	r3, r3, #26
 800155a:	4968      	ldr	r1, [pc, #416]	; (80016fc <HAL_RCC_OscConfig+0x4f8>)
 800155c:	4313      	orrs	r3, r2
 800155e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001560:	e06a      	b.n	8001638 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001562:	4b66      	ldr	r3, [pc, #408]	; (80016fc <HAL_RCC_OscConfig+0x4f8>)
 8001564:	68db      	ldr	r3, [r3, #12]
 8001566:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	6a1b      	ldr	r3, [r3, #32]
 800156e:	061b      	lsls	r3, r3, #24
 8001570:	4962      	ldr	r1, [pc, #392]	; (80016fc <HAL_RCC_OscConfig+0x4f8>)
 8001572:	4313      	orrs	r3, r2
 8001574:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001576:	e05f      	b.n	8001638 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	69db      	ldr	r3, [r3, #28]
 800157c:	2b00      	cmp	r3, #0
 800157e:	d042      	beq.n	8001606 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8001580:	4b5e      	ldr	r3, [pc, #376]	; (80016fc <HAL_RCC_OscConfig+0x4f8>)
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	4a5d      	ldr	r2, [pc, #372]	; (80016fc <HAL_RCC_OscConfig+0x4f8>)
 8001586:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800158a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800158c:	f7ff fb1a 	bl	8000bc4 <HAL_GetTick>
 8001590:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001592:	e008      	b.n	80015a6 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8001594:	f7ff fb16 	bl	8000bc4 <HAL_GetTick>
 8001598:	4602      	mov	r2, r0
 800159a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800159c:	1ad3      	subs	r3, r2, r3
 800159e:	2b02      	cmp	r3, #2
 80015a0:	d901      	bls.n	80015a6 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80015a2:	2303      	movs	r3, #3
 80015a4:	e280      	b.n	8001aa8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80015a6:	4b55      	ldr	r3, [pc, #340]	; (80016fc <HAL_RCC_OscConfig+0x4f8>)
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d0f0      	beq.n	8001594 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80015b2:	f7ff fb13 	bl	8000bdc <HAL_GetREVID>
 80015b6:	4603      	mov	r3, r0
 80015b8:	f241 0203 	movw	r2, #4099	; 0x1003
 80015bc:	4293      	cmp	r3, r2
 80015be:	d817      	bhi.n	80015f0 <HAL_RCC_OscConfig+0x3ec>
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	6a1b      	ldr	r3, [r3, #32]
 80015c4:	2b20      	cmp	r3, #32
 80015c6:	d108      	bne.n	80015da <HAL_RCC_OscConfig+0x3d6>
 80015c8:	4b4c      	ldr	r3, [pc, #304]	; (80016fc <HAL_RCC_OscConfig+0x4f8>)
 80015ca:	685b      	ldr	r3, [r3, #4]
 80015cc:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80015d0:	4a4a      	ldr	r2, [pc, #296]	; (80016fc <HAL_RCC_OscConfig+0x4f8>)
 80015d2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80015d6:	6053      	str	r3, [r2, #4]
 80015d8:	e02e      	b.n	8001638 <HAL_RCC_OscConfig+0x434>
 80015da:	4b48      	ldr	r3, [pc, #288]	; (80016fc <HAL_RCC_OscConfig+0x4f8>)
 80015dc:	685b      	ldr	r3, [r3, #4]
 80015de:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	6a1b      	ldr	r3, [r3, #32]
 80015e6:	069b      	lsls	r3, r3, #26
 80015e8:	4944      	ldr	r1, [pc, #272]	; (80016fc <HAL_RCC_OscConfig+0x4f8>)
 80015ea:	4313      	orrs	r3, r2
 80015ec:	604b      	str	r3, [r1, #4]
 80015ee:	e023      	b.n	8001638 <HAL_RCC_OscConfig+0x434>
 80015f0:	4b42      	ldr	r3, [pc, #264]	; (80016fc <HAL_RCC_OscConfig+0x4f8>)
 80015f2:	68db      	ldr	r3, [r3, #12]
 80015f4:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	6a1b      	ldr	r3, [r3, #32]
 80015fc:	061b      	lsls	r3, r3, #24
 80015fe:	493f      	ldr	r1, [pc, #252]	; (80016fc <HAL_RCC_OscConfig+0x4f8>)
 8001600:	4313      	orrs	r3, r2
 8001602:	60cb      	str	r3, [r1, #12]
 8001604:	e018      	b.n	8001638 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8001606:	4b3d      	ldr	r3, [pc, #244]	; (80016fc <HAL_RCC_OscConfig+0x4f8>)
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	4a3c      	ldr	r2, [pc, #240]	; (80016fc <HAL_RCC_OscConfig+0x4f8>)
 800160c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001610:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001612:	f7ff fad7 	bl	8000bc4 <HAL_GetTick>
 8001616:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001618:	e008      	b.n	800162c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800161a:	f7ff fad3 	bl	8000bc4 <HAL_GetTick>
 800161e:	4602      	mov	r2, r0
 8001620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001622:	1ad3      	subs	r3, r2, r3
 8001624:	2b02      	cmp	r3, #2
 8001626:	d901      	bls.n	800162c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001628:	2303      	movs	r3, #3
 800162a:	e23d      	b.n	8001aa8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800162c:	4b33      	ldr	r3, [pc, #204]	; (80016fc <HAL_RCC_OscConfig+0x4f8>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001634:	2b00      	cmp	r3, #0
 8001636:	d1f0      	bne.n	800161a <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	f003 0308 	and.w	r3, r3, #8
 8001640:	2b00      	cmp	r3, #0
 8001642:	d036      	beq.n	80016b2 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	695b      	ldr	r3, [r3, #20]
 8001648:	2b00      	cmp	r3, #0
 800164a:	d019      	beq.n	8001680 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800164c:	4b2b      	ldr	r3, [pc, #172]	; (80016fc <HAL_RCC_OscConfig+0x4f8>)
 800164e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001650:	4a2a      	ldr	r2, [pc, #168]	; (80016fc <HAL_RCC_OscConfig+0x4f8>)
 8001652:	f043 0301 	orr.w	r3, r3, #1
 8001656:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001658:	f7ff fab4 	bl	8000bc4 <HAL_GetTick>
 800165c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800165e:	e008      	b.n	8001672 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001660:	f7ff fab0 	bl	8000bc4 <HAL_GetTick>
 8001664:	4602      	mov	r2, r0
 8001666:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001668:	1ad3      	subs	r3, r2, r3
 800166a:	2b02      	cmp	r3, #2
 800166c:	d901      	bls.n	8001672 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800166e:	2303      	movs	r3, #3
 8001670:	e21a      	b.n	8001aa8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001672:	4b22      	ldr	r3, [pc, #136]	; (80016fc <HAL_RCC_OscConfig+0x4f8>)
 8001674:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001676:	f003 0302 	and.w	r3, r3, #2
 800167a:	2b00      	cmp	r3, #0
 800167c:	d0f0      	beq.n	8001660 <HAL_RCC_OscConfig+0x45c>
 800167e:	e018      	b.n	80016b2 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001680:	4b1e      	ldr	r3, [pc, #120]	; (80016fc <HAL_RCC_OscConfig+0x4f8>)
 8001682:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001684:	4a1d      	ldr	r2, [pc, #116]	; (80016fc <HAL_RCC_OscConfig+0x4f8>)
 8001686:	f023 0301 	bic.w	r3, r3, #1
 800168a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800168c:	f7ff fa9a 	bl	8000bc4 <HAL_GetTick>
 8001690:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001692:	e008      	b.n	80016a6 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001694:	f7ff fa96 	bl	8000bc4 <HAL_GetTick>
 8001698:	4602      	mov	r2, r0
 800169a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800169c:	1ad3      	subs	r3, r2, r3
 800169e:	2b02      	cmp	r3, #2
 80016a0:	d901      	bls.n	80016a6 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 80016a2:	2303      	movs	r3, #3
 80016a4:	e200      	b.n	8001aa8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80016a6:	4b15      	ldr	r3, [pc, #84]	; (80016fc <HAL_RCC_OscConfig+0x4f8>)
 80016a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80016aa:	f003 0302 	and.w	r3, r3, #2
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d1f0      	bne.n	8001694 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	f003 0320 	and.w	r3, r3, #32
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d039      	beq.n	8001732 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	699b      	ldr	r3, [r3, #24]
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d01c      	beq.n	8001700 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80016c6:	4b0d      	ldr	r3, [pc, #52]	; (80016fc <HAL_RCC_OscConfig+0x4f8>)
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	4a0c      	ldr	r2, [pc, #48]	; (80016fc <HAL_RCC_OscConfig+0x4f8>)
 80016cc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80016d0:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80016d2:	f7ff fa77 	bl	8000bc4 <HAL_GetTick>
 80016d6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80016d8:	e008      	b.n	80016ec <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80016da:	f7ff fa73 	bl	8000bc4 <HAL_GetTick>
 80016de:	4602      	mov	r2, r0
 80016e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016e2:	1ad3      	subs	r3, r2, r3
 80016e4:	2b02      	cmp	r3, #2
 80016e6:	d901      	bls.n	80016ec <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80016e8:	2303      	movs	r3, #3
 80016ea:	e1dd      	b.n	8001aa8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80016ec:	4b03      	ldr	r3, [pc, #12]	; (80016fc <HAL_RCC_OscConfig+0x4f8>)
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d0f0      	beq.n	80016da <HAL_RCC_OscConfig+0x4d6>
 80016f8:	e01b      	b.n	8001732 <HAL_RCC_OscConfig+0x52e>
 80016fa:	bf00      	nop
 80016fc:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001700:	4b9b      	ldr	r3, [pc, #620]	; (8001970 <HAL_RCC_OscConfig+0x76c>)
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	4a9a      	ldr	r2, [pc, #616]	; (8001970 <HAL_RCC_OscConfig+0x76c>)
 8001706:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800170a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800170c:	f7ff fa5a 	bl	8000bc4 <HAL_GetTick>
 8001710:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001712:	e008      	b.n	8001726 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001714:	f7ff fa56 	bl	8000bc4 <HAL_GetTick>
 8001718:	4602      	mov	r2, r0
 800171a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800171c:	1ad3      	subs	r3, r2, r3
 800171e:	2b02      	cmp	r3, #2
 8001720:	d901      	bls.n	8001726 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8001722:	2303      	movs	r3, #3
 8001724:	e1c0      	b.n	8001aa8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001726:	4b92      	ldr	r3, [pc, #584]	; (8001970 <HAL_RCC_OscConfig+0x76c>)
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800172e:	2b00      	cmp	r3, #0
 8001730:	d1f0      	bne.n	8001714 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	f003 0304 	and.w	r3, r3, #4
 800173a:	2b00      	cmp	r3, #0
 800173c:	f000 8081 	beq.w	8001842 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001740:	4b8c      	ldr	r3, [pc, #560]	; (8001974 <HAL_RCC_OscConfig+0x770>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	4a8b      	ldr	r2, [pc, #556]	; (8001974 <HAL_RCC_OscConfig+0x770>)
 8001746:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800174a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800174c:	f7ff fa3a 	bl	8000bc4 <HAL_GetTick>
 8001750:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001752:	e008      	b.n	8001766 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001754:	f7ff fa36 	bl	8000bc4 <HAL_GetTick>
 8001758:	4602      	mov	r2, r0
 800175a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800175c:	1ad3      	subs	r3, r2, r3
 800175e:	2b64      	cmp	r3, #100	; 0x64
 8001760:	d901      	bls.n	8001766 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8001762:	2303      	movs	r3, #3
 8001764:	e1a0      	b.n	8001aa8 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001766:	4b83      	ldr	r3, [pc, #524]	; (8001974 <HAL_RCC_OscConfig+0x770>)
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800176e:	2b00      	cmp	r3, #0
 8001770:	d0f0      	beq.n	8001754 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	689b      	ldr	r3, [r3, #8]
 8001776:	2b01      	cmp	r3, #1
 8001778:	d106      	bne.n	8001788 <HAL_RCC_OscConfig+0x584>
 800177a:	4b7d      	ldr	r3, [pc, #500]	; (8001970 <HAL_RCC_OscConfig+0x76c>)
 800177c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800177e:	4a7c      	ldr	r2, [pc, #496]	; (8001970 <HAL_RCC_OscConfig+0x76c>)
 8001780:	f043 0301 	orr.w	r3, r3, #1
 8001784:	6713      	str	r3, [r2, #112]	; 0x70
 8001786:	e02d      	b.n	80017e4 <HAL_RCC_OscConfig+0x5e0>
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	689b      	ldr	r3, [r3, #8]
 800178c:	2b00      	cmp	r3, #0
 800178e:	d10c      	bne.n	80017aa <HAL_RCC_OscConfig+0x5a6>
 8001790:	4b77      	ldr	r3, [pc, #476]	; (8001970 <HAL_RCC_OscConfig+0x76c>)
 8001792:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001794:	4a76      	ldr	r2, [pc, #472]	; (8001970 <HAL_RCC_OscConfig+0x76c>)
 8001796:	f023 0301 	bic.w	r3, r3, #1
 800179a:	6713      	str	r3, [r2, #112]	; 0x70
 800179c:	4b74      	ldr	r3, [pc, #464]	; (8001970 <HAL_RCC_OscConfig+0x76c>)
 800179e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017a0:	4a73      	ldr	r2, [pc, #460]	; (8001970 <HAL_RCC_OscConfig+0x76c>)
 80017a2:	f023 0304 	bic.w	r3, r3, #4
 80017a6:	6713      	str	r3, [r2, #112]	; 0x70
 80017a8:	e01c      	b.n	80017e4 <HAL_RCC_OscConfig+0x5e0>
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	689b      	ldr	r3, [r3, #8]
 80017ae:	2b05      	cmp	r3, #5
 80017b0:	d10c      	bne.n	80017cc <HAL_RCC_OscConfig+0x5c8>
 80017b2:	4b6f      	ldr	r3, [pc, #444]	; (8001970 <HAL_RCC_OscConfig+0x76c>)
 80017b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017b6:	4a6e      	ldr	r2, [pc, #440]	; (8001970 <HAL_RCC_OscConfig+0x76c>)
 80017b8:	f043 0304 	orr.w	r3, r3, #4
 80017bc:	6713      	str	r3, [r2, #112]	; 0x70
 80017be:	4b6c      	ldr	r3, [pc, #432]	; (8001970 <HAL_RCC_OscConfig+0x76c>)
 80017c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017c2:	4a6b      	ldr	r2, [pc, #428]	; (8001970 <HAL_RCC_OscConfig+0x76c>)
 80017c4:	f043 0301 	orr.w	r3, r3, #1
 80017c8:	6713      	str	r3, [r2, #112]	; 0x70
 80017ca:	e00b      	b.n	80017e4 <HAL_RCC_OscConfig+0x5e0>
 80017cc:	4b68      	ldr	r3, [pc, #416]	; (8001970 <HAL_RCC_OscConfig+0x76c>)
 80017ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017d0:	4a67      	ldr	r2, [pc, #412]	; (8001970 <HAL_RCC_OscConfig+0x76c>)
 80017d2:	f023 0301 	bic.w	r3, r3, #1
 80017d6:	6713      	str	r3, [r2, #112]	; 0x70
 80017d8:	4b65      	ldr	r3, [pc, #404]	; (8001970 <HAL_RCC_OscConfig+0x76c>)
 80017da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017dc:	4a64      	ldr	r2, [pc, #400]	; (8001970 <HAL_RCC_OscConfig+0x76c>)
 80017de:	f023 0304 	bic.w	r3, r3, #4
 80017e2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	689b      	ldr	r3, [r3, #8]
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d015      	beq.n	8001818 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017ec:	f7ff f9ea 	bl	8000bc4 <HAL_GetTick>
 80017f0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80017f2:	e00a      	b.n	800180a <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017f4:	f7ff f9e6 	bl	8000bc4 <HAL_GetTick>
 80017f8:	4602      	mov	r2, r0
 80017fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017fc:	1ad3      	subs	r3, r2, r3
 80017fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8001802:	4293      	cmp	r3, r2
 8001804:	d901      	bls.n	800180a <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8001806:	2303      	movs	r3, #3
 8001808:	e14e      	b.n	8001aa8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800180a:	4b59      	ldr	r3, [pc, #356]	; (8001970 <HAL_RCC_OscConfig+0x76c>)
 800180c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800180e:	f003 0302 	and.w	r3, r3, #2
 8001812:	2b00      	cmp	r3, #0
 8001814:	d0ee      	beq.n	80017f4 <HAL_RCC_OscConfig+0x5f0>
 8001816:	e014      	b.n	8001842 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001818:	f7ff f9d4 	bl	8000bc4 <HAL_GetTick>
 800181c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800181e:	e00a      	b.n	8001836 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001820:	f7ff f9d0 	bl	8000bc4 <HAL_GetTick>
 8001824:	4602      	mov	r2, r0
 8001826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001828:	1ad3      	subs	r3, r2, r3
 800182a:	f241 3288 	movw	r2, #5000	; 0x1388
 800182e:	4293      	cmp	r3, r2
 8001830:	d901      	bls.n	8001836 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8001832:	2303      	movs	r3, #3
 8001834:	e138      	b.n	8001aa8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001836:	4b4e      	ldr	r3, [pc, #312]	; (8001970 <HAL_RCC_OscConfig+0x76c>)
 8001838:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800183a:	f003 0302 	and.w	r3, r3, #2
 800183e:	2b00      	cmp	r3, #0
 8001840:	d1ee      	bne.n	8001820 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001846:	2b00      	cmp	r3, #0
 8001848:	f000 812d 	beq.w	8001aa6 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800184c:	4b48      	ldr	r3, [pc, #288]	; (8001970 <HAL_RCC_OscConfig+0x76c>)
 800184e:	691b      	ldr	r3, [r3, #16]
 8001850:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001854:	2b18      	cmp	r3, #24
 8001856:	f000 80bd 	beq.w	80019d4 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800185e:	2b02      	cmp	r3, #2
 8001860:	f040 809e 	bne.w	80019a0 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001864:	4b42      	ldr	r3, [pc, #264]	; (8001970 <HAL_RCC_OscConfig+0x76c>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	4a41      	ldr	r2, [pc, #260]	; (8001970 <HAL_RCC_OscConfig+0x76c>)
 800186a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800186e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001870:	f7ff f9a8 	bl	8000bc4 <HAL_GetTick>
 8001874:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001876:	e008      	b.n	800188a <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001878:	f7ff f9a4 	bl	8000bc4 <HAL_GetTick>
 800187c:	4602      	mov	r2, r0
 800187e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001880:	1ad3      	subs	r3, r2, r3
 8001882:	2b02      	cmp	r3, #2
 8001884:	d901      	bls.n	800188a <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8001886:	2303      	movs	r3, #3
 8001888:	e10e      	b.n	8001aa8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800188a:	4b39      	ldr	r3, [pc, #228]	; (8001970 <HAL_RCC_OscConfig+0x76c>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001892:	2b00      	cmp	r3, #0
 8001894:	d1f0      	bne.n	8001878 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001896:	4b36      	ldr	r3, [pc, #216]	; (8001970 <HAL_RCC_OscConfig+0x76c>)
 8001898:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800189a:	4b37      	ldr	r3, [pc, #220]	; (8001978 <HAL_RCC_OscConfig+0x774>)
 800189c:	4013      	ands	r3, r2
 800189e:	687a      	ldr	r2, [r7, #4]
 80018a0:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80018a2:	687a      	ldr	r2, [r7, #4]
 80018a4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80018a6:	0112      	lsls	r2, r2, #4
 80018a8:	430a      	orrs	r2, r1
 80018aa:	4931      	ldr	r1, [pc, #196]	; (8001970 <HAL_RCC_OscConfig+0x76c>)
 80018ac:	4313      	orrs	r3, r2
 80018ae:	628b      	str	r3, [r1, #40]	; 0x28
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018b4:	3b01      	subs	r3, #1
 80018b6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018be:	3b01      	subs	r3, #1
 80018c0:	025b      	lsls	r3, r3, #9
 80018c2:	b29b      	uxth	r3, r3
 80018c4:	431a      	orrs	r2, r3
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018ca:	3b01      	subs	r3, #1
 80018cc:	041b      	lsls	r3, r3, #16
 80018ce:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80018d2:	431a      	orrs	r2, r3
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80018d8:	3b01      	subs	r3, #1
 80018da:	061b      	lsls	r3, r3, #24
 80018dc:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80018e0:	4923      	ldr	r1, [pc, #140]	; (8001970 <HAL_RCC_OscConfig+0x76c>)
 80018e2:	4313      	orrs	r3, r2
 80018e4:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80018e6:	4b22      	ldr	r3, [pc, #136]	; (8001970 <HAL_RCC_OscConfig+0x76c>)
 80018e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018ea:	4a21      	ldr	r2, [pc, #132]	; (8001970 <HAL_RCC_OscConfig+0x76c>)
 80018ec:	f023 0301 	bic.w	r3, r3, #1
 80018f0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80018f2:	4b1f      	ldr	r3, [pc, #124]	; (8001970 <HAL_RCC_OscConfig+0x76c>)
 80018f4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80018f6:	4b21      	ldr	r3, [pc, #132]	; (800197c <HAL_RCC_OscConfig+0x778>)
 80018f8:	4013      	ands	r3, r2
 80018fa:	687a      	ldr	r2, [r7, #4]
 80018fc:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80018fe:	00d2      	lsls	r2, r2, #3
 8001900:	491b      	ldr	r1, [pc, #108]	; (8001970 <HAL_RCC_OscConfig+0x76c>)
 8001902:	4313      	orrs	r3, r2
 8001904:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8001906:	4b1a      	ldr	r3, [pc, #104]	; (8001970 <HAL_RCC_OscConfig+0x76c>)
 8001908:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800190a:	f023 020c 	bic.w	r2, r3, #12
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001912:	4917      	ldr	r1, [pc, #92]	; (8001970 <HAL_RCC_OscConfig+0x76c>)
 8001914:	4313      	orrs	r3, r2
 8001916:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8001918:	4b15      	ldr	r3, [pc, #84]	; (8001970 <HAL_RCC_OscConfig+0x76c>)
 800191a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800191c:	f023 0202 	bic.w	r2, r3, #2
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001924:	4912      	ldr	r1, [pc, #72]	; (8001970 <HAL_RCC_OscConfig+0x76c>)
 8001926:	4313      	orrs	r3, r2
 8001928:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800192a:	4b11      	ldr	r3, [pc, #68]	; (8001970 <HAL_RCC_OscConfig+0x76c>)
 800192c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800192e:	4a10      	ldr	r2, [pc, #64]	; (8001970 <HAL_RCC_OscConfig+0x76c>)
 8001930:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001934:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001936:	4b0e      	ldr	r3, [pc, #56]	; (8001970 <HAL_RCC_OscConfig+0x76c>)
 8001938:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800193a:	4a0d      	ldr	r2, [pc, #52]	; (8001970 <HAL_RCC_OscConfig+0x76c>)
 800193c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001940:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8001942:	4b0b      	ldr	r3, [pc, #44]	; (8001970 <HAL_RCC_OscConfig+0x76c>)
 8001944:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001946:	4a0a      	ldr	r2, [pc, #40]	; (8001970 <HAL_RCC_OscConfig+0x76c>)
 8001948:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800194c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800194e:	4b08      	ldr	r3, [pc, #32]	; (8001970 <HAL_RCC_OscConfig+0x76c>)
 8001950:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001952:	4a07      	ldr	r2, [pc, #28]	; (8001970 <HAL_RCC_OscConfig+0x76c>)
 8001954:	f043 0301 	orr.w	r3, r3, #1
 8001958:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800195a:	4b05      	ldr	r3, [pc, #20]	; (8001970 <HAL_RCC_OscConfig+0x76c>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	4a04      	ldr	r2, [pc, #16]	; (8001970 <HAL_RCC_OscConfig+0x76c>)
 8001960:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001964:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001966:	f7ff f92d 	bl	8000bc4 <HAL_GetTick>
 800196a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800196c:	e011      	b.n	8001992 <HAL_RCC_OscConfig+0x78e>
 800196e:	bf00      	nop
 8001970:	58024400 	.word	0x58024400
 8001974:	58024800 	.word	0x58024800
 8001978:	fffffc0c 	.word	0xfffffc0c
 800197c:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001980:	f7ff f920 	bl	8000bc4 <HAL_GetTick>
 8001984:	4602      	mov	r2, r0
 8001986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001988:	1ad3      	subs	r3, r2, r3
 800198a:	2b02      	cmp	r3, #2
 800198c:	d901      	bls.n	8001992 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800198e:	2303      	movs	r3, #3
 8001990:	e08a      	b.n	8001aa8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001992:	4b47      	ldr	r3, [pc, #284]	; (8001ab0 <HAL_RCC_OscConfig+0x8ac>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800199a:	2b00      	cmp	r3, #0
 800199c:	d0f0      	beq.n	8001980 <HAL_RCC_OscConfig+0x77c>
 800199e:	e082      	b.n	8001aa6 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019a0:	4b43      	ldr	r3, [pc, #268]	; (8001ab0 <HAL_RCC_OscConfig+0x8ac>)
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	4a42      	ldr	r2, [pc, #264]	; (8001ab0 <HAL_RCC_OscConfig+0x8ac>)
 80019a6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80019aa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019ac:	f7ff f90a 	bl	8000bc4 <HAL_GetTick>
 80019b0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80019b2:	e008      	b.n	80019c6 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019b4:	f7ff f906 	bl	8000bc4 <HAL_GetTick>
 80019b8:	4602      	mov	r2, r0
 80019ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019bc:	1ad3      	subs	r3, r2, r3
 80019be:	2b02      	cmp	r3, #2
 80019c0:	d901      	bls.n	80019c6 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 80019c2:	2303      	movs	r3, #3
 80019c4:	e070      	b.n	8001aa8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80019c6:	4b3a      	ldr	r3, [pc, #232]	; (8001ab0 <HAL_RCC_OscConfig+0x8ac>)
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d1f0      	bne.n	80019b4 <HAL_RCC_OscConfig+0x7b0>
 80019d2:	e068      	b.n	8001aa6 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80019d4:	4b36      	ldr	r3, [pc, #216]	; (8001ab0 <HAL_RCC_OscConfig+0x8ac>)
 80019d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019d8:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80019da:	4b35      	ldr	r3, [pc, #212]	; (8001ab0 <HAL_RCC_OscConfig+0x8ac>)
 80019dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019de:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019e4:	2b01      	cmp	r3, #1
 80019e6:	d031      	beq.n	8001a4c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019e8:	693b      	ldr	r3, [r7, #16]
 80019ea:	f003 0203 	and.w	r2, r3, #3
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80019f2:	429a      	cmp	r2, r3
 80019f4:	d12a      	bne.n	8001a4c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80019f6:	693b      	ldr	r3, [r7, #16]
 80019f8:	091b      	lsrs	r3, r3, #4
 80019fa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a02:	429a      	cmp	r2, r3
 8001a04:	d122      	bne.n	8001a4c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a10:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001a12:	429a      	cmp	r2, r3
 8001a14:	d11a      	bne.n	8001a4c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	0a5b      	lsrs	r3, r3, #9
 8001a1a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a22:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001a24:	429a      	cmp	r2, r3
 8001a26:	d111      	bne.n	8001a4c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	0c1b      	lsrs	r3, r3, #16
 8001a2c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a34:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001a36:	429a      	cmp	r2, r3
 8001a38:	d108      	bne.n	8001a4c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	0e1b      	lsrs	r3, r3, #24
 8001a3e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a46:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001a48:	429a      	cmp	r2, r3
 8001a4a:	d001      	beq.n	8001a50 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8001a4c:	2301      	movs	r3, #1
 8001a4e:	e02b      	b.n	8001aa8 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8001a50:	4b17      	ldr	r3, [pc, #92]	; (8001ab0 <HAL_RCC_OscConfig+0x8ac>)
 8001a52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a54:	08db      	lsrs	r3, r3, #3
 8001a56:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8001a5a:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a60:	693a      	ldr	r2, [r7, #16]
 8001a62:	429a      	cmp	r2, r3
 8001a64:	d01f      	beq.n	8001aa6 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8001a66:	4b12      	ldr	r3, [pc, #72]	; (8001ab0 <HAL_RCC_OscConfig+0x8ac>)
 8001a68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a6a:	4a11      	ldr	r2, [pc, #68]	; (8001ab0 <HAL_RCC_OscConfig+0x8ac>)
 8001a6c:	f023 0301 	bic.w	r3, r3, #1
 8001a70:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001a72:	f7ff f8a7 	bl	8000bc4 <HAL_GetTick>
 8001a76:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8001a78:	bf00      	nop
 8001a7a:	f7ff f8a3 	bl	8000bc4 <HAL_GetTick>
 8001a7e:	4602      	mov	r2, r0
 8001a80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a82:	4293      	cmp	r3, r2
 8001a84:	d0f9      	beq.n	8001a7a <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001a86:	4b0a      	ldr	r3, [pc, #40]	; (8001ab0 <HAL_RCC_OscConfig+0x8ac>)
 8001a88:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001a8a:	4b0a      	ldr	r3, [pc, #40]	; (8001ab4 <HAL_RCC_OscConfig+0x8b0>)
 8001a8c:	4013      	ands	r3, r2
 8001a8e:	687a      	ldr	r2, [r7, #4]
 8001a90:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001a92:	00d2      	lsls	r2, r2, #3
 8001a94:	4906      	ldr	r1, [pc, #24]	; (8001ab0 <HAL_RCC_OscConfig+0x8ac>)
 8001a96:	4313      	orrs	r3, r2
 8001a98:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8001a9a:	4b05      	ldr	r3, [pc, #20]	; (8001ab0 <HAL_RCC_OscConfig+0x8ac>)
 8001a9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a9e:	4a04      	ldr	r2, [pc, #16]	; (8001ab0 <HAL_RCC_OscConfig+0x8ac>)
 8001aa0:	f043 0301 	orr.w	r3, r3, #1
 8001aa4:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8001aa6:	2300      	movs	r3, #0
}
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	3730      	adds	r7, #48	; 0x30
 8001aac:	46bd      	mov	sp, r7
 8001aae:	bd80      	pop	{r7, pc}
 8001ab0:	58024400 	.word	0x58024400
 8001ab4:	ffff0007 	.word	0xffff0007

08001ab8 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b086      	sub	sp, #24
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
 8001ac0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d101      	bne.n	8001acc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ac8:	2301      	movs	r3, #1
 8001aca:	e19c      	b.n	8001e06 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001acc:	4b8a      	ldr	r3, [pc, #552]	; (8001cf8 <HAL_RCC_ClockConfig+0x240>)
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	f003 030f 	and.w	r3, r3, #15
 8001ad4:	683a      	ldr	r2, [r7, #0]
 8001ad6:	429a      	cmp	r2, r3
 8001ad8:	d910      	bls.n	8001afc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ada:	4b87      	ldr	r3, [pc, #540]	; (8001cf8 <HAL_RCC_ClockConfig+0x240>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f023 020f 	bic.w	r2, r3, #15
 8001ae2:	4985      	ldr	r1, [pc, #532]	; (8001cf8 <HAL_RCC_ClockConfig+0x240>)
 8001ae4:	683b      	ldr	r3, [r7, #0]
 8001ae6:	4313      	orrs	r3, r2
 8001ae8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001aea:	4b83      	ldr	r3, [pc, #524]	; (8001cf8 <HAL_RCC_ClockConfig+0x240>)
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f003 030f 	and.w	r3, r3, #15
 8001af2:	683a      	ldr	r2, [r7, #0]
 8001af4:	429a      	cmp	r2, r3
 8001af6:	d001      	beq.n	8001afc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001af8:	2301      	movs	r3, #1
 8001afa:	e184      	b.n	8001e06 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	f003 0304 	and.w	r3, r3, #4
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d010      	beq.n	8001b2a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	691a      	ldr	r2, [r3, #16]
 8001b0c:	4b7b      	ldr	r3, [pc, #492]	; (8001cfc <HAL_RCC_ClockConfig+0x244>)
 8001b0e:	699b      	ldr	r3, [r3, #24]
 8001b10:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001b14:	429a      	cmp	r2, r3
 8001b16:	d908      	bls.n	8001b2a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001b18:	4b78      	ldr	r3, [pc, #480]	; (8001cfc <HAL_RCC_ClockConfig+0x244>)
 8001b1a:	699b      	ldr	r3, [r3, #24]
 8001b1c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	691b      	ldr	r3, [r3, #16]
 8001b24:	4975      	ldr	r1, [pc, #468]	; (8001cfc <HAL_RCC_ClockConfig+0x244>)
 8001b26:	4313      	orrs	r3, r2
 8001b28:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f003 0308 	and.w	r3, r3, #8
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d010      	beq.n	8001b58 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	695a      	ldr	r2, [r3, #20]
 8001b3a:	4b70      	ldr	r3, [pc, #448]	; (8001cfc <HAL_RCC_ClockConfig+0x244>)
 8001b3c:	69db      	ldr	r3, [r3, #28]
 8001b3e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001b42:	429a      	cmp	r2, r3
 8001b44:	d908      	bls.n	8001b58 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001b46:	4b6d      	ldr	r3, [pc, #436]	; (8001cfc <HAL_RCC_ClockConfig+0x244>)
 8001b48:	69db      	ldr	r3, [r3, #28]
 8001b4a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	695b      	ldr	r3, [r3, #20]
 8001b52:	496a      	ldr	r1, [pc, #424]	; (8001cfc <HAL_RCC_ClockConfig+0x244>)
 8001b54:	4313      	orrs	r3, r2
 8001b56:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	f003 0310 	and.w	r3, r3, #16
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d010      	beq.n	8001b86 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	699a      	ldr	r2, [r3, #24]
 8001b68:	4b64      	ldr	r3, [pc, #400]	; (8001cfc <HAL_RCC_ClockConfig+0x244>)
 8001b6a:	69db      	ldr	r3, [r3, #28]
 8001b6c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001b70:	429a      	cmp	r2, r3
 8001b72:	d908      	bls.n	8001b86 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001b74:	4b61      	ldr	r3, [pc, #388]	; (8001cfc <HAL_RCC_ClockConfig+0x244>)
 8001b76:	69db      	ldr	r3, [r3, #28]
 8001b78:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	699b      	ldr	r3, [r3, #24]
 8001b80:	495e      	ldr	r1, [pc, #376]	; (8001cfc <HAL_RCC_ClockConfig+0x244>)
 8001b82:	4313      	orrs	r3, r2
 8001b84:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f003 0320 	and.w	r3, r3, #32
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d010      	beq.n	8001bb4 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	69da      	ldr	r2, [r3, #28]
 8001b96:	4b59      	ldr	r3, [pc, #356]	; (8001cfc <HAL_RCC_ClockConfig+0x244>)
 8001b98:	6a1b      	ldr	r3, [r3, #32]
 8001b9a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001b9e:	429a      	cmp	r2, r3
 8001ba0:	d908      	bls.n	8001bb4 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8001ba2:	4b56      	ldr	r3, [pc, #344]	; (8001cfc <HAL_RCC_ClockConfig+0x244>)
 8001ba4:	6a1b      	ldr	r3, [r3, #32]
 8001ba6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	69db      	ldr	r3, [r3, #28]
 8001bae:	4953      	ldr	r1, [pc, #332]	; (8001cfc <HAL_RCC_ClockConfig+0x244>)
 8001bb0:	4313      	orrs	r3, r2
 8001bb2:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	f003 0302 	and.w	r3, r3, #2
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d010      	beq.n	8001be2 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	68da      	ldr	r2, [r3, #12]
 8001bc4:	4b4d      	ldr	r3, [pc, #308]	; (8001cfc <HAL_RCC_ClockConfig+0x244>)
 8001bc6:	699b      	ldr	r3, [r3, #24]
 8001bc8:	f003 030f 	and.w	r3, r3, #15
 8001bcc:	429a      	cmp	r2, r3
 8001bce:	d908      	bls.n	8001be2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001bd0:	4b4a      	ldr	r3, [pc, #296]	; (8001cfc <HAL_RCC_ClockConfig+0x244>)
 8001bd2:	699b      	ldr	r3, [r3, #24]
 8001bd4:	f023 020f 	bic.w	r2, r3, #15
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	68db      	ldr	r3, [r3, #12]
 8001bdc:	4947      	ldr	r1, [pc, #284]	; (8001cfc <HAL_RCC_ClockConfig+0x244>)
 8001bde:	4313      	orrs	r3, r2
 8001be0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f003 0301 	and.w	r3, r3, #1
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d055      	beq.n	8001c9a <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8001bee:	4b43      	ldr	r3, [pc, #268]	; (8001cfc <HAL_RCC_ClockConfig+0x244>)
 8001bf0:	699b      	ldr	r3, [r3, #24]
 8001bf2:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	689b      	ldr	r3, [r3, #8]
 8001bfa:	4940      	ldr	r1, [pc, #256]	; (8001cfc <HAL_RCC_ClockConfig+0x244>)
 8001bfc:	4313      	orrs	r3, r2
 8001bfe:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	685b      	ldr	r3, [r3, #4]
 8001c04:	2b02      	cmp	r3, #2
 8001c06:	d107      	bne.n	8001c18 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001c08:	4b3c      	ldr	r3, [pc, #240]	; (8001cfc <HAL_RCC_ClockConfig+0x244>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d121      	bne.n	8001c58 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001c14:	2301      	movs	r3, #1
 8001c16:	e0f6      	b.n	8001e06 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	685b      	ldr	r3, [r3, #4]
 8001c1c:	2b03      	cmp	r3, #3
 8001c1e:	d107      	bne.n	8001c30 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001c20:	4b36      	ldr	r3, [pc, #216]	; (8001cfc <HAL_RCC_ClockConfig+0x244>)
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d115      	bne.n	8001c58 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001c2c:	2301      	movs	r3, #1
 8001c2e:	e0ea      	b.n	8001e06 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	685b      	ldr	r3, [r3, #4]
 8001c34:	2b01      	cmp	r3, #1
 8001c36:	d107      	bne.n	8001c48 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001c38:	4b30      	ldr	r3, [pc, #192]	; (8001cfc <HAL_RCC_ClockConfig+0x244>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d109      	bne.n	8001c58 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001c44:	2301      	movs	r3, #1
 8001c46:	e0de      	b.n	8001e06 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001c48:	4b2c      	ldr	r3, [pc, #176]	; (8001cfc <HAL_RCC_ClockConfig+0x244>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f003 0304 	and.w	r3, r3, #4
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d101      	bne.n	8001c58 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001c54:	2301      	movs	r3, #1
 8001c56:	e0d6      	b.n	8001e06 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001c58:	4b28      	ldr	r3, [pc, #160]	; (8001cfc <HAL_RCC_ClockConfig+0x244>)
 8001c5a:	691b      	ldr	r3, [r3, #16]
 8001c5c:	f023 0207 	bic.w	r2, r3, #7
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	685b      	ldr	r3, [r3, #4]
 8001c64:	4925      	ldr	r1, [pc, #148]	; (8001cfc <HAL_RCC_ClockConfig+0x244>)
 8001c66:	4313      	orrs	r3, r2
 8001c68:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001c6a:	f7fe ffab 	bl	8000bc4 <HAL_GetTick>
 8001c6e:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c70:	e00a      	b.n	8001c88 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c72:	f7fe ffa7 	bl	8000bc4 <HAL_GetTick>
 8001c76:	4602      	mov	r2, r0
 8001c78:	697b      	ldr	r3, [r7, #20]
 8001c7a:	1ad3      	subs	r3, r2, r3
 8001c7c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c80:	4293      	cmp	r3, r2
 8001c82:	d901      	bls.n	8001c88 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8001c84:	2303      	movs	r3, #3
 8001c86:	e0be      	b.n	8001e06 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c88:	4b1c      	ldr	r3, [pc, #112]	; (8001cfc <HAL_RCC_ClockConfig+0x244>)
 8001c8a:	691b      	ldr	r3, [r3, #16]
 8001c8c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	685b      	ldr	r3, [r3, #4]
 8001c94:	00db      	lsls	r3, r3, #3
 8001c96:	429a      	cmp	r2, r3
 8001c98:	d1eb      	bne.n	8001c72 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f003 0302 	and.w	r3, r3, #2
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d010      	beq.n	8001cc8 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	68da      	ldr	r2, [r3, #12]
 8001caa:	4b14      	ldr	r3, [pc, #80]	; (8001cfc <HAL_RCC_ClockConfig+0x244>)
 8001cac:	699b      	ldr	r3, [r3, #24]
 8001cae:	f003 030f 	and.w	r3, r3, #15
 8001cb2:	429a      	cmp	r2, r3
 8001cb4:	d208      	bcs.n	8001cc8 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001cb6:	4b11      	ldr	r3, [pc, #68]	; (8001cfc <HAL_RCC_ClockConfig+0x244>)
 8001cb8:	699b      	ldr	r3, [r3, #24]
 8001cba:	f023 020f 	bic.w	r2, r3, #15
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	68db      	ldr	r3, [r3, #12]
 8001cc2:	490e      	ldr	r1, [pc, #56]	; (8001cfc <HAL_RCC_ClockConfig+0x244>)
 8001cc4:	4313      	orrs	r3, r2
 8001cc6:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001cc8:	4b0b      	ldr	r3, [pc, #44]	; (8001cf8 <HAL_RCC_ClockConfig+0x240>)
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f003 030f 	and.w	r3, r3, #15
 8001cd0:	683a      	ldr	r2, [r7, #0]
 8001cd2:	429a      	cmp	r2, r3
 8001cd4:	d214      	bcs.n	8001d00 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cd6:	4b08      	ldr	r3, [pc, #32]	; (8001cf8 <HAL_RCC_ClockConfig+0x240>)
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f023 020f 	bic.w	r2, r3, #15
 8001cde:	4906      	ldr	r1, [pc, #24]	; (8001cf8 <HAL_RCC_ClockConfig+0x240>)
 8001ce0:	683b      	ldr	r3, [r7, #0]
 8001ce2:	4313      	orrs	r3, r2
 8001ce4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ce6:	4b04      	ldr	r3, [pc, #16]	; (8001cf8 <HAL_RCC_ClockConfig+0x240>)
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f003 030f 	and.w	r3, r3, #15
 8001cee:	683a      	ldr	r2, [r7, #0]
 8001cf0:	429a      	cmp	r2, r3
 8001cf2:	d005      	beq.n	8001d00 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8001cf4:	2301      	movs	r3, #1
 8001cf6:	e086      	b.n	8001e06 <HAL_RCC_ClockConfig+0x34e>
 8001cf8:	52002000 	.word	0x52002000
 8001cfc:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	f003 0304 	and.w	r3, r3, #4
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d010      	beq.n	8001d2e <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	691a      	ldr	r2, [r3, #16]
 8001d10:	4b3f      	ldr	r3, [pc, #252]	; (8001e10 <HAL_RCC_ClockConfig+0x358>)
 8001d12:	699b      	ldr	r3, [r3, #24]
 8001d14:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001d18:	429a      	cmp	r2, r3
 8001d1a:	d208      	bcs.n	8001d2e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001d1c:	4b3c      	ldr	r3, [pc, #240]	; (8001e10 <HAL_RCC_ClockConfig+0x358>)
 8001d1e:	699b      	ldr	r3, [r3, #24]
 8001d20:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	691b      	ldr	r3, [r3, #16]
 8001d28:	4939      	ldr	r1, [pc, #228]	; (8001e10 <HAL_RCC_ClockConfig+0x358>)
 8001d2a:	4313      	orrs	r3, r2
 8001d2c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f003 0308 	and.w	r3, r3, #8
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d010      	beq.n	8001d5c <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	695a      	ldr	r2, [r3, #20]
 8001d3e:	4b34      	ldr	r3, [pc, #208]	; (8001e10 <HAL_RCC_ClockConfig+0x358>)
 8001d40:	69db      	ldr	r3, [r3, #28]
 8001d42:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001d46:	429a      	cmp	r2, r3
 8001d48:	d208      	bcs.n	8001d5c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001d4a:	4b31      	ldr	r3, [pc, #196]	; (8001e10 <HAL_RCC_ClockConfig+0x358>)
 8001d4c:	69db      	ldr	r3, [r3, #28]
 8001d4e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	695b      	ldr	r3, [r3, #20]
 8001d56:	492e      	ldr	r1, [pc, #184]	; (8001e10 <HAL_RCC_ClockConfig+0x358>)
 8001d58:	4313      	orrs	r3, r2
 8001d5a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f003 0310 	and.w	r3, r3, #16
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d010      	beq.n	8001d8a <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	699a      	ldr	r2, [r3, #24]
 8001d6c:	4b28      	ldr	r3, [pc, #160]	; (8001e10 <HAL_RCC_ClockConfig+0x358>)
 8001d6e:	69db      	ldr	r3, [r3, #28]
 8001d70:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001d74:	429a      	cmp	r2, r3
 8001d76:	d208      	bcs.n	8001d8a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001d78:	4b25      	ldr	r3, [pc, #148]	; (8001e10 <HAL_RCC_ClockConfig+0x358>)
 8001d7a:	69db      	ldr	r3, [r3, #28]
 8001d7c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	699b      	ldr	r3, [r3, #24]
 8001d84:	4922      	ldr	r1, [pc, #136]	; (8001e10 <HAL_RCC_ClockConfig+0x358>)
 8001d86:	4313      	orrs	r3, r2
 8001d88:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f003 0320 	and.w	r3, r3, #32
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d010      	beq.n	8001db8 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	69da      	ldr	r2, [r3, #28]
 8001d9a:	4b1d      	ldr	r3, [pc, #116]	; (8001e10 <HAL_RCC_ClockConfig+0x358>)
 8001d9c:	6a1b      	ldr	r3, [r3, #32]
 8001d9e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001da2:	429a      	cmp	r2, r3
 8001da4:	d208      	bcs.n	8001db8 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8001da6:	4b1a      	ldr	r3, [pc, #104]	; (8001e10 <HAL_RCC_ClockConfig+0x358>)
 8001da8:	6a1b      	ldr	r3, [r3, #32]
 8001daa:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	69db      	ldr	r3, [r3, #28]
 8001db2:	4917      	ldr	r1, [pc, #92]	; (8001e10 <HAL_RCC_ClockConfig+0x358>)
 8001db4:	4313      	orrs	r3, r2
 8001db6:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001db8:	f000 f834 	bl	8001e24 <HAL_RCC_GetSysClockFreq>
 8001dbc:	4602      	mov	r2, r0
 8001dbe:	4b14      	ldr	r3, [pc, #80]	; (8001e10 <HAL_RCC_ClockConfig+0x358>)
 8001dc0:	699b      	ldr	r3, [r3, #24]
 8001dc2:	0a1b      	lsrs	r3, r3, #8
 8001dc4:	f003 030f 	and.w	r3, r3, #15
 8001dc8:	4912      	ldr	r1, [pc, #72]	; (8001e14 <HAL_RCC_ClockConfig+0x35c>)
 8001dca:	5ccb      	ldrb	r3, [r1, r3]
 8001dcc:	f003 031f 	and.w	r3, r3, #31
 8001dd0:	fa22 f303 	lsr.w	r3, r2, r3
 8001dd4:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001dd6:	4b0e      	ldr	r3, [pc, #56]	; (8001e10 <HAL_RCC_ClockConfig+0x358>)
 8001dd8:	699b      	ldr	r3, [r3, #24]
 8001dda:	f003 030f 	and.w	r3, r3, #15
 8001dde:	4a0d      	ldr	r2, [pc, #52]	; (8001e14 <HAL_RCC_ClockConfig+0x35c>)
 8001de0:	5cd3      	ldrb	r3, [r2, r3]
 8001de2:	f003 031f 	and.w	r3, r3, #31
 8001de6:	693a      	ldr	r2, [r7, #16]
 8001de8:	fa22 f303 	lsr.w	r3, r2, r3
 8001dec:	4a0a      	ldr	r2, [pc, #40]	; (8001e18 <HAL_RCC_ClockConfig+0x360>)
 8001dee:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001df0:	4a0a      	ldr	r2, [pc, #40]	; (8001e1c <HAL_RCC_ClockConfig+0x364>)
 8001df2:	693b      	ldr	r3, [r7, #16]
 8001df4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8001df6:	4b0a      	ldr	r3, [pc, #40]	; (8001e20 <HAL_RCC_ClockConfig+0x368>)
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	f7fe fe98 	bl	8000b30 <HAL_InitTick>
 8001e00:	4603      	mov	r3, r0
 8001e02:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8001e04:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e06:	4618      	mov	r0, r3
 8001e08:	3718      	adds	r7, #24
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	bd80      	pop	{r7, pc}
 8001e0e:	bf00      	nop
 8001e10:	58024400 	.word	0x58024400
 8001e14:	08003e34 	.word	0x08003e34
 8001e18:	24000004 	.word	0x24000004
 8001e1c:	24000000 	.word	0x24000000
 8001e20:	24000008 	.word	0x24000008

08001e24 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e24:	b480      	push	{r7}
 8001e26:	b089      	sub	sp, #36	; 0x24
 8001e28:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001e2a:	4bb3      	ldr	r3, [pc, #716]	; (80020f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001e2c:	691b      	ldr	r3, [r3, #16]
 8001e2e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001e32:	2b18      	cmp	r3, #24
 8001e34:	f200 8155 	bhi.w	80020e2 <HAL_RCC_GetSysClockFreq+0x2be>
 8001e38:	a201      	add	r2, pc, #4	; (adr r2, 8001e40 <HAL_RCC_GetSysClockFreq+0x1c>)
 8001e3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e3e:	bf00      	nop
 8001e40:	08001ea5 	.word	0x08001ea5
 8001e44:	080020e3 	.word	0x080020e3
 8001e48:	080020e3 	.word	0x080020e3
 8001e4c:	080020e3 	.word	0x080020e3
 8001e50:	080020e3 	.word	0x080020e3
 8001e54:	080020e3 	.word	0x080020e3
 8001e58:	080020e3 	.word	0x080020e3
 8001e5c:	080020e3 	.word	0x080020e3
 8001e60:	08001ecb 	.word	0x08001ecb
 8001e64:	080020e3 	.word	0x080020e3
 8001e68:	080020e3 	.word	0x080020e3
 8001e6c:	080020e3 	.word	0x080020e3
 8001e70:	080020e3 	.word	0x080020e3
 8001e74:	080020e3 	.word	0x080020e3
 8001e78:	080020e3 	.word	0x080020e3
 8001e7c:	080020e3 	.word	0x080020e3
 8001e80:	08001ed1 	.word	0x08001ed1
 8001e84:	080020e3 	.word	0x080020e3
 8001e88:	080020e3 	.word	0x080020e3
 8001e8c:	080020e3 	.word	0x080020e3
 8001e90:	080020e3 	.word	0x080020e3
 8001e94:	080020e3 	.word	0x080020e3
 8001e98:	080020e3 	.word	0x080020e3
 8001e9c:	080020e3 	.word	0x080020e3
 8001ea0:	08001ed7 	.word	0x08001ed7
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001ea4:	4b94      	ldr	r3, [pc, #592]	; (80020f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f003 0320 	and.w	r3, r3, #32
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d009      	beq.n	8001ec4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8001eb0:	4b91      	ldr	r3, [pc, #580]	; (80020f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	08db      	lsrs	r3, r3, #3
 8001eb6:	f003 0303 	and.w	r3, r3, #3
 8001eba:	4a90      	ldr	r2, [pc, #576]	; (80020fc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8001ebc:	fa22 f303 	lsr.w	r3, r2, r3
 8001ec0:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8001ec2:	e111      	b.n	80020e8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8001ec4:	4b8d      	ldr	r3, [pc, #564]	; (80020fc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8001ec6:	61bb      	str	r3, [r7, #24]
      break;
 8001ec8:	e10e      	b.n	80020e8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8001eca:	4b8d      	ldr	r3, [pc, #564]	; (8002100 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8001ecc:	61bb      	str	r3, [r7, #24]
      break;
 8001ece:	e10b      	b.n	80020e8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8001ed0:	4b8c      	ldr	r3, [pc, #560]	; (8002104 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8001ed2:	61bb      	str	r3, [r7, #24]
      break;
 8001ed4:	e108      	b.n	80020e8 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8001ed6:	4b88      	ldr	r3, [pc, #544]	; (80020f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001ed8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001eda:	f003 0303 	and.w	r3, r3, #3
 8001ede:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8001ee0:	4b85      	ldr	r3, [pc, #532]	; (80020f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001ee2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ee4:	091b      	lsrs	r3, r3, #4
 8001ee6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001eea:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8001eec:	4b82      	ldr	r3, [pc, #520]	; (80020f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001eee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ef0:	f003 0301 	and.w	r3, r3, #1
 8001ef4:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8001ef6:	4b80      	ldr	r3, [pc, #512]	; (80020f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001ef8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001efa:	08db      	lsrs	r3, r3, #3
 8001efc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8001f00:	68fa      	ldr	r2, [r7, #12]
 8001f02:	fb02 f303 	mul.w	r3, r2, r3
 8001f06:	ee07 3a90 	vmov	s15, r3
 8001f0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001f0e:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8001f12:	693b      	ldr	r3, [r7, #16]
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	f000 80e1 	beq.w	80020dc <HAL_RCC_GetSysClockFreq+0x2b8>
 8001f1a:	697b      	ldr	r3, [r7, #20]
 8001f1c:	2b02      	cmp	r3, #2
 8001f1e:	f000 8083 	beq.w	8002028 <HAL_RCC_GetSysClockFreq+0x204>
 8001f22:	697b      	ldr	r3, [r7, #20]
 8001f24:	2b02      	cmp	r3, #2
 8001f26:	f200 80a1 	bhi.w	800206c <HAL_RCC_GetSysClockFreq+0x248>
 8001f2a:	697b      	ldr	r3, [r7, #20]
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d003      	beq.n	8001f38 <HAL_RCC_GetSysClockFreq+0x114>
 8001f30:	697b      	ldr	r3, [r7, #20]
 8001f32:	2b01      	cmp	r3, #1
 8001f34:	d056      	beq.n	8001fe4 <HAL_RCC_GetSysClockFreq+0x1c0>
 8001f36:	e099      	b.n	800206c <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001f38:	4b6f      	ldr	r3, [pc, #444]	; (80020f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f003 0320 	and.w	r3, r3, #32
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d02d      	beq.n	8001fa0 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8001f44:	4b6c      	ldr	r3, [pc, #432]	; (80020f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	08db      	lsrs	r3, r3, #3
 8001f4a:	f003 0303 	and.w	r3, r3, #3
 8001f4e:	4a6b      	ldr	r2, [pc, #428]	; (80020fc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8001f50:	fa22 f303 	lsr.w	r3, r2, r3
 8001f54:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	ee07 3a90 	vmov	s15, r3
 8001f5c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001f60:	693b      	ldr	r3, [r7, #16]
 8001f62:	ee07 3a90 	vmov	s15, r3
 8001f66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001f6a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001f6e:	4b62      	ldr	r3, [pc, #392]	; (80020f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001f70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001f76:	ee07 3a90 	vmov	s15, r3
 8001f7a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001f7e:	ed97 6a02 	vldr	s12, [r7, #8]
 8001f82:	eddf 5a61 	vldr	s11, [pc, #388]	; 8002108 <HAL_RCC_GetSysClockFreq+0x2e4>
 8001f86:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001f8a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001f8e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001f92:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001f96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f9a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8001f9e:	e087      	b.n	80020b0 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8001fa0:	693b      	ldr	r3, [r7, #16]
 8001fa2:	ee07 3a90 	vmov	s15, r3
 8001fa6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001faa:	eddf 6a58 	vldr	s13, [pc, #352]	; 800210c <HAL_RCC_GetSysClockFreq+0x2e8>
 8001fae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001fb2:	4b51      	ldr	r3, [pc, #324]	; (80020f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001fb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fb6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001fba:	ee07 3a90 	vmov	s15, r3
 8001fbe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001fc2:	ed97 6a02 	vldr	s12, [r7, #8]
 8001fc6:	eddf 5a50 	vldr	s11, [pc, #320]	; 8002108 <HAL_RCC_GetSysClockFreq+0x2e4>
 8001fca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001fce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001fd2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001fd6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001fda:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001fde:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8001fe2:	e065      	b.n	80020b0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8001fe4:	693b      	ldr	r3, [r7, #16]
 8001fe6:	ee07 3a90 	vmov	s15, r3
 8001fea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001fee:	eddf 6a48 	vldr	s13, [pc, #288]	; 8002110 <HAL_RCC_GetSysClockFreq+0x2ec>
 8001ff2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001ff6:	4b40      	ldr	r3, [pc, #256]	; (80020f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001ff8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ffa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001ffe:	ee07 3a90 	vmov	s15, r3
 8002002:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002006:	ed97 6a02 	vldr	s12, [r7, #8]
 800200a:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8002108 <HAL_RCC_GetSysClockFreq+0x2e4>
 800200e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002012:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002016:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800201a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800201e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002022:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002026:	e043      	b.n	80020b0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002028:	693b      	ldr	r3, [r7, #16]
 800202a:	ee07 3a90 	vmov	s15, r3
 800202e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002032:	eddf 6a38 	vldr	s13, [pc, #224]	; 8002114 <HAL_RCC_GetSysClockFreq+0x2f0>
 8002036:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800203a:	4b2f      	ldr	r3, [pc, #188]	; (80020f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800203c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800203e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002042:	ee07 3a90 	vmov	s15, r3
 8002046:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800204a:	ed97 6a02 	vldr	s12, [r7, #8]
 800204e:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8002108 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002052:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002056:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800205a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800205e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002062:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002066:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800206a:	e021      	b.n	80020b0 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800206c:	693b      	ldr	r3, [r7, #16]
 800206e:	ee07 3a90 	vmov	s15, r3
 8002072:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002076:	eddf 6a26 	vldr	s13, [pc, #152]	; 8002110 <HAL_RCC_GetSysClockFreq+0x2ec>
 800207a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800207e:	4b1e      	ldr	r3, [pc, #120]	; (80020f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002080:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002082:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002086:	ee07 3a90 	vmov	s15, r3
 800208a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800208e:	ed97 6a02 	vldr	s12, [r7, #8]
 8002092:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8002108 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002096:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800209a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800209e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80020a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80020a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80020aa:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80020ae:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80020b0:	4b11      	ldr	r3, [pc, #68]	; (80020f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80020b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020b4:	0a5b      	lsrs	r3, r3, #9
 80020b6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80020ba:	3301      	adds	r3, #1
 80020bc:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80020be:	683b      	ldr	r3, [r7, #0]
 80020c0:	ee07 3a90 	vmov	s15, r3
 80020c4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80020c8:	edd7 6a07 	vldr	s13, [r7, #28]
 80020cc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80020d0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80020d4:	ee17 3a90 	vmov	r3, s15
 80020d8:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80020da:	e005      	b.n	80020e8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80020dc:	2300      	movs	r3, #0
 80020de:	61bb      	str	r3, [r7, #24]
      break;
 80020e0:	e002      	b.n	80020e8 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80020e2:	4b07      	ldr	r3, [pc, #28]	; (8002100 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80020e4:	61bb      	str	r3, [r7, #24]
      break;
 80020e6:	bf00      	nop
  }

  return sysclockfreq;
 80020e8:	69bb      	ldr	r3, [r7, #24]
}
 80020ea:	4618      	mov	r0, r3
 80020ec:	3724      	adds	r7, #36	; 0x24
 80020ee:	46bd      	mov	sp, r7
 80020f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f4:	4770      	bx	lr
 80020f6:	bf00      	nop
 80020f8:	58024400 	.word	0x58024400
 80020fc:	03d09000 	.word	0x03d09000
 8002100:	003d0900 	.word	0x003d0900
 8002104:	017d7840 	.word	0x017d7840
 8002108:	46000000 	.word	0x46000000
 800210c:	4c742400 	.word	0x4c742400
 8002110:	4a742400 	.word	0x4a742400
 8002114:	4bbebc20 	.word	0x4bbebc20

08002118 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002118:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800211c:	b0cc      	sub	sp, #304	; 0x130
 800211e:	af00      	add	r7, sp, #0
 8002120:	f8c7 011c 	str.w	r0, [r7, #284]	; 0x11c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002124:	2300      	movs	r3, #0
 8002126:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800212a:	2300      	movs	r3, #0
 800212c:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002130:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002134:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002138:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 800213c:	2500      	movs	r5, #0
 800213e:	ea54 0305 	orrs.w	r3, r4, r5
 8002142:	d049      	beq.n	80021d8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8002144:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002148:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800214a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800214e:	d02f      	beq.n	80021b0 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8002150:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002154:	d828      	bhi.n	80021a8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8002156:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800215a:	d01a      	beq.n	8002192 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800215c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002160:	d822      	bhi.n	80021a8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8002162:	2b00      	cmp	r3, #0
 8002164:	d003      	beq.n	800216e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8002166:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800216a:	d007      	beq.n	800217c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800216c:	e01c      	b.n	80021a8 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800216e:	4bb8      	ldr	r3, [pc, #736]	; (8002450 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002170:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002172:	4ab7      	ldr	r2, [pc, #732]	; (8002450 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002174:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002178:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800217a:	e01a      	b.n	80021b2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800217c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002180:	3308      	adds	r3, #8
 8002182:	2102      	movs	r1, #2
 8002184:	4618      	mov	r0, r3
 8002186:	f001 fa11 	bl	80035ac <RCCEx_PLL2_Config>
 800218a:	4603      	mov	r3, r0
 800218c:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002190:	e00f      	b.n	80021b2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8002192:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002196:	3328      	adds	r3, #40	; 0x28
 8002198:	2102      	movs	r1, #2
 800219a:	4618      	mov	r0, r3
 800219c:	f001 fab8 	bl	8003710 <RCCEx_PLL3_Config>
 80021a0:	4603      	mov	r3, r0
 80021a2:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80021a6:	e004      	b.n	80021b2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80021a8:	2301      	movs	r3, #1
 80021aa:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 80021ae:	e000      	b.n	80021b2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80021b0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80021b2:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d10a      	bne.n	80021d0 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80021ba:	4ba5      	ldr	r3, [pc, #660]	; (8002450 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80021bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80021be:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 80021c2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80021c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80021c8:	4aa1      	ldr	r2, [pc, #644]	; (8002450 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80021ca:	430b      	orrs	r3, r1
 80021cc:	6513      	str	r3, [r2, #80]	; 0x50
 80021ce:	e003      	b.n	80021d8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80021d0:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80021d4:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80021d8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80021dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021e0:	f402 7880 	and.w	r8, r2, #256	; 0x100
 80021e4:	f04f 0900 	mov.w	r9, #0
 80021e8:	ea58 0309 	orrs.w	r3, r8, r9
 80021ec:	d047      	beq.n	800227e <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80021ee:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80021f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021f4:	2b04      	cmp	r3, #4
 80021f6:	d82a      	bhi.n	800224e <HAL_RCCEx_PeriphCLKConfig+0x136>
 80021f8:	a201      	add	r2, pc, #4	; (adr r2, 8002200 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80021fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021fe:	bf00      	nop
 8002200:	08002215 	.word	0x08002215
 8002204:	08002223 	.word	0x08002223
 8002208:	08002239 	.word	0x08002239
 800220c:	08002257 	.word	0x08002257
 8002210:	08002257 	.word	0x08002257
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002214:	4b8e      	ldr	r3, [pc, #568]	; (8002450 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002216:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002218:	4a8d      	ldr	r2, [pc, #564]	; (8002450 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800221a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800221e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002220:	e01a      	b.n	8002258 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002222:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002226:	3308      	adds	r3, #8
 8002228:	2100      	movs	r1, #0
 800222a:	4618      	mov	r0, r3
 800222c:	f001 f9be 	bl	80035ac <RCCEx_PLL2_Config>
 8002230:	4603      	mov	r3, r0
 8002232:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002236:	e00f      	b.n	8002258 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002238:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800223c:	3328      	adds	r3, #40	; 0x28
 800223e:	2100      	movs	r1, #0
 8002240:	4618      	mov	r0, r3
 8002242:	f001 fa65 	bl	8003710 <RCCEx_PLL3_Config>
 8002246:	4603      	mov	r3, r0
 8002248:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800224c:	e004      	b.n	8002258 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800224e:	2301      	movs	r3, #1
 8002250:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8002254:	e000      	b.n	8002258 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8002256:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002258:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800225c:	2b00      	cmp	r3, #0
 800225e:	d10a      	bne.n	8002276 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002260:	4b7b      	ldr	r3, [pc, #492]	; (8002450 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002262:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002264:	f023 0107 	bic.w	r1, r3, #7
 8002268:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800226c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800226e:	4a78      	ldr	r2, [pc, #480]	; (8002450 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002270:	430b      	orrs	r3, r1
 8002272:	6513      	str	r3, [r2, #80]	; 0x50
 8002274:	e003      	b.n	800227e <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002276:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800227a:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800227e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002282:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002286:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 800228a:	f04f 0b00 	mov.w	fp, #0
 800228e:	ea5a 030b 	orrs.w	r3, sl, fp
 8002292:	d04c      	beq.n	800232e <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8002294:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002298:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800229a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800229e:	d030      	beq.n	8002302 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 80022a0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80022a4:	d829      	bhi.n	80022fa <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80022a6:	2bc0      	cmp	r3, #192	; 0xc0
 80022a8:	d02d      	beq.n	8002306 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80022aa:	2bc0      	cmp	r3, #192	; 0xc0
 80022ac:	d825      	bhi.n	80022fa <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80022ae:	2b80      	cmp	r3, #128	; 0x80
 80022b0:	d018      	beq.n	80022e4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80022b2:	2b80      	cmp	r3, #128	; 0x80
 80022b4:	d821      	bhi.n	80022fa <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d002      	beq.n	80022c0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 80022ba:	2b40      	cmp	r3, #64	; 0x40
 80022bc:	d007      	beq.n	80022ce <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 80022be:	e01c      	b.n	80022fa <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80022c0:	4b63      	ldr	r3, [pc, #396]	; (8002450 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80022c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022c4:	4a62      	ldr	r2, [pc, #392]	; (8002450 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80022c6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80022ca:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80022cc:	e01c      	b.n	8002308 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80022ce:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80022d2:	3308      	adds	r3, #8
 80022d4:	2100      	movs	r1, #0
 80022d6:	4618      	mov	r0, r3
 80022d8:	f001 f968 	bl	80035ac <RCCEx_PLL2_Config>
 80022dc:	4603      	mov	r3, r0
 80022de:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80022e2:	e011      	b.n	8002308 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80022e4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80022e8:	3328      	adds	r3, #40	; 0x28
 80022ea:	2100      	movs	r1, #0
 80022ec:	4618      	mov	r0, r3
 80022ee:	f001 fa0f 	bl	8003710 <RCCEx_PLL3_Config>
 80022f2:	4603      	mov	r3, r0
 80022f4:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80022f8:	e006      	b.n	8002308 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80022fa:	2301      	movs	r3, #1
 80022fc:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8002300:	e002      	b.n	8002308 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8002302:	bf00      	nop
 8002304:	e000      	b.n	8002308 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8002306:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002308:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800230c:	2b00      	cmp	r3, #0
 800230e:	d10a      	bne.n	8002326 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8002310:	4b4f      	ldr	r3, [pc, #316]	; (8002450 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002312:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002314:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8002318:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800231c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800231e:	4a4c      	ldr	r2, [pc, #304]	; (8002450 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002320:	430b      	orrs	r3, r1
 8002322:	6513      	str	r3, [r2, #80]	; 0x50
 8002324:	e003      	b.n	800232e <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002326:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800232a:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800232e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002332:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002336:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 800233a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 800233e:	2300      	movs	r3, #0
 8002340:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8002344:	e9d7 1244 	ldrd	r1, r2, [r7, #272]	; 0x110
 8002348:	460b      	mov	r3, r1
 800234a:	4313      	orrs	r3, r2
 800234c:	d053      	beq.n	80023f6 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800234e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002352:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8002356:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800235a:	d035      	beq.n	80023c8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 800235c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002360:	d82e      	bhi.n	80023c0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8002362:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8002366:	d031      	beq.n	80023cc <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8002368:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800236c:	d828      	bhi.n	80023c0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800236e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002372:	d01a      	beq.n	80023aa <HAL_RCCEx_PeriphCLKConfig+0x292>
 8002374:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002378:	d822      	bhi.n	80023c0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800237a:	2b00      	cmp	r3, #0
 800237c:	d003      	beq.n	8002386 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800237e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002382:	d007      	beq.n	8002394 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8002384:	e01c      	b.n	80023c0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002386:	4b32      	ldr	r3, [pc, #200]	; (8002450 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002388:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800238a:	4a31      	ldr	r2, [pc, #196]	; (8002450 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800238c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002390:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002392:	e01c      	b.n	80023ce <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002394:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002398:	3308      	adds	r3, #8
 800239a:	2100      	movs	r1, #0
 800239c:	4618      	mov	r0, r3
 800239e:	f001 f905 	bl	80035ac <RCCEx_PLL2_Config>
 80023a2:	4603      	mov	r3, r0
 80023a4:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80023a8:	e011      	b.n	80023ce <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80023aa:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80023ae:	3328      	adds	r3, #40	; 0x28
 80023b0:	2100      	movs	r1, #0
 80023b2:	4618      	mov	r0, r3
 80023b4:	f001 f9ac 	bl	8003710 <RCCEx_PLL3_Config>
 80023b8:	4603      	mov	r3, r0
 80023ba:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80023be:	e006      	b.n	80023ce <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80023c0:	2301      	movs	r3, #1
 80023c2:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 80023c6:	e002      	b.n	80023ce <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80023c8:	bf00      	nop
 80023ca:	e000      	b.n	80023ce <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80023cc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80023ce:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d10b      	bne.n	80023ee <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80023d6:	4b1e      	ldr	r3, [pc, #120]	; (8002450 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80023d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023da:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 80023de:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80023e2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80023e6:	4a1a      	ldr	r2, [pc, #104]	; (8002450 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80023e8:	430b      	orrs	r3, r1
 80023ea:	6593      	str	r3, [r2, #88]	; 0x58
 80023ec:	e003      	b.n	80023f6 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80023ee:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80023f2:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80023f6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80023fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023fe:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8002402:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8002406:	2300      	movs	r3, #0
 8002408:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800240c:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 8002410:	460b      	mov	r3, r1
 8002412:	4313      	orrs	r3, r2
 8002414:	d056      	beq.n	80024c4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8002416:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800241a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800241e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002422:	d038      	beq.n	8002496 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8002424:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002428:	d831      	bhi.n	800248e <HAL_RCCEx_PeriphCLKConfig+0x376>
 800242a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800242e:	d034      	beq.n	800249a <HAL_RCCEx_PeriphCLKConfig+0x382>
 8002430:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002434:	d82b      	bhi.n	800248e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8002436:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800243a:	d01d      	beq.n	8002478 <HAL_RCCEx_PeriphCLKConfig+0x360>
 800243c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002440:	d825      	bhi.n	800248e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8002442:	2b00      	cmp	r3, #0
 8002444:	d006      	beq.n	8002454 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8002446:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800244a:	d00a      	beq.n	8002462 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800244c:	e01f      	b.n	800248e <HAL_RCCEx_PeriphCLKConfig+0x376>
 800244e:	bf00      	nop
 8002450:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002454:	4ba2      	ldr	r3, [pc, #648]	; (80026e0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002456:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002458:	4aa1      	ldr	r2, [pc, #644]	; (80026e0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800245a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800245e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002460:	e01c      	b.n	800249c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002462:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002466:	3308      	adds	r3, #8
 8002468:	2100      	movs	r1, #0
 800246a:	4618      	mov	r0, r3
 800246c:	f001 f89e 	bl	80035ac <RCCEx_PLL2_Config>
 8002470:	4603      	mov	r3, r0
 8002472:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8002476:	e011      	b.n	800249c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002478:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800247c:	3328      	adds	r3, #40	; 0x28
 800247e:	2100      	movs	r1, #0
 8002480:	4618      	mov	r0, r3
 8002482:	f001 f945 	bl	8003710 <RCCEx_PLL3_Config>
 8002486:	4603      	mov	r3, r0
 8002488:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800248c:	e006      	b.n	800249c <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800248e:	2301      	movs	r3, #1
 8002490:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8002494:	e002      	b.n	800249c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8002496:	bf00      	nop
 8002498:	e000      	b.n	800249c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800249a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800249c:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d10b      	bne.n	80024bc <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80024a4:	4b8e      	ldr	r3, [pc, #568]	; (80026e0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80024a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024a8:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 80024ac:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80024b0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80024b4:	4a8a      	ldr	r2, [pc, #552]	; (80026e0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80024b6:	430b      	orrs	r3, r1
 80024b8:	6593      	str	r3, [r2, #88]	; 0x58
 80024ba:	e003      	b.n	80024c4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80024bc:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80024c0:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80024c4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80024c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024cc:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 80024d0:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80024d4:	2300      	movs	r3, #0
 80024d6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80024da:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 80024de:	460b      	mov	r3, r1
 80024e0:	4313      	orrs	r3, r2
 80024e2:	d03a      	beq.n	800255a <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 80024e4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80024e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024ea:	2b30      	cmp	r3, #48	; 0x30
 80024ec:	d01f      	beq.n	800252e <HAL_RCCEx_PeriphCLKConfig+0x416>
 80024ee:	2b30      	cmp	r3, #48	; 0x30
 80024f0:	d819      	bhi.n	8002526 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80024f2:	2b20      	cmp	r3, #32
 80024f4:	d00c      	beq.n	8002510 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 80024f6:	2b20      	cmp	r3, #32
 80024f8:	d815      	bhi.n	8002526 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d019      	beq.n	8002532 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 80024fe:	2b10      	cmp	r3, #16
 8002500:	d111      	bne.n	8002526 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002502:	4b77      	ldr	r3, [pc, #476]	; (80026e0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002504:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002506:	4a76      	ldr	r2, [pc, #472]	; (80026e0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002508:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800250c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800250e:	e011      	b.n	8002534 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002510:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002514:	3308      	adds	r3, #8
 8002516:	2102      	movs	r1, #2
 8002518:	4618      	mov	r0, r3
 800251a:	f001 f847 	bl	80035ac <RCCEx_PLL2_Config>
 800251e:	4603      	mov	r3, r0
 8002520:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8002524:	e006      	b.n	8002534 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8002526:	2301      	movs	r3, #1
 8002528:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 800252c:	e002      	b.n	8002534 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800252e:	bf00      	nop
 8002530:	e000      	b.n	8002534 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8002532:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002534:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8002538:	2b00      	cmp	r3, #0
 800253a:	d10a      	bne.n	8002552 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800253c:	4b68      	ldr	r3, [pc, #416]	; (80026e0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800253e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002540:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8002544:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002548:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800254a:	4a65      	ldr	r2, [pc, #404]	; (80026e0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800254c:	430b      	orrs	r3, r1
 800254e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002550:	e003      	b.n	800255a <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002552:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8002556:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800255a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800255e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002562:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8002566:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800256a:	2300      	movs	r3, #0
 800256c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8002570:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8002574:	460b      	mov	r3, r1
 8002576:	4313      	orrs	r3, r2
 8002578:	d051      	beq.n	800261e <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800257a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800257e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002580:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002584:	d035      	beq.n	80025f2 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8002586:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800258a:	d82e      	bhi.n	80025ea <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800258c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002590:	d031      	beq.n	80025f6 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8002592:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002596:	d828      	bhi.n	80025ea <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8002598:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800259c:	d01a      	beq.n	80025d4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800259e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80025a2:	d822      	bhi.n	80025ea <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d003      	beq.n	80025b0 <HAL_RCCEx_PeriphCLKConfig+0x498>
 80025a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80025ac:	d007      	beq.n	80025be <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 80025ae:	e01c      	b.n	80025ea <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80025b0:	4b4b      	ldr	r3, [pc, #300]	; (80026e0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80025b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025b4:	4a4a      	ldr	r2, [pc, #296]	; (80026e0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80025b6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80025ba:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80025bc:	e01c      	b.n	80025f8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80025be:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80025c2:	3308      	adds	r3, #8
 80025c4:	2100      	movs	r1, #0
 80025c6:	4618      	mov	r0, r3
 80025c8:	f000 fff0 	bl	80035ac <RCCEx_PLL2_Config>
 80025cc:	4603      	mov	r3, r0
 80025ce:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80025d2:	e011      	b.n	80025f8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80025d4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80025d8:	3328      	adds	r3, #40	; 0x28
 80025da:	2100      	movs	r1, #0
 80025dc:	4618      	mov	r0, r3
 80025de:	f001 f897 	bl	8003710 <RCCEx_PLL3_Config>
 80025e2:	4603      	mov	r3, r0
 80025e4:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80025e8:	e006      	b.n	80025f8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80025ea:	2301      	movs	r3, #1
 80025ec:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 80025f0:	e002      	b.n	80025f8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80025f2:	bf00      	nop
 80025f4:	e000      	b.n	80025f8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80025f6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80025f8:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d10a      	bne.n	8002616 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8002600:	4b37      	ldr	r3, [pc, #220]	; (80026e0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002602:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002604:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8002608:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800260c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800260e:	4a34      	ldr	r2, [pc, #208]	; (80026e0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002610:	430b      	orrs	r3, r1
 8002612:	6513      	str	r3, [r2, #80]	; 0x50
 8002614:	e003      	b.n	800261e <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002616:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800261a:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800261e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002622:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002626:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 800262a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800262e:	2300      	movs	r3, #0
 8002630:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8002634:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8002638:	460b      	mov	r3, r1
 800263a:	4313      	orrs	r3, r2
 800263c:	d056      	beq.n	80026ec <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800263e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002642:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002644:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002648:	d033      	beq.n	80026b2 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800264a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800264e:	d82c      	bhi.n	80026aa <HAL_RCCEx_PeriphCLKConfig+0x592>
 8002650:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002654:	d02f      	beq.n	80026b6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8002656:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800265a:	d826      	bhi.n	80026aa <HAL_RCCEx_PeriphCLKConfig+0x592>
 800265c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002660:	d02b      	beq.n	80026ba <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8002662:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002666:	d820      	bhi.n	80026aa <HAL_RCCEx_PeriphCLKConfig+0x592>
 8002668:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800266c:	d012      	beq.n	8002694 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 800266e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002672:	d81a      	bhi.n	80026aa <HAL_RCCEx_PeriphCLKConfig+0x592>
 8002674:	2b00      	cmp	r3, #0
 8002676:	d022      	beq.n	80026be <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8002678:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800267c:	d115      	bne.n	80026aa <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800267e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002682:	3308      	adds	r3, #8
 8002684:	2101      	movs	r1, #1
 8002686:	4618      	mov	r0, r3
 8002688:	f000 ff90 	bl	80035ac <RCCEx_PLL2_Config>
 800268c:	4603      	mov	r3, r0
 800268e:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8002692:	e015      	b.n	80026c0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002694:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002698:	3328      	adds	r3, #40	; 0x28
 800269a:	2101      	movs	r1, #1
 800269c:	4618      	mov	r0, r3
 800269e:	f001 f837 	bl	8003710 <RCCEx_PLL3_Config>
 80026a2:	4603      	mov	r3, r0
 80026a4:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80026a8:	e00a      	b.n	80026c0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80026aa:	2301      	movs	r3, #1
 80026ac:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 80026b0:	e006      	b.n	80026c0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80026b2:	bf00      	nop
 80026b4:	e004      	b.n	80026c0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80026b6:	bf00      	nop
 80026b8:	e002      	b.n	80026c0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80026ba:	bf00      	nop
 80026bc:	e000      	b.n	80026c0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80026be:	bf00      	nop
    }

    if (ret == HAL_OK)
 80026c0:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d10d      	bne.n	80026e4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80026c8:	4b05      	ldr	r3, [pc, #20]	; (80026e0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80026ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80026cc:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 80026d0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80026d4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80026d6:	4a02      	ldr	r2, [pc, #8]	; (80026e0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80026d8:	430b      	orrs	r3, r1
 80026da:	6513      	str	r3, [r2, #80]	; 0x50
 80026dc:	e006      	b.n	80026ec <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80026de:	bf00      	nop
 80026e0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80026e4:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80026e8:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80026ec:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80026f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026f4:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 80026f8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80026fc:	2300      	movs	r3, #0
 80026fe:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8002702:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8002706:	460b      	mov	r3, r1
 8002708:	4313      	orrs	r3, r2
 800270a:	d055      	beq.n	80027b8 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800270c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002710:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8002714:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002718:	d033      	beq.n	8002782 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 800271a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800271e:	d82c      	bhi.n	800277a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8002720:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002724:	d02f      	beq.n	8002786 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8002726:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800272a:	d826      	bhi.n	800277a <HAL_RCCEx_PeriphCLKConfig+0x662>
 800272c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002730:	d02b      	beq.n	800278a <HAL_RCCEx_PeriphCLKConfig+0x672>
 8002732:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002736:	d820      	bhi.n	800277a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8002738:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800273c:	d012      	beq.n	8002764 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800273e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002742:	d81a      	bhi.n	800277a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8002744:	2b00      	cmp	r3, #0
 8002746:	d022      	beq.n	800278e <HAL_RCCEx_PeriphCLKConfig+0x676>
 8002748:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800274c:	d115      	bne.n	800277a <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800274e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002752:	3308      	adds	r3, #8
 8002754:	2101      	movs	r1, #1
 8002756:	4618      	mov	r0, r3
 8002758:	f000 ff28 	bl	80035ac <RCCEx_PLL2_Config>
 800275c:	4603      	mov	r3, r0
 800275e:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8002762:	e015      	b.n	8002790 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002764:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002768:	3328      	adds	r3, #40	; 0x28
 800276a:	2101      	movs	r1, #1
 800276c:	4618      	mov	r0, r3
 800276e:	f000 ffcf 	bl	8003710 <RCCEx_PLL3_Config>
 8002772:	4603      	mov	r3, r0
 8002774:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8002778:	e00a      	b.n	8002790 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800277a:	2301      	movs	r3, #1
 800277c:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8002780:	e006      	b.n	8002790 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8002782:	bf00      	nop
 8002784:	e004      	b.n	8002790 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8002786:	bf00      	nop
 8002788:	e002      	b.n	8002790 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800278a:	bf00      	nop
 800278c:	e000      	b.n	8002790 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800278e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002790:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8002794:	2b00      	cmp	r3, #0
 8002796:	d10b      	bne.n	80027b0 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8002798:	4bb6      	ldr	r3, [pc, #728]	; (8002a74 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800279a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800279c:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 80027a0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80027a4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80027a8:	4ab2      	ldr	r2, [pc, #712]	; (8002a74 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80027aa:	430b      	orrs	r3, r1
 80027ac:	6593      	str	r3, [r2, #88]	; 0x58
 80027ae:	e003      	b.n	80027b8 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80027b0:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80027b4:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

#if defined(DSI)
  /*---------------------------- DSI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 80027b8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80027bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027c0:	f002 6380 	and.w	r3, r2, #67108864	; 0x4000000
 80027c4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80027c8:	2300      	movs	r3, #0
 80027ca:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80027ce:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 80027d2:	460b      	mov	r3, r1
 80027d4:	4313      	orrs	r3, r2
 80027d6:	d02a      	beq.n	800282e <HAL_RCCEx_PeriphCLKConfig+0x716>
  {
    switch (PeriphClkInit->DsiClockSelection)
 80027d8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80027dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d011      	beq.n	8002806 <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 80027e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80027e6:	d10a      	bne.n	80027fe <HAL_RCCEx_PeriphCLKConfig+0x6e6>
    {

      case RCC_DSICLKSOURCE_PLL2: /* PLL2 is used as clock source for DSI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80027e8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80027ec:	3308      	adds	r3, #8
 80027ee:	2101      	movs	r1, #1
 80027f0:	4618      	mov	r0, r3
 80027f2:	f000 fedb 	bl	80035ac <RCCEx_PLL2_Config>
 80027f6:	4603      	mov	r3, r0
 80027f8:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* DSI clock source configuration done later after clock selection check */
        break;
 80027fc:	e004      	b.n	8002808 <HAL_RCCEx_PeriphCLKConfig+0x6f0>
        /* PHY is used as clock source for DSI*/
        /* DSI clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80027fe:	2301      	movs	r3, #1
 8002800:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8002804:	e000      	b.n	8002808 <HAL_RCCEx_PeriphCLKConfig+0x6f0>
        break;
 8002806:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002808:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800280c:	2b00      	cmp	r3, #0
 800280e:	d10a      	bne.n	8002826 <HAL_RCCEx_PeriphCLKConfig+0x70e>
    {
      /* Set the source of DSI clock*/
      __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 8002810:	4b98      	ldr	r3, [pc, #608]	; (8002a74 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8002812:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002814:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 8002818:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800281c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800281e:	4a95      	ldr	r2, [pc, #596]	; (8002a74 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8002820:	430b      	orrs	r3, r1
 8002822:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002824:	e003      	b.n	800282e <HAL_RCCEx_PeriphCLKConfig+0x716>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002826:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800282a:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800282e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002832:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002836:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 800283a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800283e:	2300      	movs	r3, #0
 8002840:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8002844:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002848:	460b      	mov	r3, r1
 800284a:	4313      	orrs	r3, r2
 800284c:	d037      	beq.n	80028be <HAL_RCCEx_PeriphCLKConfig+0x7a6>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800284e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002852:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002854:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002858:	d00e      	beq.n	8002878 <HAL_RCCEx_PeriphCLKConfig+0x760>
 800285a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800285e:	d816      	bhi.n	800288e <HAL_RCCEx_PeriphCLKConfig+0x776>
 8002860:	2b00      	cmp	r3, #0
 8002862:	d018      	beq.n	8002896 <HAL_RCCEx_PeriphCLKConfig+0x77e>
 8002864:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002868:	d111      	bne.n	800288e <HAL_RCCEx_PeriphCLKConfig+0x776>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800286a:	4b82      	ldr	r3, [pc, #520]	; (8002a74 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800286c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800286e:	4a81      	ldr	r2, [pc, #516]	; (8002a74 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8002870:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002874:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8002876:	e00f      	b.n	8002898 <HAL_RCCEx_PeriphCLKConfig+0x780>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002878:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800287c:	3308      	adds	r3, #8
 800287e:	2101      	movs	r1, #1
 8002880:	4618      	mov	r0, r3
 8002882:	f000 fe93 	bl	80035ac <RCCEx_PLL2_Config>
 8002886:	4603      	mov	r3, r0
 8002888:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800288c:	e004      	b.n	8002898 <HAL_RCCEx_PeriphCLKConfig+0x780>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800288e:	2301      	movs	r3, #1
 8002890:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8002894:	e000      	b.n	8002898 <HAL_RCCEx_PeriphCLKConfig+0x780>
        break;
 8002896:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002898:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800289c:	2b00      	cmp	r3, #0
 800289e:	d10a      	bne.n	80028b6 <HAL_RCCEx_PeriphCLKConfig+0x79e>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80028a0:	4b74      	ldr	r3, [pc, #464]	; (8002a74 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80028a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80028a4:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 80028a8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80028ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80028ae:	4a71      	ldr	r2, [pc, #452]	; (8002a74 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80028b0:	430b      	orrs	r3, r1
 80028b2:	6513      	str	r3, [r2, #80]	; 0x50
 80028b4:	e003      	b.n	80028be <HAL_RCCEx_PeriphCLKConfig+0x7a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80028b6:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80028ba:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80028be:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80028c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028c6:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 80028ca:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80028ce:	2300      	movs	r3, #0
 80028d0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80028d4:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 80028d8:	460b      	mov	r3, r1
 80028da:	4313      	orrs	r3, r2
 80028dc:	d03a      	beq.n	8002954 <HAL_RCCEx_PeriphCLKConfig+0x83c>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80028de:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80028e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80028e4:	2b03      	cmp	r3, #3
 80028e6:	d81d      	bhi.n	8002924 <HAL_RCCEx_PeriphCLKConfig+0x80c>
 80028e8:	a201      	add	r2, pc, #4	; (adr r2, 80028f0 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80028ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028ee:	bf00      	nop
 80028f0:	0800292d 	.word	0x0800292d
 80028f4:	08002901 	.word	0x08002901
 80028f8:	0800290f 	.word	0x0800290f
 80028fc:	0800292d 	.word	0x0800292d
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002900:	4b5c      	ldr	r3, [pc, #368]	; (8002a74 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8002902:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002904:	4a5b      	ldr	r2, [pc, #364]	; (8002a74 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8002906:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800290a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800290c:	e00f      	b.n	800292e <HAL_RCCEx_PeriphCLKConfig+0x816>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800290e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002912:	3308      	adds	r3, #8
 8002914:	2102      	movs	r1, #2
 8002916:	4618      	mov	r0, r3
 8002918:	f000 fe48 	bl	80035ac <RCCEx_PLL2_Config>
 800291c:	4603      	mov	r3, r0
 800291e:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* FMC clock source configuration done later after clock selection check */
        break;
 8002922:	e004      	b.n	800292e <HAL_RCCEx_PeriphCLKConfig+0x816>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8002924:	2301      	movs	r3, #1
 8002926:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 800292a:	e000      	b.n	800292e <HAL_RCCEx_PeriphCLKConfig+0x816>
        break;
 800292c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800292e:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8002932:	2b00      	cmp	r3, #0
 8002934:	d10a      	bne.n	800294c <HAL_RCCEx_PeriphCLKConfig+0x834>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8002936:	4b4f      	ldr	r3, [pc, #316]	; (8002a74 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8002938:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800293a:	f023 0103 	bic.w	r1, r3, #3
 800293e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002942:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002944:	4a4b      	ldr	r2, [pc, #300]	; (8002a74 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8002946:	430b      	orrs	r3, r1
 8002948:	64d3      	str	r3, [r2, #76]	; 0x4c
 800294a:	e003      	b.n	8002954 <HAL_RCCEx_PeriphCLKConfig+0x83c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800294c:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8002950:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002954:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002958:	e9d3 2300 	ldrd	r2, r3, [r3]
 800295c:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8002960:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002964:	2300      	movs	r3, #0
 8002966:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800296a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800296e:	460b      	mov	r3, r1
 8002970:	4313      	orrs	r3, r2
 8002972:	f000 80a0 	beq.w	8002ab6 <HAL_RCCEx_PeriphCLKConfig+0x99e>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002976:	4b40      	ldr	r3, [pc, #256]	; (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	4a3f      	ldr	r2, [pc, #252]	; (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 800297c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002980:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002982:	f7fe f91f 	bl	8000bc4 <HAL_GetTick>
 8002986:	f8c7 0128 	str.w	r0, [r7, #296]	; 0x128

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800298a:	e00b      	b.n	80029a4 <HAL_RCCEx_PeriphCLKConfig+0x88c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800298c:	f7fe f91a 	bl	8000bc4 <HAL_GetTick>
 8002990:	4602      	mov	r2, r0
 8002992:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8002996:	1ad3      	subs	r3, r2, r3
 8002998:	2b64      	cmp	r3, #100	; 0x64
 800299a:	d903      	bls.n	80029a4 <HAL_RCCEx_PeriphCLKConfig+0x88c>
      {
        ret = HAL_TIMEOUT;
 800299c:	2303      	movs	r3, #3
 800299e:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 80029a2:	e005      	b.n	80029b0 <HAL_RCCEx_PeriphCLKConfig+0x898>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80029a4:	4b34      	ldr	r3, [pc, #208]	; (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d0ed      	beq.n	800298c <HAL_RCCEx_PeriphCLKConfig+0x874>
      }
    }

    if (ret == HAL_OK)
 80029b0:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d17a      	bne.n	8002aae <HAL_RCCEx_PeriphCLKConfig+0x996>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80029b8:	4b2e      	ldr	r3, [pc, #184]	; (8002a74 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80029ba:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80029bc:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80029c0:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80029c4:	4053      	eors	r3, r2
 80029c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d015      	beq.n	80029fa <HAL_RCCEx_PeriphCLKConfig+0x8e2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80029ce:	4b29      	ldr	r3, [pc, #164]	; (8002a74 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80029d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80029d6:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80029da:	4b26      	ldr	r3, [pc, #152]	; (8002a74 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80029dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029de:	4a25      	ldr	r2, [pc, #148]	; (8002a74 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80029e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029e4:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80029e6:	4b23      	ldr	r3, [pc, #140]	; (8002a74 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80029e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029ea:	4a22      	ldr	r2, [pc, #136]	; (8002a74 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80029ec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80029f0:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80029f2:	4a20      	ldr	r2, [pc, #128]	; (8002a74 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80029f4:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80029f8:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80029fa:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80029fe:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8002a02:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002a06:	d118      	bne.n	8002a3a <HAL_RCCEx_PeriphCLKConfig+0x922>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a08:	f7fe f8dc 	bl	8000bc4 <HAL_GetTick>
 8002a0c:	f8c7 0128 	str.w	r0, [r7, #296]	; 0x128

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002a10:	e00d      	b.n	8002a2e <HAL_RCCEx_PeriphCLKConfig+0x916>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a12:	f7fe f8d7 	bl	8000bc4 <HAL_GetTick>
 8002a16:	4602      	mov	r2, r0
 8002a18:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8002a1c:	1ad2      	subs	r2, r2, r3
 8002a1e:	f241 3388 	movw	r3, #5000	; 0x1388
 8002a22:	429a      	cmp	r2, r3
 8002a24:	d903      	bls.n	8002a2e <HAL_RCCEx_PeriphCLKConfig+0x916>
          {
            ret = HAL_TIMEOUT;
 8002a26:	2303      	movs	r3, #3
 8002a28:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
            break;
 8002a2c:	e005      	b.n	8002a3a <HAL_RCCEx_PeriphCLKConfig+0x922>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002a2e:	4b11      	ldr	r3, [pc, #68]	; (8002a74 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8002a30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a32:	f003 0302 	and.w	r3, r3, #2
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d0eb      	beq.n	8002a12 <HAL_RCCEx_PeriphCLKConfig+0x8fa>
          }
        }
      }

      if (ret == HAL_OK)
 8002a3a:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d130      	bne.n	8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x98c>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002a42:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002a46:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8002a4a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a4e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002a52:	d115      	bne.n	8002a80 <HAL_RCCEx_PeriphCLKConfig+0x968>
 8002a54:	4b07      	ldr	r3, [pc, #28]	; (8002a74 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8002a56:	691b      	ldr	r3, [r3, #16]
 8002a58:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8002a5c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002a60:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8002a64:	091a      	lsrs	r2, r3, #4
 8002a66:	4b05      	ldr	r3, [pc, #20]	; (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x964>)
 8002a68:	4013      	ands	r3, r2
 8002a6a:	4a02      	ldr	r2, [pc, #8]	; (8002a74 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8002a6c:	430b      	orrs	r3, r1
 8002a6e:	6113      	str	r3, [r2, #16]
 8002a70:	e00c      	b.n	8002a8c <HAL_RCCEx_PeriphCLKConfig+0x974>
 8002a72:	bf00      	nop
 8002a74:	58024400 	.word	0x58024400
 8002a78:	58024800 	.word	0x58024800
 8002a7c:	00ffffcf 	.word	0x00ffffcf
 8002a80:	4bd4      	ldr	r3, [pc, #848]	; (8002dd4 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8002a82:	691b      	ldr	r3, [r3, #16]
 8002a84:	4ad3      	ldr	r2, [pc, #844]	; (8002dd4 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8002a86:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8002a8a:	6113      	str	r3, [r2, #16]
 8002a8c:	4bd1      	ldr	r3, [pc, #836]	; (8002dd4 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8002a8e:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8002a90:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002a94:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8002a98:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a9c:	4acd      	ldr	r2, [pc, #820]	; (8002dd4 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8002a9e:	430b      	orrs	r3, r1
 8002aa0:	6713      	str	r3, [r2, #112]	; 0x70
 8002aa2:	e008      	b.n	8002ab6 <HAL_RCCEx_PeriphCLKConfig+0x99e>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002aa4:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8002aa8:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
 8002aac:	e003      	b.n	8002ab6 <HAL_RCCEx_PeriphCLKConfig+0x99e>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002aae:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8002ab2:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8002ab6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002aba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002abe:	f002 0301 	and.w	r3, r2, #1
 8002ac2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002acc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002ad0:	460b      	mov	r3, r1
 8002ad2:	4313      	orrs	r3, r2
 8002ad4:	f000 808b 	beq.w	8002bee <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8002ad8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002adc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002ae0:	2b28      	cmp	r3, #40	; 0x28
 8002ae2:	d86b      	bhi.n	8002bbc <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 8002ae4:	a201      	add	r2, pc, #4	; (adr r2, 8002aec <HAL_RCCEx_PeriphCLKConfig+0x9d4>)
 8002ae6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002aea:	bf00      	nop
 8002aec:	08002bc5 	.word	0x08002bc5
 8002af0:	08002bbd 	.word	0x08002bbd
 8002af4:	08002bbd 	.word	0x08002bbd
 8002af8:	08002bbd 	.word	0x08002bbd
 8002afc:	08002bbd 	.word	0x08002bbd
 8002b00:	08002bbd 	.word	0x08002bbd
 8002b04:	08002bbd 	.word	0x08002bbd
 8002b08:	08002bbd 	.word	0x08002bbd
 8002b0c:	08002b91 	.word	0x08002b91
 8002b10:	08002bbd 	.word	0x08002bbd
 8002b14:	08002bbd 	.word	0x08002bbd
 8002b18:	08002bbd 	.word	0x08002bbd
 8002b1c:	08002bbd 	.word	0x08002bbd
 8002b20:	08002bbd 	.word	0x08002bbd
 8002b24:	08002bbd 	.word	0x08002bbd
 8002b28:	08002bbd 	.word	0x08002bbd
 8002b2c:	08002ba7 	.word	0x08002ba7
 8002b30:	08002bbd 	.word	0x08002bbd
 8002b34:	08002bbd 	.word	0x08002bbd
 8002b38:	08002bbd 	.word	0x08002bbd
 8002b3c:	08002bbd 	.word	0x08002bbd
 8002b40:	08002bbd 	.word	0x08002bbd
 8002b44:	08002bbd 	.word	0x08002bbd
 8002b48:	08002bbd 	.word	0x08002bbd
 8002b4c:	08002bc5 	.word	0x08002bc5
 8002b50:	08002bbd 	.word	0x08002bbd
 8002b54:	08002bbd 	.word	0x08002bbd
 8002b58:	08002bbd 	.word	0x08002bbd
 8002b5c:	08002bbd 	.word	0x08002bbd
 8002b60:	08002bbd 	.word	0x08002bbd
 8002b64:	08002bbd 	.word	0x08002bbd
 8002b68:	08002bbd 	.word	0x08002bbd
 8002b6c:	08002bc5 	.word	0x08002bc5
 8002b70:	08002bbd 	.word	0x08002bbd
 8002b74:	08002bbd 	.word	0x08002bbd
 8002b78:	08002bbd 	.word	0x08002bbd
 8002b7c:	08002bbd 	.word	0x08002bbd
 8002b80:	08002bbd 	.word	0x08002bbd
 8002b84:	08002bbd 	.word	0x08002bbd
 8002b88:	08002bbd 	.word	0x08002bbd
 8002b8c:	08002bc5 	.word	0x08002bc5
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002b90:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002b94:	3308      	adds	r3, #8
 8002b96:	2101      	movs	r1, #1
 8002b98:	4618      	mov	r0, r3
 8002b9a:	f000 fd07 	bl	80035ac <RCCEx_PLL2_Config>
 8002b9e:	4603      	mov	r3, r0
 8002ba0:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8002ba4:	e00f      	b.n	8002bc6 <HAL_RCCEx_PeriphCLKConfig+0xaae>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002ba6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002baa:	3328      	adds	r3, #40	; 0x28
 8002bac:	2101      	movs	r1, #1
 8002bae:	4618      	mov	r0, r3
 8002bb0:	f000 fdae 	bl	8003710 <RCCEx_PLL3_Config>
 8002bb4:	4603      	mov	r3, r0
 8002bb6:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8002bba:	e004      	b.n	8002bc6 <HAL_RCCEx_PeriphCLKConfig+0xaae>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002bbc:	2301      	movs	r3, #1
 8002bbe:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8002bc2:	e000      	b.n	8002bc6 <HAL_RCCEx_PeriphCLKConfig+0xaae>
        break;
 8002bc4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002bc6:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d10b      	bne.n	8002be6 <HAL_RCCEx_PeriphCLKConfig+0xace>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8002bce:	4b81      	ldr	r3, [pc, #516]	; (8002dd4 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8002bd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bd2:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8002bd6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002bda:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002bde:	4a7d      	ldr	r2, [pc, #500]	; (8002dd4 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8002be0:	430b      	orrs	r3, r1
 8002be2:	6553      	str	r3, [r2, #84]	; 0x54
 8002be4:	e003      	b.n	8002bee <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002be6:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8002bea:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8002bee:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002bf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bf6:	f002 0302 	and.w	r3, r2, #2
 8002bfa:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002bfe:	2300      	movs	r3, #0
 8002c00:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8002c04:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8002c08:	460b      	mov	r3, r1
 8002c0a:	4313      	orrs	r3, r2
 8002c0c:	d042      	beq.n	8002c94 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8002c0e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002c12:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002c14:	2b05      	cmp	r3, #5
 8002c16:	d825      	bhi.n	8002c64 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
 8002c18:	a201      	add	r2, pc, #4	; (adr r2, 8002c20 <HAL_RCCEx_PeriphCLKConfig+0xb08>)
 8002c1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c1e:	bf00      	nop
 8002c20:	08002c6d 	.word	0x08002c6d
 8002c24:	08002c39 	.word	0x08002c39
 8002c28:	08002c4f 	.word	0x08002c4f
 8002c2c:	08002c6d 	.word	0x08002c6d
 8002c30:	08002c6d 	.word	0x08002c6d
 8002c34:	08002c6d 	.word	0x08002c6d
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002c38:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002c3c:	3308      	adds	r3, #8
 8002c3e:	2101      	movs	r1, #1
 8002c40:	4618      	mov	r0, r3
 8002c42:	f000 fcb3 	bl	80035ac <RCCEx_PLL2_Config>
 8002c46:	4603      	mov	r3, r0
 8002c48:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8002c4c:	e00f      	b.n	8002c6e <HAL_RCCEx_PeriphCLKConfig+0xb56>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002c4e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002c52:	3328      	adds	r3, #40	; 0x28
 8002c54:	2101      	movs	r1, #1
 8002c56:	4618      	mov	r0, r3
 8002c58:	f000 fd5a 	bl	8003710 <RCCEx_PLL3_Config>
 8002c5c:	4603      	mov	r3, r0
 8002c5e:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8002c62:	e004      	b.n	8002c6e <HAL_RCCEx_PeriphCLKConfig+0xb56>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002c64:	2301      	movs	r3, #1
 8002c66:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8002c6a:	e000      	b.n	8002c6e <HAL_RCCEx_PeriphCLKConfig+0xb56>
        break;
 8002c6c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002c6e:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d10a      	bne.n	8002c8c <HAL_RCCEx_PeriphCLKConfig+0xb74>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8002c76:	4b57      	ldr	r3, [pc, #348]	; (8002dd4 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8002c78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c7a:	f023 0107 	bic.w	r1, r3, #7
 8002c7e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002c82:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002c84:	4a53      	ldr	r2, [pc, #332]	; (8002dd4 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8002c86:	430b      	orrs	r3, r1
 8002c88:	6553      	str	r3, [r2, #84]	; 0x54
 8002c8a:	e003      	b.n	8002c94 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c8c:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8002c90:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002c94:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002c98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c9c:	f002 0304 	and.w	r3, r2, #4
 8002ca0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002ca4:	2300      	movs	r3, #0
 8002ca6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002caa:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8002cae:	460b      	mov	r3, r1
 8002cb0:	4313      	orrs	r3, r2
 8002cb2:	d044      	beq.n	8002d3e <HAL_RCCEx_PeriphCLKConfig+0xc26>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8002cb4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002cb8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002cbc:	2b05      	cmp	r3, #5
 8002cbe:	d825      	bhi.n	8002d0c <HAL_RCCEx_PeriphCLKConfig+0xbf4>
 8002cc0:	a201      	add	r2, pc, #4	; (adr r2, 8002cc8 <HAL_RCCEx_PeriphCLKConfig+0xbb0>)
 8002cc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cc6:	bf00      	nop
 8002cc8:	08002d15 	.word	0x08002d15
 8002ccc:	08002ce1 	.word	0x08002ce1
 8002cd0:	08002cf7 	.word	0x08002cf7
 8002cd4:	08002d15 	.word	0x08002d15
 8002cd8:	08002d15 	.word	0x08002d15
 8002cdc:	08002d15 	.word	0x08002d15
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002ce0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002ce4:	3308      	adds	r3, #8
 8002ce6:	2101      	movs	r1, #1
 8002ce8:	4618      	mov	r0, r3
 8002cea:	f000 fc5f 	bl	80035ac <RCCEx_PLL2_Config>
 8002cee:	4603      	mov	r3, r0
 8002cf0:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8002cf4:	e00f      	b.n	8002d16 <HAL_RCCEx_PeriphCLKConfig+0xbfe>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002cf6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002cfa:	3328      	adds	r3, #40	; 0x28
 8002cfc:	2101      	movs	r1, #1
 8002cfe:	4618      	mov	r0, r3
 8002d00:	f000 fd06 	bl	8003710 <RCCEx_PLL3_Config>
 8002d04:	4603      	mov	r3, r0
 8002d06:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8002d0a:	e004      	b.n	8002d16 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002d0c:	2301      	movs	r3, #1
 8002d0e:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8002d12:	e000      	b.n	8002d16 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
        break;
 8002d14:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002d16:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d10b      	bne.n	8002d36 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002d1e:	4b2d      	ldr	r3, [pc, #180]	; (8002dd4 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8002d20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d22:	f023 0107 	bic.w	r1, r3, #7
 8002d26:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002d2a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002d2e:	4a29      	ldr	r2, [pc, #164]	; (8002dd4 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8002d30:	430b      	orrs	r3, r1
 8002d32:	6593      	str	r3, [r2, #88]	; 0x58
 8002d34:	e003      	b.n	8002d3e <HAL_RCCEx_PeriphCLKConfig+0xc26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d36:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8002d3a:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002d3e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002d42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d46:	f002 0320 	and.w	r3, r2, #32
 8002d4a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002d4e:	2300      	movs	r3, #0
 8002d50:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002d54:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002d58:	460b      	mov	r3, r1
 8002d5a:	4313      	orrs	r3, r2
 8002d5c:	d057      	beq.n	8002e0e <HAL_RCCEx_PeriphCLKConfig+0xcf6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8002d5e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002d62:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d66:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002d6a:	d035      	beq.n	8002dd8 <HAL_RCCEx_PeriphCLKConfig+0xcc0>
 8002d6c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002d70:	d82c      	bhi.n	8002dcc <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 8002d72:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d76:	d031      	beq.n	8002ddc <HAL_RCCEx_PeriphCLKConfig+0xcc4>
 8002d78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d7c:	d826      	bhi.n	8002dcc <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 8002d7e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002d82:	d02d      	beq.n	8002de0 <HAL_RCCEx_PeriphCLKConfig+0xcc8>
 8002d84:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002d88:	d820      	bhi.n	8002dcc <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 8002d8a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002d8e:	d012      	beq.n	8002db6 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
 8002d90:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002d94:	d81a      	bhi.n	8002dcc <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d024      	beq.n	8002de4 <HAL_RCCEx_PeriphCLKConfig+0xccc>
 8002d9a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002d9e:	d115      	bne.n	8002dcc <HAL_RCCEx_PeriphCLKConfig+0xcb4>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002da0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002da4:	3308      	adds	r3, #8
 8002da6:	2100      	movs	r1, #0
 8002da8:	4618      	mov	r0, r3
 8002daa:	f000 fbff 	bl	80035ac <RCCEx_PLL2_Config>
 8002dae:	4603      	mov	r3, r0
 8002db0:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8002db4:	e017      	b.n	8002de6 <HAL_RCCEx_PeriphCLKConfig+0xcce>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8002db6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002dba:	3328      	adds	r3, #40	; 0x28
 8002dbc:	2102      	movs	r1, #2
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	f000 fca6 	bl	8003710 <RCCEx_PLL3_Config>
 8002dc4:	4603      	mov	r3, r0
 8002dc6:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8002dca:	e00c      	b.n	8002de6 <HAL_RCCEx_PeriphCLKConfig+0xcce>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002dcc:	2301      	movs	r3, #1
 8002dce:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8002dd2:	e008      	b.n	8002de6 <HAL_RCCEx_PeriphCLKConfig+0xcce>
 8002dd4:	58024400 	.word	0x58024400
        break;
 8002dd8:	bf00      	nop
 8002dda:	e004      	b.n	8002de6 <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 8002ddc:	bf00      	nop
 8002dde:	e002      	b.n	8002de6 <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 8002de0:	bf00      	nop
 8002de2:	e000      	b.n	8002de6 <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 8002de4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002de6:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d10b      	bne.n	8002e06 <HAL_RCCEx_PeriphCLKConfig+0xcee>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002dee:	4bc2      	ldr	r3, [pc, #776]	; (80030f8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8002df0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002df2:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8002df6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002dfa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002dfe:	4abe      	ldr	r2, [pc, #760]	; (80030f8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8002e00:	430b      	orrs	r3, r1
 8002e02:	6553      	str	r3, [r2, #84]	; 0x54
 8002e04:	e003      	b.n	8002e0e <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e06:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8002e0a:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8002e0e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002e12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e16:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8002e1a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002e1e:	2300      	movs	r3, #0
 8002e20:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8002e24:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8002e28:	460b      	mov	r3, r1
 8002e2a:	4313      	orrs	r3, r2
 8002e2c:	d055      	beq.n	8002eda <HAL_RCCEx_PeriphCLKConfig+0xdc2>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8002e2e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002e32:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8002e36:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8002e3a:	d033      	beq.n	8002ea4 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
 8002e3c:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8002e40:	d82c      	bhi.n	8002e9c <HAL_RCCEx_PeriphCLKConfig+0xd84>
 8002e42:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e46:	d02f      	beq.n	8002ea8 <HAL_RCCEx_PeriphCLKConfig+0xd90>
 8002e48:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e4c:	d826      	bhi.n	8002e9c <HAL_RCCEx_PeriphCLKConfig+0xd84>
 8002e4e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002e52:	d02b      	beq.n	8002eac <HAL_RCCEx_PeriphCLKConfig+0xd94>
 8002e54:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002e58:	d820      	bhi.n	8002e9c <HAL_RCCEx_PeriphCLKConfig+0xd84>
 8002e5a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002e5e:	d012      	beq.n	8002e86 <HAL_RCCEx_PeriphCLKConfig+0xd6e>
 8002e60:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002e64:	d81a      	bhi.n	8002e9c <HAL_RCCEx_PeriphCLKConfig+0xd84>
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d022      	beq.n	8002eb0 <HAL_RCCEx_PeriphCLKConfig+0xd98>
 8002e6a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e6e:	d115      	bne.n	8002e9c <HAL_RCCEx_PeriphCLKConfig+0xd84>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002e70:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002e74:	3308      	adds	r3, #8
 8002e76:	2100      	movs	r1, #0
 8002e78:	4618      	mov	r0, r3
 8002e7a:	f000 fb97 	bl	80035ac <RCCEx_PLL2_Config>
 8002e7e:	4603      	mov	r3, r0
 8002e80:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8002e84:	e015      	b.n	8002eb2 <HAL_RCCEx_PeriphCLKConfig+0xd9a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8002e86:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002e8a:	3328      	adds	r3, #40	; 0x28
 8002e8c:	2102      	movs	r1, #2
 8002e8e:	4618      	mov	r0, r3
 8002e90:	f000 fc3e 	bl	8003710 <RCCEx_PLL3_Config>
 8002e94:	4603      	mov	r3, r0
 8002e96:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8002e9a:	e00a      	b.n	8002eb2 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002e9c:	2301      	movs	r3, #1
 8002e9e:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8002ea2:	e006      	b.n	8002eb2 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 8002ea4:	bf00      	nop
 8002ea6:	e004      	b.n	8002eb2 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 8002ea8:	bf00      	nop
 8002eaa:	e002      	b.n	8002eb2 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 8002eac:	bf00      	nop
 8002eae:	e000      	b.n	8002eb2 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 8002eb0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002eb2:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d10b      	bne.n	8002ed2 <HAL_RCCEx_PeriphCLKConfig+0xdba>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002eba:	4b8f      	ldr	r3, [pc, #572]	; (80030f8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8002ebc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ebe:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 8002ec2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002ec6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8002eca:	4a8b      	ldr	r2, [pc, #556]	; (80030f8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8002ecc:	430b      	orrs	r3, r1
 8002ece:	6593      	str	r3, [r2, #88]	; 0x58
 8002ed0:	e003      	b.n	8002eda <HAL_RCCEx_PeriphCLKConfig+0xdc2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ed2:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8002ed6:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8002eda:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002ede:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ee2:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8002ee6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002eea:	2300      	movs	r3, #0
 8002eec:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002ef0:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8002ef4:	460b      	mov	r3, r1
 8002ef6:	4313      	orrs	r3, r2
 8002ef8:	d055      	beq.n	8002fa6 <HAL_RCCEx_PeriphCLKConfig+0xe8e>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8002efa:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002efe:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8002f02:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8002f06:	d033      	beq.n	8002f70 <HAL_RCCEx_PeriphCLKConfig+0xe58>
 8002f08:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8002f0c:	d82c      	bhi.n	8002f68 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 8002f0e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002f12:	d02f      	beq.n	8002f74 <HAL_RCCEx_PeriphCLKConfig+0xe5c>
 8002f14:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002f18:	d826      	bhi.n	8002f68 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 8002f1a:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8002f1e:	d02b      	beq.n	8002f78 <HAL_RCCEx_PeriphCLKConfig+0xe60>
 8002f20:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8002f24:	d820      	bhi.n	8002f68 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 8002f26:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002f2a:	d012      	beq.n	8002f52 <HAL_RCCEx_PeriphCLKConfig+0xe3a>
 8002f2c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002f30:	d81a      	bhi.n	8002f68 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d022      	beq.n	8002f7c <HAL_RCCEx_PeriphCLKConfig+0xe64>
 8002f36:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002f3a:	d115      	bne.n	8002f68 <HAL_RCCEx_PeriphCLKConfig+0xe50>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002f3c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002f40:	3308      	adds	r3, #8
 8002f42:	2100      	movs	r1, #0
 8002f44:	4618      	mov	r0, r3
 8002f46:	f000 fb31 	bl	80035ac <RCCEx_PLL2_Config>
 8002f4a:	4603      	mov	r3, r0
 8002f4c:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8002f50:	e015      	b.n	8002f7e <HAL_RCCEx_PeriphCLKConfig+0xe66>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8002f52:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002f56:	3328      	adds	r3, #40	; 0x28
 8002f58:	2102      	movs	r1, #2
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	f000 fbd8 	bl	8003710 <RCCEx_PLL3_Config>
 8002f60:	4603      	mov	r3, r0
 8002f62:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8002f66:	e00a      	b.n	8002f7e <HAL_RCCEx_PeriphCLKConfig+0xe66>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002f68:	2301      	movs	r3, #1
 8002f6a:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8002f6e:	e006      	b.n	8002f7e <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 8002f70:	bf00      	nop
 8002f72:	e004      	b.n	8002f7e <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 8002f74:	bf00      	nop
 8002f76:	e002      	b.n	8002f7e <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 8002f78:	bf00      	nop
 8002f7a:	e000      	b.n	8002f7e <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 8002f7c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002f7e:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d10b      	bne.n	8002f9e <HAL_RCCEx_PeriphCLKConfig+0xe86>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8002f86:	4b5c      	ldr	r3, [pc, #368]	; (80030f8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8002f88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f8a:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8002f8e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002f92:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8002f96:	4a58      	ldr	r2, [pc, #352]	; (80030f8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8002f98:	430b      	orrs	r3, r1
 8002f9a:	6593      	str	r3, [r2, #88]	; 0x58
 8002f9c:	e003      	b.n	8002fa6 <HAL_RCCEx_PeriphCLKConfig+0xe8e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f9e:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8002fa2:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8002fa6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002faa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fae:	f002 0308 	and.w	r3, r2, #8
 8002fb2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002fbc:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8002fc0:	460b      	mov	r3, r1
 8002fc2:	4313      	orrs	r3, r2
 8002fc4:	d01e      	beq.n	8003004 <HAL_RCCEx_PeriphCLKConfig+0xeec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8002fc6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002fca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002fd2:	d10c      	bne.n	8002fee <HAL_RCCEx_PeriphCLKConfig+0xed6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8002fd4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002fd8:	3328      	adds	r3, #40	; 0x28
 8002fda:	2102      	movs	r1, #2
 8002fdc:	4618      	mov	r0, r3
 8002fde:	f000 fb97 	bl	8003710 <RCCEx_PLL3_Config>
 8002fe2:	4603      	mov	r3, r0
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d002      	beq.n	8002fee <HAL_RCCEx_PeriphCLKConfig+0xed6>
      {
        status = HAL_ERROR;
 8002fe8:	2301      	movs	r3, #1
 8002fea:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8002fee:	4b42      	ldr	r3, [pc, #264]	; (80030f8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8002ff0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ff2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002ff6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002ffa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ffe:	4a3e      	ldr	r2, [pc, #248]	; (80030f8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003000:	430b      	orrs	r3, r1
 8003002:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003004:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003008:	e9d3 2300 	ldrd	r2, r3, [r3]
 800300c:	f002 0310 	and.w	r3, r2, #16
 8003010:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003014:	2300      	movs	r3, #0
 8003016:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800301a:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 800301e:	460b      	mov	r3, r1
 8003020:	4313      	orrs	r3, r2
 8003022:	d01e      	beq.n	8003062 <HAL_RCCEx_PeriphCLKConfig+0xf4a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8003024:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003028:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800302c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003030:	d10c      	bne.n	800304c <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003032:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003036:	3328      	adds	r3, #40	; 0x28
 8003038:	2102      	movs	r1, #2
 800303a:	4618      	mov	r0, r3
 800303c:	f000 fb68 	bl	8003710 <RCCEx_PLL3_Config>
 8003040:	4603      	mov	r3, r0
 8003042:	2b00      	cmp	r3, #0
 8003044:	d002      	beq.n	800304c <HAL_RCCEx_PeriphCLKConfig+0xf34>
      {
        status = HAL_ERROR;
 8003046:	2301      	movs	r3, #1
 8003048:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800304c:	4b2a      	ldr	r3, [pc, #168]	; (80030f8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800304e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003050:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003054:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003058:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800305c:	4a26      	ldr	r2, [pc, #152]	; (80030f8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800305e:	430b      	orrs	r3, r1
 8003060:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003062:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003066:	e9d3 2300 	ldrd	r2, r3, [r3]
 800306a:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 800306e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003072:	2300      	movs	r3, #0
 8003074:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003078:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800307c:	460b      	mov	r3, r1
 800307e:	4313      	orrs	r3, r2
 8003080:	d040      	beq.n	8003104 <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8003082:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003086:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800308a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800308e:	d022      	beq.n	80030d6 <HAL_RCCEx_PeriphCLKConfig+0xfbe>
 8003090:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003094:	d81b      	bhi.n	80030ce <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8003096:	2b00      	cmp	r3, #0
 8003098:	d003      	beq.n	80030a2 <HAL_RCCEx_PeriphCLKConfig+0xf8a>
 800309a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800309e:	d00b      	beq.n	80030b8 <HAL_RCCEx_PeriphCLKConfig+0xfa0>
 80030a0:	e015      	b.n	80030ce <HAL_RCCEx_PeriphCLKConfig+0xfb6>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80030a2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80030a6:	3308      	adds	r3, #8
 80030a8:	2100      	movs	r1, #0
 80030aa:	4618      	mov	r0, r3
 80030ac:	f000 fa7e 	bl	80035ac <RCCEx_PLL2_Config>
 80030b0:	4603      	mov	r3, r0
 80030b2:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* ADC clock source configuration done later after clock selection check */
        break;
 80030b6:	e00f      	b.n	80030d8 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80030b8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80030bc:	3328      	adds	r3, #40	; 0x28
 80030be:	2102      	movs	r1, #2
 80030c0:	4618      	mov	r0, r3
 80030c2:	f000 fb25 	bl	8003710 <RCCEx_PLL3_Config>
 80030c6:	4603      	mov	r3, r0
 80030c8:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* ADC clock source configuration done later after clock selection check */
        break;
 80030cc:	e004      	b.n	80030d8 <HAL_RCCEx_PeriphCLKConfig+0xfc0>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80030ce:	2301      	movs	r3, #1
 80030d0:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 80030d4:	e000      	b.n	80030d8 <HAL_RCCEx_PeriphCLKConfig+0xfc0>
        break;
 80030d6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80030d8:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d10d      	bne.n	80030fc <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80030e0:	4b05      	ldr	r3, [pc, #20]	; (80030f8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80030e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030e4:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 80030e8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80030ec:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80030f0:	4a01      	ldr	r2, [pc, #4]	; (80030f8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80030f2:	430b      	orrs	r3, r1
 80030f4:	6593      	str	r3, [r2, #88]	; 0x58
 80030f6:	e005      	b.n	8003104 <HAL_RCCEx_PeriphCLKConfig+0xfec>
 80030f8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80030fc:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8003100:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003104:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003108:	e9d3 2300 	ldrd	r2, r3, [r3]
 800310c:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8003110:	67bb      	str	r3, [r7, #120]	; 0x78
 8003112:	2300      	movs	r3, #0
 8003114:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003116:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 800311a:	460b      	mov	r3, r1
 800311c:	4313      	orrs	r3, r2
 800311e:	d03b      	beq.n	8003198 <HAL_RCCEx_PeriphCLKConfig+0x1080>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8003120:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003124:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003128:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800312c:	d01f      	beq.n	800316e <HAL_RCCEx_PeriphCLKConfig+0x1056>
 800312e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003132:	d818      	bhi.n	8003166 <HAL_RCCEx_PeriphCLKConfig+0x104e>
 8003134:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003138:	d003      	beq.n	8003142 <HAL_RCCEx_PeriphCLKConfig+0x102a>
 800313a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800313e:	d007      	beq.n	8003150 <HAL_RCCEx_PeriphCLKConfig+0x1038>
 8003140:	e011      	b.n	8003166 <HAL_RCCEx_PeriphCLKConfig+0x104e>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003142:	4b64      	ldr	r3, [pc, #400]	; (80032d4 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8003144:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003146:	4a63      	ldr	r2, [pc, #396]	; (80032d4 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8003148:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800314c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800314e:	e00f      	b.n	8003170 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003150:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003154:	3328      	adds	r3, #40	; 0x28
 8003156:	2101      	movs	r1, #1
 8003158:	4618      	mov	r0, r3
 800315a:	f000 fad9 	bl	8003710 <RCCEx_PLL3_Config>
 800315e:	4603      	mov	r3, r0
 8003160:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* USB clock source configuration done later after clock selection check */
        break;
 8003164:	e004      	b.n	8003170 <HAL_RCCEx_PeriphCLKConfig+0x1058>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003166:	2301      	movs	r3, #1
 8003168:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 800316c:	e000      	b.n	8003170 <HAL_RCCEx_PeriphCLKConfig+0x1058>
        break;
 800316e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003170:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8003174:	2b00      	cmp	r3, #0
 8003176:	d10b      	bne.n	8003190 <HAL_RCCEx_PeriphCLKConfig+0x1078>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003178:	4b56      	ldr	r3, [pc, #344]	; (80032d4 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 800317a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800317c:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8003180:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003184:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003188:	4a52      	ldr	r2, [pc, #328]	; (80032d4 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 800318a:	430b      	orrs	r3, r1
 800318c:	6553      	str	r3, [r2, #84]	; 0x54
 800318e:	e003      	b.n	8003198 <HAL_RCCEx_PeriphCLKConfig+0x1080>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003190:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8003194:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8003198:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800319c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031a0:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 80031a4:	673b      	str	r3, [r7, #112]	; 0x70
 80031a6:	2300      	movs	r3, #0
 80031a8:	677b      	str	r3, [r7, #116]	; 0x74
 80031aa:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 80031ae:	460b      	mov	r3, r1
 80031b0:	4313      	orrs	r3, r2
 80031b2:	d031      	beq.n	8003218 <HAL_RCCEx_PeriphCLKConfig+0x1100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80031b4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80031b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d003      	beq.n	80031c6 <HAL_RCCEx_PeriphCLKConfig+0x10ae>
 80031be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80031c2:	d007      	beq.n	80031d4 <HAL_RCCEx_PeriphCLKConfig+0x10bc>
 80031c4:	e011      	b.n	80031ea <HAL_RCCEx_PeriphCLKConfig+0x10d2>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80031c6:	4b43      	ldr	r3, [pc, #268]	; (80032d4 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 80031c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031ca:	4a42      	ldr	r2, [pc, #264]	; (80032d4 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 80031cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80031d0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80031d2:	e00e      	b.n	80031f2 <HAL_RCCEx_PeriphCLKConfig+0x10da>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80031d4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80031d8:	3308      	adds	r3, #8
 80031da:	2102      	movs	r1, #2
 80031dc:	4618      	mov	r0, r3
 80031de:	f000 f9e5 	bl	80035ac <RCCEx_PLL2_Config>
 80031e2:	4603      	mov	r3, r0
 80031e4:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80031e8:	e003      	b.n	80031f2 <HAL_RCCEx_PeriphCLKConfig+0x10da>

      default:
        ret = HAL_ERROR;
 80031ea:	2301      	movs	r3, #1
 80031ec:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 80031f0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80031f2:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d10a      	bne.n	8003210 <HAL_RCCEx_PeriphCLKConfig+0x10f8>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80031fa:	4b36      	ldr	r3, [pc, #216]	; (80032d4 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 80031fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031fe:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003202:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003206:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003208:	4a32      	ldr	r2, [pc, #200]	; (80032d4 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 800320a:	430b      	orrs	r3, r1
 800320c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800320e:	e003      	b.n	8003218 <HAL_RCCEx_PeriphCLKConfig+0x1100>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003210:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8003214:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003218:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800321c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003220:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8003224:	66bb      	str	r3, [r7, #104]	; 0x68
 8003226:	2300      	movs	r3, #0
 8003228:	66fb      	str	r3, [r7, #108]	; 0x6c
 800322a:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800322e:	460b      	mov	r3, r1
 8003230:	4313      	orrs	r3, r2
 8003232:	d00c      	beq.n	800324e <HAL_RCCEx_PeriphCLKConfig+0x1136>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003234:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003238:	3328      	adds	r3, #40	; 0x28
 800323a:	2102      	movs	r1, #2
 800323c:	4618      	mov	r0, r3
 800323e:	f000 fa67 	bl	8003710 <RCCEx_PLL3_Config>
 8003242:	4603      	mov	r3, r0
 8003244:	2b00      	cmp	r3, #0
 8003246:	d002      	beq.n	800324e <HAL_RCCEx_PeriphCLKConfig+0x1136>
    {
      status = HAL_ERROR;
 8003248:	2301      	movs	r3, #1
 800324a:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800324e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003252:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003256:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800325a:	663b      	str	r3, [r7, #96]	; 0x60
 800325c:	2300      	movs	r3, #0
 800325e:	667b      	str	r3, [r7, #100]	; 0x64
 8003260:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8003264:	460b      	mov	r3, r1
 8003266:	4313      	orrs	r3, r2
 8003268:	d03a      	beq.n	80032e0 <HAL_RCCEx_PeriphCLKConfig+0x11c8>
  {

    switch (PeriphClkInit->RngClockSelection)
 800326a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800326e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003272:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003276:	d018      	beq.n	80032aa <HAL_RCCEx_PeriphCLKConfig+0x1192>
 8003278:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800327c:	d811      	bhi.n	80032a2 <HAL_RCCEx_PeriphCLKConfig+0x118a>
 800327e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003282:	d014      	beq.n	80032ae <HAL_RCCEx_PeriphCLKConfig+0x1196>
 8003284:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003288:	d80b      	bhi.n	80032a2 <HAL_RCCEx_PeriphCLKConfig+0x118a>
 800328a:	2b00      	cmp	r3, #0
 800328c:	d011      	beq.n	80032b2 <HAL_RCCEx_PeriphCLKConfig+0x119a>
 800328e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003292:	d106      	bne.n	80032a2 <HAL_RCCEx_PeriphCLKConfig+0x118a>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003294:	4b0f      	ldr	r3, [pc, #60]	; (80032d4 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8003296:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003298:	4a0e      	ldr	r2, [pc, #56]	; (80032d4 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 800329a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800329e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 80032a0:	e008      	b.n	80032b4 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80032a2:	2301      	movs	r3, #1
 80032a4:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 80032a8:	e004      	b.n	80032b4 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 80032aa:	bf00      	nop
 80032ac:	e002      	b.n	80032b4 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 80032ae:	bf00      	nop
 80032b0:	e000      	b.n	80032b4 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 80032b2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80032b4:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d10d      	bne.n	80032d8 <HAL_RCCEx_PeriphCLKConfig+0x11c0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80032bc:	4b05      	ldr	r3, [pc, #20]	; (80032d4 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 80032be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032c0:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80032c4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80032c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80032cc:	4a01      	ldr	r2, [pc, #4]	; (80032d4 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 80032ce:	430b      	orrs	r3, r1
 80032d0:	6553      	str	r3, [r2, #84]	; 0x54
 80032d2:	e005      	b.n	80032e0 <HAL_RCCEx_PeriphCLKConfig+0x11c8>
 80032d4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032d8:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80032dc:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80032e0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80032e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032e8:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 80032ec:	65bb      	str	r3, [r7, #88]	; 0x58
 80032ee:	2300      	movs	r3, #0
 80032f0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80032f2:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 80032f6:	460b      	mov	r3, r1
 80032f8:	4313      	orrs	r3, r2
 80032fa:	d009      	beq.n	8003310 <HAL_RCCEx_PeriphCLKConfig+0x11f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80032fc:	4baa      	ldr	r3, [pc, #680]	; (80035a8 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80032fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003300:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8003304:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003308:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800330a:	4aa7      	ldr	r2, [pc, #668]	; (80035a8 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 800330c:	430b      	orrs	r3, r1
 800330e:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8003310:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003314:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003318:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 800331c:	653b      	str	r3, [r7, #80]	; 0x50
 800331e:	2300      	movs	r3, #0
 8003320:	657b      	str	r3, [r7, #84]	; 0x54
 8003322:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8003326:	460b      	mov	r3, r1
 8003328:	4313      	orrs	r3, r2
 800332a:	d00a      	beq.n	8003342 <HAL_RCCEx_PeriphCLKConfig+0x122a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800332c:	4b9e      	ldr	r3, [pc, #632]	; (80035a8 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 800332e:	691b      	ldr	r3, [r3, #16]
 8003330:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 8003334:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003338:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800333c:	4a9a      	ldr	r2, [pc, #616]	; (80035a8 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 800333e:	430b      	orrs	r3, r1
 8003340:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003342:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003346:	e9d3 2300 	ldrd	r2, r3, [r3]
 800334a:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800334e:	64bb      	str	r3, [r7, #72]	; 0x48
 8003350:	2300      	movs	r3, #0
 8003352:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003354:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8003358:	460b      	mov	r3, r1
 800335a:	4313      	orrs	r3, r2
 800335c:	d009      	beq.n	8003372 <HAL_RCCEx_PeriphCLKConfig+0x125a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800335e:	4b92      	ldr	r3, [pc, #584]	; (80035a8 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8003360:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003362:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8003366:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800336a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800336c:	4a8e      	ldr	r2, [pc, #568]	; (80035a8 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 800336e:	430b      	orrs	r3, r1
 8003370:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8003372:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003376:	e9d3 2300 	ldrd	r2, r3, [r3]
 800337a:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 800337e:	643b      	str	r3, [r7, #64]	; 0x40
 8003380:	2300      	movs	r3, #0
 8003382:	647b      	str	r3, [r7, #68]	; 0x44
 8003384:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8003388:	460b      	mov	r3, r1
 800338a:	4313      	orrs	r3, r2
 800338c:	d00e      	beq.n	80033ac <HAL_RCCEx_PeriphCLKConfig+0x1294>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800338e:	4b86      	ldr	r3, [pc, #536]	; (80035a8 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8003390:	691b      	ldr	r3, [r3, #16]
 8003392:	4a85      	ldr	r2, [pc, #532]	; (80035a8 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8003394:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003398:	6113      	str	r3, [r2, #16]
 800339a:	4b83      	ldr	r3, [pc, #524]	; (80035a8 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 800339c:	6919      	ldr	r1, [r3, #16]
 800339e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80033a2:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80033a6:	4a80      	ldr	r2, [pc, #512]	; (80035a8 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80033a8:	430b      	orrs	r3, r1
 80033aa:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80033ac:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80033b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033b4:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 80033b8:	63bb      	str	r3, [r7, #56]	; 0x38
 80033ba:	2300      	movs	r3, #0
 80033bc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80033be:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 80033c2:	460b      	mov	r3, r1
 80033c4:	4313      	orrs	r3, r2
 80033c6:	d009      	beq.n	80033dc <HAL_RCCEx_PeriphCLKConfig+0x12c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80033c8:	4b77      	ldr	r3, [pc, #476]	; (80035a8 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80033ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80033cc:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 80033d0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80033d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033d6:	4a74      	ldr	r2, [pc, #464]	; (80035a8 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80033d8:	430b      	orrs	r3, r1
 80033da:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80033dc:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80033e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033e4:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 80033e8:	633b      	str	r3, [r7, #48]	; 0x30
 80033ea:	2300      	movs	r3, #0
 80033ec:	637b      	str	r3, [r7, #52]	; 0x34
 80033ee:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 80033f2:	460b      	mov	r3, r1
 80033f4:	4313      	orrs	r3, r2
 80033f6:	d00a      	beq.n	800340e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80033f8:	4b6b      	ldr	r3, [pc, #428]	; (80035a8 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80033fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033fc:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8003400:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003404:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003408:	4a67      	ldr	r2, [pc, #412]	; (80035a8 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 800340a:	430b      	orrs	r3, r1
 800340c:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800340e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003412:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003416:	2100      	movs	r1, #0
 8003418:	62b9      	str	r1, [r7, #40]	; 0x28
 800341a:	f003 0301 	and.w	r3, r3, #1
 800341e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003420:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8003424:	460b      	mov	r3, r1
 8003426:	4313      	orrs	r3, r2
 8003428:	d011      	beq.n	800344e <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800342a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800342e:	3308      	adds	r3, #8
 8003430:	2100      	movs	r1, #0
 8003432:	4618      	mov	r0, r3
 8003434:	f000 f8ba 	bl	80035ac <RCCEx_PLL2_Config>
 8003438:	4603      	mov	r3, r0
 800343a:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
    
    if (ret == HAL_OK)
 800343e:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8003442:	2b00      	cmp	r3, #0
 8003444:	d003      	beq.n	800344e <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003446:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800344a:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800344e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003452:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003456:	2100      	movs	r1, #0
 8003458:	6239      	str	r1, [r7, #32]
 800345a:	f003 0302 	and.w	r3, r3, #2
 800345e:	627b      	str	r3, [r7, #36]	; 0x24
 8003460:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8003464:	460b      	mov	r3, r1
 8003466:	4313      	orrs	r3, r2
 8003468:	d011      	beq.n	800348e <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800346a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800346e:	3308      	adds	r3, #8
 8003470:	2101      	movs	r1, #1
 8003472:	4618      	mov	r0, r3
 8003474:	f000 f89a 	bl	80035ac <RCCEx_PLL2_Config>
 8003478:	4603      	mov	r3, r0
 800347a:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
    
    if (ret == HAL_OK)
 800347e:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8003482:	2b00      	cmp	r3, #0
 8003484:	d003      	beq.n	800348e <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003486:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800348a:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800348e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003492:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003496:	2100      	movs	r1, #0
 8003498:	61b9      	str	r1, [r7, #24]
 800349a:	f003 0304 	and.w	r3, r3, #4
 800349e:	61fb      	str	r3, [r7, #28]
 80034a0:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80034a4:	460b      	mov	r3, r1
 80034a6:	4313      	orrs	r3, r2
 80034a8:	d011      	beq.n	80034ce <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80034aa:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80034ae:	3308      	adds	r3, #8
 80034b0:	2102      	movs	r1, #2
 80034b2:	4618      	mov	r0, r3
 80034b4:	f000 f87a 	bl	80035ac <RCCEx_PLL2_Config>
 80034b8:	4603      	mov	r3, r0
 80034ba:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
    
    if (ret == HAL_OK)
 80034be:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d003      	beq.n	80034ce <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034c6:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80034ca:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80034ce:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80034d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034d6:	2100      	movs	r1, #0
 80034d8:	6139      	str	r1, [r7, #16]
 80034da:	f003 0308 	and.w	r3, r3, #8
 80034de:	617b      	str	r3, [r7, #20]
 80034e0:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80034e4:	460b      	mov	r3, r1
 80034e6:	4313      	orrs	r3, r2
 80034e8:	d011      	beq.n	800350e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80034ea:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80034ee:	3328      	adds	r3, #40	; 0x28
 80034f0:	2100      	movs	r1, #0
 80034f2:	4618      	mov	r0, r3
 80034f4:	f000 f90c 	bl	8003710 <RCCEx_PLL3_Config>
 80034f8:	4603      	mov	r3, r0
 80034fa:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
  
    if (ret == HAL_OK)
 80034fe:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8003502:	2b00      	cmp	r3, #0
 8003504:	d003      	beq.n	800350e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003506:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800350a:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800350e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003512:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003516:	2100      	movs	r1, #0
 8003518:	60b9      	str	r1, [r7, #8]
 800351a:	f003 0310 	and.w	r3, r3, #16
 800351e:	60fb      	str	r3, [r7, #12]
 8003520:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8003524:	460b      	mov	r3, r1
 8003526:	4313      	orrs	r3, r2
 8003528:	d011      	beq.n	800354e <HAL_RCCEx_PeriphCLKConfig+0x1436>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800352a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800352e:	3328      	adds	r3, #40	; 0x28
 8003530:	2101      	movs	r1, #1
 8003532:	4618      	mov	r0, r3
 8003534:	f000 f8ec 	bl	8003710 <RCCEx_PLL3_Config>
 8003538:	4603      	mov	r3, r0
 800353a:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
    
    if (ret == HAL_OK)
 800353e:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8003542:	2b00      	cmp	r3, #0
 8003544:	d003      	beq.n	800354e <HAL_RCCEx_PeriphCLKConfig+0x1436>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003546:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800354a:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800354e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003552:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003556:	2100      	movs	r1, #0
 8003558:	6039      	str	r1, [r7, #0]
 800355a:	f003 0320 	and.w	r3, r3, #32
 800355e:	607b      	str	r3, [r7, #4]
 8003560:	e9d7 1200 	ldrd	r1, r2, [r7]
 8003564:	460b      	mov	r3, r1
 8003566:	4313      	orrs	r3, r2
 8003568:	d011      	beq.n	800358e <HAL_RCCEx_PeriphCLKConfig+0x1476>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800356a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800356e:	3328      	adds	r3, #40	; 0x28
 8003570:	2102      	movs	r1, #2
 8003572:	4618      	mov	r0, r3
 8003574:	f000 f8cc 	bl	8003710 <RCCEx_PLL3_Config>
 8003578:	4603      	mov	r3, r0
 800357a:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
    
    if (ret == HAL_OK)
 800357e:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8003582:	2b00      	cmp	r3, #0
 8003584:	d003      	beq.n	800358e <HAL_RCCEx_PeriphCLKConfig+0x1476>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003586:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800358a:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    } 
  }

  if (status == HAL_OK)
 800358e:	f897 312e 	ldrb.w	r3, [r7, #302]	; 0x12e
 8003592:	2b00      	cmp	r3, #0
 8003594:	d101      	bne.n	800359a <HAL_RCCEx_PeriphCLKConfig+0x1482>
  {
    return HAL_OK;
 8003596:	2300      	movs	r3, #0
 8003598:	e000      	b.n	800359c <HAL_RCCEx_PeriphCLKConfig+0x1484>
  }
  return HAL_ERROR;
 800359a:	2301      	movs	r3, #1
}
 800359c:	4618      	mov	r0, r3
 800359e:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80035a2:	46bd      	mov	sp, r7
 80035a4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80035a8:	58024400 	.word	0x58024400

080035ac <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80035ac:	b580      	push	{r7, lr}
 80035ae:	b084      	sub	sp, #16
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	6078      	str	r0, [r7, #4]
 80035b4:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80035b6:	2300      	movs	r3, #0
 80035b8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80035ba:	4b53      	ldr	r3, [pc, #332]	; (8003708 <RCCEx_PLL2_Config+0x15c>)
 80035bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035be:	f003 0303 	and.w	r3, r3, #3
 80035c2:	2b03      	cmp	r3, #3
 80035c4:	d101      	bne.n	80035ca <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80035c6:	2301      	movs	r3, #1
 80035c8:	e099      	b.n	80036fe <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80035ca:	4b4f      	ldr	r3, [pc, #316]	; (8003708 <RCCEx_PLL2_Config+0x15c>)
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	4a4e      	ldr	r2, [pc, #312]	; (8003708 <RCCEx_PLL2_Config+0x15c>)
 80035d0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80035d4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80035d6:	f7fd faf5 	bl	8000bc4 <HAL_GetTick>
 80035da:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80035dc:	e008      	b.n	80035f0 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80035de:	f7fd faf1 	bl	8000bc4 <HAL_GetTick>
 80035e2:	4602      	mov	r2, r0
 80035e4:	68bb      	ldr	r3, [r7, #8]
 80035e6:	1ad3      	subs	r3, r2, r3
 80035e8:	2b02      	cmp	r3, #2
 80035ea:	d901      	bls.n	80035f0 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80035ec:	2303      	movs	r3, #3
 80035ee:	e086      	b.n	80036fe <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80035f0:	4b45      	ldr	r3, [pc, #276]	; (8003708 <RCCEx_PLL2_Config+0x15c>)
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d1f0      	bne.n	80035de <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80035fc:	4b42      	ldr	r3, [pc, #264]	; (8003708 <RCCEx_PLL2_Config+0x15c>)
 80035fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003600:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	031b      	lsls	r3, r3, #12
 800360a:	493f      	ldr	r1, [pc, #252]	; (8003708 <RCCEx_PLL2_Config+0x15c>)
 800360c:	4313      	orrs	r3, r2
 800360e:	628b      	str	r3, [r1, #40]	; 0x28
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	685b      	ldr	r3, [r3, #4]
 8003614:	3b01      	subs	r3, #1
 8003616:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	689b      	ldr	r3, [r3, #8]
 800361e:	3b01      	subs	r3, #1
 8003620:	025b      	lsls	r3, r3, #9
 8003622:	b29b      	uxth	r3, r3
 8003624:	431a      	orrs	r2, r3
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	68db      	ldr	r3, [r3, #12]
 800362a:	3b01      	subs	r3, #1
 800362c:	041b      	lsls	r3, r3, #16
 800362e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003632:	431a      	orrs	r2, r3
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	691b      	ldr	r3, [r3, #16]
 8003638:	3b01      	subs	r3, #1
 800363a:	061b      	lsls	r3, r3, #24
 800363c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003640:	4931      	ldr	r1, [pc, #196]	; (8003708 <RCCEx_PLL2_Config+0x15c>)
 8003642:	4313      	orrs	r3, r2
 8003644:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8003646:	4b30      	ldr	r3, [pc, #192]	; (8003708 <RCCEx_PLL2_Config+0x15c>)
 8003648:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800364a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	695b      	ldr	r3, [r3, #20]
 8003652:	492d      	ldr	r1, [pc, #180]	; (8003708 <RCCEx_PLL2_Config+0x15c>)
 8003654:	4313      	orrs	r3, r2
 8003656:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8003658:	4b2b      	ldr	r3, [pc, #172]	; (8003708 <RCCEx_PLL2_Config+0x15c>)
 800365a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800365c:	f023 0220 	bic.w	r2, r3, #32
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	699b      	ldr	r3, [r3, #24]
 8003664:	4928      	ldr	r1, [pc, #160]	; (8003708 <RCCEx_PLL2_Config+0x15c>)
 8003666:	4313      	orrs	r3, r2
 8003668:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800366a:	4b27      	ldr	r3, [pc, #156]	; (8003708 <RCCEx_PLL2_Config+0x15c>)
 800366c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800366e:	4a26      	ldr	r2, [pc, #152]	; (8003708 <RCCEx_PLL2_Config+0x15c>)
 8003670:	f023 0310 	bic.w	r3, r3, #16
 8003674:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8003676:	4b24      	ldr	r3, [pc, #144]	; (8003708 <RCCEx_PLL2_Config+0x15c>)
 8003678:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800367a:	4b24      	ldr	r3, [pc, #144]	; (800370c <RCCEx_PLL2_Config+0x160>)
 800367c:	4013      	ands	r3, r2
 800367e:	687a      	ldr	r2, [r7, #4]
 8003680:	69d2      	ldr	r2, [r2, #28]
 8003682:	00d2      	lsls	r2, r2, #3
 8003684:	4920      	ldr	r1, [pc, #128]	; (8003708 <RCCEx_PLL2_Config+0x15c>)
 8003686:	4313      	orrs	r3, r2
 8003688:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800368a:	4b1f      	ldr	r3, [pc, #124]	; (8003708 <RCCEx_PLL2_Config+0x15c>)
 800368c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800368e:	4a1e      	ldr	r2, [pc, #120]	; (8003708 <RCCEx_PLL2_Config+0x15c>)
 8003690:	f043 0310 	orr.w	r3, r3, #16
 8003694:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8003696:	683b      	ldr	r3, [r7, #0]
 8003698:	2b00      	cmp	r3, #0
 800369a:	d106      	bne.n	80036aa <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800369c:	4b1a      	ldr	r3, [pc, #104]	; (8003708 <RCCEx_PLL2_Config+0x15c>)
 800369e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036a0:	4a19      	ldr	r2, [pc, #100]	; (8003708 <RCCEx_PLL2_Config+0x15c>)
 80036a2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80036a6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80036a8:	e00f      	b.n	80036ca <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80036aa:	683b      	ldr	r3, [r7, #0]
 80036ac:	2b01      	cmp	r3, #1
 80036ae:	d106      	bne.n	80036be <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80036b0:	4b15      	ldr	r3, [pc, #84]	; (8003708 <RCCEx_PLL2_Config+0x15c>)
 80036b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036b4:	4a14      	ldr	r2, [pc, #80]	; (8003708 <RCCEx_PLL2_Config+0x15c>)
 80036b6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80036ba:	62d3      	str	r3, [r2, #44]	; 0x2c
 80036bc:	e005      	b.n	80036ca <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80036be:	4b12      	ldr	r3, [pc, #72]	; (8003708 <RCCEx_PLL2_Config+0x15c>)
 80036c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036c2:	4a11      	ldr	r2, [pc, #68]	; (8003708 <RCCEx_PLL2_Config+0x15c>)
 80036c4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80036c8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80036ca:	4b0f      	ldr	r3, [pc, #60]	; (8003708 <RCCEx_PLL2_Config+0x15c>)
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	4a0e      	ldr	r2, [pc, #56]	; (8003708 <RCCEx_PLL2_Config+0x15c>)
 80036d0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80036d4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80036d6:	f7fd fa75 	bl	8000bc4 <HAL_GetTick>
 80036da:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80036dc:	e008      	b.n	80036f0 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80036de:	f7fd fa71 	bl	8000bc4 <HAL_GetTick>
 80036e2:	4602      	mov	r2, r0
 80036e4:	68bb      	ldr	r3, [r7, #8]
 80036e6:	1ad3      	subs	r3, r2, r3
 80036e8:	2b02      	cmp	r3, #2
 80036ea:	d901      	bls.n	80036f0 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80036ec:	2303      	movs	r3, #3
 80036ee:	e006      	b.n	80036fe <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80036f0:	4b05      	ldr	r3, [pc, #20]	; (8003708 <RCCEx_PLL2_Config+0x15c>)
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d0f0      	beq.n	80036de <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80036fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80036fe:	4618      	mov	r0, r3
 8003700:	3710      	adds	r7, #16
 8003702:	46bd      	mov	sp, r7
 8003704:	bd80      	pop	{r7, pc}
 8003706:	bf00      	nop
 8003708:	58024400 	.word	0x58024400
 800370c:	ffff0007 	.word	0xffff0007

08003710 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8003710:	b580      	push	{r7, lr}
 8003712:	b084      	sub	sp, #16
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]
 8003718:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800371a:	2300      	movs	r3, #0
 800371c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800371e:	4b53      	ldr	r3, [pc, #332]	; (800386c <RCCEx_PLL3_Config+0x15c>)
 8003720:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003722:	f003 0303 	and.w	r3, r3, #3
 8003726:	2b03      	cmp	r3, #3
 8003728:	d101      	bne.n	800372e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800372a:	2301      	movs	r3, #1
 800372c:	e099      	b.n	8003862 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800372e:	4b4f      	ldr	r3, [pc, #316]	; (800386c <RCCEx_PLL3_Config+0x15c>)
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	4a4e      	ldr	r2, [pc, #312]	; (800386c <RCCEx_PLL3_Config+0x15c>)
 8003734:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003738:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800373a:	f7fd fa43 	bl	8000bc4 <HAL_GetTick>
 800373e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003740:	e008      	b.n	8003754 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8003742:	f7fd fa3f 	bl	8000bc4 <HAL_GetTick>
 8003746:	4602      	mov	r2, r0
 8003748:	68bb      	ldr	r3, [r7, #8]
 800374a:	1ad3      	subs	r3, r2, r3
 800374c:	2b02      	cmp	r3, #2
 800374e:	d901      	bls.n	8003754 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8003750:	2303      	movs	r3, #3
 8003752:	e086      	b.n	8003862 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003754:	4b45      	ldr	r3, [pc, #276]	; (800386c <RCCEx_PLL3_Config+0x15c>)
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800375c:	2b00      	cmp	r3, #0
 800375e:	d1f0      	bne.n	8003742 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8003760:	4b42      	ldr	r3, [pc, #264]	; (800386c <RCCEx_PLL3_Config+0x15c>)
 8003762:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003764:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	051b      	lsls	r3, r3, #20
 800376e:	493f      	ldr	r1, [pc, #252]	; (800386c <RCCEx_PLL3_Config+0x15c>)
 8003770:	4313      	orrs	r3, r2
 8003772:	628b      	str	r3, [r1, #40]	; 0x28
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	685b      	ldr	r3, [r3, #4]
 8003778:	3b01      	subs	r3, #1
 800377a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	689b      	ldr	r3, [r3, #8]
 8003782:	3b01      	subs	r3, #1
 8003784:	025b      	lsls	r3, r3, #9
 8003786:	b29b      	uxth	r3, r3
 8003788:	431a      	orrs	r2, r3
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	68db      	ldr	r3, [r3, #12]
 800378e:	3b01      	subs	r3, #1
 8003790:	041b      	lsls	r3, r3, #16
 8003792:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003796:	431a      	orrs	r2, r3
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	691b      	ldr	r3, [r3, #16]
 800379c:	3b01      	subs	r3, #1
 800379e:	061b      	lsls	r3, r3, #24
 80037a0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80037a4:	4931      	ldr	r1, [pc, #196]	; (800386c <RCCEx_PLL3_Config+0x15c>)
 80037a6:	4313      	orrs	r3, r2
 80037a8:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80037aa:	4b30      	ldr	r3, [pc, #192]	; (800386c <RCCEx_PLL3_Config+0x15c>)
 80037ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037ae:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	695b      	ldr	r3, [r3, #20]
 80037b6:	492d      	ldr	r1, [pc, #180]	; (800386c <RCCEx_PLL3_Config+0x15c>)
 80037b8:	4313      	orrs	r3, r2
 80037ba:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80037bc:	4b2b      	ldr	r3, [pc, #172]	; (800386c <RCCEx_PLL3_Config+0x15c>)
 80037be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037c0:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	699b      	ldr	r3, [r3, #24]
 80037c8:	4928      	ldr	r1, [pc, #160]	; (800386c <RCCEx_PLL3_Config+0x15c>)
 80037ca:	4313      	orrs	r3, r2
 80037cc:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80037ce:	4b27      	ldr	r3, [pc, #156]	; (800386c <RCCEx_PLL3_Config+0x15c>)
 80037d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037d2:	4a26      	ldr	r2, [pc, #152]	; (800386c <RCCEx_PLL3_Config+0x15c>)
 80037d4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80037d8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80037da:	4b24      	ldr	r3, [pc, #144]	; (800386c <RCCEx_PLL3_Config+0x15c>)
 80037dc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80037de:	4b24      	ldr	r3, [pc, #144]	; (8003870 <RCCEx_PLL3_Config+0x160>)
 80037e0:	4013      	ands	r3, r2
 80037e2:	687a      	ldr	r2, [r7, #4]
 80037e4:	69d2      	ldr	r2, [r2, #28]
 80037e6:	00d2      	lsls	r2, r2, #3
 80037e8:	4920      	ldr	r1, [pc, #128]	; (800386c <RCCEx_PLL3_Config+0x15c>)
 80037ea:	4313      	orrs	r3, r2
 80037ec:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80037ee:	4b1f      	ldr	r3, [pc, #124]	; (800386c <RCCEx_PLL3_Config+0x15c>)
 80037f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037f2:	4a1e      	ldr	r2, [pc, #120]	; (800386c <RCCEx_PLL3_Config+0x15c>)
 80037f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80037f8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80037fa:	683b      	ldr	r3, [r7, #0]
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d106      	bne.n	800380e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8003800:	4b1a      	ldr	r3, [pc, #104]	; (800386c <RCCEx_PLL3_Config+0x15c>)
 8003802:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003804:	4a19      	ldr	r2, [pc, #100]	; (800386c <RCCEx_PLL3_Config+0x15c>)
 8003806:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800380a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800380c:	e00f      	b.n	800382e <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800380e:	683b      	ldr	r3, [r7, #0]
 8003810:	2b01      	cmp	r3, #1
 8003812:	d106      	bne.n	8003822 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8003814:	4b15      	ldr	r3, [pc, #84]	; (800386c <RCCEx_PLL3_Config+0x15c>)
 8003816:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003818:	4a14      	ldr	r2, [pc, #80]	; (800386c <RCCEx_PLL3_Config+0x15c>)
 800381a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800381e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003820:	e005      	b.n	800382e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8003822:	4b12      	ldr	r3, [pc, #72]	; (800386c <RCCEx_PLL3_Config+0x15c>)
 8003824:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003826:	4a11      	ldr	r2, [pc, #68]	; (800386c <RCCEx_PLL3_Config+0x15c>)
 8003828:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800382c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800382e:	4b0f      	ldr	r3, [pc, #60]	; (800386c <RCCEx_PLL3_Config+0x15c>)
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	4a0e      	ldr	r2, [pc, #56]	; (800386c <RCCEx_PLL3_Config+0x15c>)
 8003834:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003838:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800383a:	f7fd f9c3 	bl	8000bc4 <HAL_GetTick>
 800383e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8003840:	e008      	b.n	8003854 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8003842:	f7fd f9bf 	bl	8000bc4 <HAL_GetTick>
 8003846:	4602      	mov	r2, r0
 8003848:	68bb      	ldr	r3, [r7, #8]
 800384a:	1ad3      	subs	r3, r2, r3
 800384c:	2b02      	cmp	r3, #2
 800384e:	d901      	bls.n	8003854 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8003850:	2303      	movs	r3, #3
 8003852:	e006      	b.n	8003862 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8003854:	4b05      	ldr	r3, [pc, #20]	; (800386c <RCCEx_PLL3_Config+0x15c>)
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800385c:	2b00      	cmp	r3, #0
 800385e:	d0f0      	beq.n	8003842 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8003860:	7bfb      	ldrb	r3, [r7, #15]
}
 8003862:	4618      	mov	r0, r3
 8003864:	3710      	adds	r7, #16
 8003866:	46bd      	mov	sp, r7
 8003868:	bd80      	pop	{r7, pc}
 800386a:	bf00      	nop
 800386c:	58024400 	.word	0x58024400
 8003870:	ffff0007 	.word	0xffff0007

08003874 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 8003874:	b580      	push	{r7, lr}
 8003876:	b082      	sub	sp, #8
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]
 800387c:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	2b00      	cmp	r3, #0
 8003882:	d101      	bne.n	8003888 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8003884:	2301      	movs	r3, #1
 8003886:	e02b      	b.n	80038e0 <HAL_SDRAM_Init+0x6c>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800388e:	b2db      	uxtb	r3, r3
 8003890:	2b00      	cmp	r3, #0
 8003892:	d106      	bne.n	80038a2 <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	2200      	movs	r2, #0
 8003898:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 800389c:	6878      	ldr	r0, [r7, #4]
 800389e:	f7fc fef3 	bl	8000688 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	2202      	movs	r2, #2
 80038a6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681a      	ldr	r2, [r3, #0]
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	3304      	adds	r3, #4
 80038b2:	4619      	mov	r1, r3
 80038b4:	4610      	mov	r0, r2
 80038b6:	f000 f877 	bl	80039a8 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	6818      	ldr	r0, [r3, #0]
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	685b      	ldr	r3, [r3, #4]
 80038c2:	461a      	mov	r2, r3
 80038c4:	6839      	ldr	r1, [r7, #0]
 80038c6:	f000 f8cb 	bl	8003a60 <FMC_SDRAM_Timing_Init>

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
 80038ca:	4b07      	ldr	r3, [pc, #28]	; (80038e8 <HAL_SDRAM_Init+0x74>)
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	4a06      	ldr	r2, [pc, #24]	; (80038e8 <HAL_SDRAM_Init+0x74>)
 80038d0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80038d4:	6013      	str	r3, [r2, #0]
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	2201      	movs	r2, #1
 80038da:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 80038de:	2300      	movs	r3, #0
}
 80038e0:	4618      	mov	r0, r3
 80038e2:	3708      	adds	r7, #8
 80038e4:	46bd      	mov	sp, r7
 80038e6:	bd80      	pop	{r7, pc}
 80038e8:	52004000 	.word	0x52004000

080038ec <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 80038ec:	b580      	push	{r7, lr}
 80038ee:	b086      	sub	sp, #24
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	60f8      	str	r0, [r7, #12]
 80038f4:	60b9      	str	r1, [r7, #8]
 80038f6:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80038fe:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 8003900:	7dfb      	ldrb	r3, [r7, #23]
 8003902:	2b02      	cmp	r3, #2
 8003904:	d101      	bne.n	800390a <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
 8003906:	2302      	movs	r3, #2
 8003908:	e021      	b.n	800394e <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 800390a:	7dfb      	ldrb	r3, [r7, #23]
 800390c:	2b01      	cmp	r3, #1
 800390e:	d002      	beq.n	8003916 <HAL_SDRAM_SendCommand+0x2a>
 8003910:	7dfb      	ldrb	r3, [r7, #23]
 8003912:	2b05      	cmp	r3, #5
 8003914:	d118      	bne.n	8003948 <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	2202      	movs	r2, #2
 800391a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	687a      	ldr	r2, [r7, #4]
 8003924:	68b9      	ldr	r1, [r7, #8]
 8003926:	4618      	mov	r0, r3
 8003928:	f000 f904 	bl	8003b34 <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800392c:	68bb      	ldr	r3, [r7, #8]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	2b02      	cmp	r3, #2
 8003932:	d104      	bne.n	800393e <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	2205      	movs	r2, #5
 8003938:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800393c:	e006      	b.n	800394c <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	2201      	movs	r2, #1
 8003942:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8003946:	e001      	b.n	800394c <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
 8003948:	2301      	movs	r3, #1
 800394a:	e000      	b.n	800394e <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
 800394c:	2300      	movs	r3, #0
}
 800394e:	4618      	mov	r0, r3
 8003950:	3718      	adds	r7, #24
 8003952:	46bd      	mov	sp, r7
 8003954:	bd80      	pop	{r7, pc}

08003956 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8003956:	b580      	push	{r7, lr}
 8003958:	b082      	sub	sp, #8
 800395a:	af00      	add	r7, sp, #0
 800395c:	6078      	str	r0, [r7, #4]
 800395e:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8003966:	b2db      	uxtb	r3, r3
 8003968:	2b02      	cmp	r3, #2
 800396a:	d101      	bne.n	8003970 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 800396c:	2302      	movs	r3, #2
 800396e:	e016      	b.n	800399e <HAL_SDRAM_ProgramRefreshRate+0x48>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8003976:	b2db      	uxtb	r3, r3
 8003978:	2b01      	cmp	r3, #1
 800397a:	d10f      	bne.n	800399c <HAL_SDRAM_ProgramRefreshRate+0x46>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	2202      	movs	r2, #2
 8003980:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	6839      	ldr	r1, [r7, #0]
 800398a:	4618      	mov	r0, r3
 800398c:	f000 f8f6 	bl	8003b7c <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	2201      	movs	r2, #1
 8003994:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 8003998:	2300      	movs	r3, #0
 800399a:	e000      	b.n	800399e <HAL_SDRAM_ProgramRefreshRate+0x48>
    return HAL_ERROR;
 800399c:	2301      	movs	r3, #1
}
 800399e:	4618      	mov	r0, r3
 80039a0:	3708      	adds	r7, #8
 80039a2:	46bd      	mov	sp, r7
 80039a4:	bd80      	pop	{r7, pc}
	...

080039a8 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 80039a8:	b480      	push	{r7}
 80039aa:	b083      	sub	sp, #12
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	6078      	str	r0, [r7, #4]
 80039b0:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 80039b2:	683b      	ldr	r3, [r7, #0]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d121      	bne.n	80039fe <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681a      	ldr	r2, [r3, #0]
 80039be:	4b27      	ldr	r3, [pc, #156]	; (8003a5c <FMC_SDRAM_Init+0xb4>)
 80039c0:	4013      	ands	r3, r2
 80039c2:	683a      	ldr	r2, [r7, #0]
 80039c4:	6851      	ldr	r1, [r2, #4]
 80039c6:	683a      	ldr	r2, [r7, #0]
 80039c8:	6892      	ldr	r2, [r2, #8]
 80039ca:	4311      	orrs	r1, r2
 80039cc:	683a      	ldr	r2, [r7, #0]
 80039ce:	68d2      	ldr	r2, [r2, #12]
 80039d0:	4311      	orrs	r1, r2
 80039d2:	683a      	ldr	r2, [r7, #0]
 80039d4:	6912      	ldr	r2, [r2, #16]
 80039d6:	4311      	orrs	r1, r2
 80039d8:	683a      	ldr	r2, [r7, #0]
 80039da:	6952      	ldr	r2, [r2, #20]
 80039dc:	4311      	orrs	r1, r2
 80039de:	683a      	ldr	r2, [r7, #0]
 80039e0:	6992      	ldr	r2, [r2, #24]
 80039e2:	4311      	orrs	r1, r2
 80039e4:	683a      	ldr	r2, [r7, #0]
 80039e6:	69d2      	ldr	r2, [r2, #28]
 80039e8:	4311      	orrs	r1, r2
 80039ea:	683a      	ldr	r2, [r7, #0]
 80039ec:	6a12      	ldr	r2, [r2, #32]
 80039ee:	4311      	orrs	r1, r2
 80039f0:	683a      	ldr	r2, [r7, #0]
 80039f2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80039f4:	430a      	orrs	r2, r1
 80039f6:	431a      	orrs	r2, r3
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	601a      	str	r2, [r3, #0]
 80039fc:	e026      	b.n	8003a4c <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8003a06:	683b      	ldr	r3, [r7, #0]
 8003a08:	69d9      	ldr	r1, [r3, #28]
 8003a0a:	683b      	ldr	r3, [r7, #0]
 8003a0c:	6a1b      	ldr	r3, [r3, #32]
 8003a0e:	4319      	orrs	r1, r3
 8003a10:	683b      	ldr	r3, [r7, #0]
 8003a12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a14:	430b      	orrs	r3, r1
 8003a16:	431a      	orrs	r2, r3
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	601a      	str	r2, [r3, #0]
               FMC_SDCRx_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	685a      	ldr	r2, [r3, #4]
 8003a20:	4b0e      	ldr	r3, [pc, #56]	; (8003a5c <FMC_SDRAM_Init+0xb4>)
 8003a22:	4013      	ands	r3, r2
 8003a24:	683a      	ldr	r2, [r7, #0]
 8003a26:	6851      	ldr	r1, [r2, #4]
 8003a28:	683a      	ldr	r2, [r7, #0]
 8003a2a:	6892      	ldr	r2, [r2, #8]
 8003a2c:	4311      	orrs	r1, r2
 8003a2e:	683a      	ldr	r2, [r7, #0]
 8003a30:	68d2      	ldr	r2, [r2, #12]
 8003a32:	4311      	orrs	r1, r2
 8003a34:	683a      	ldr	r2, [r7, #0]
 8003a36:	6912      	ldr	r2, [r2, #16]
 8003a38:	4311      	orrs	r1, r2
 8003a3a:	683a      	ldr	r2, [r7, #0]
 8003a3c:	6952      	ldr	r2, [r2, #20]
 8003a3e:	4311      	orrs	r1, r2
 8003a40:	683a      	ldr	r2, [r7, #0]
 8003a42:	6992      	ldr	r2, [r2, #24]
 8003a44:	430a      	orrs	r2, r1
 8003a46:	431a      	orrs	r2, r3
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 8003a4c:	2300      	movs	r3, #0
}
 8003a4e:	4618      	mov	r0, r3
 8003a50:	370c      	adds	r7, #12
 8003a52:	46bd      	mov	sp, r7
 8003a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a58:	4770      	bx	lr
 8003a5a:	bf00      	nop
 8003a5c:	ffff8000 	.word	0xffff8000

08003a60 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8003a60:	b480      	push	{r7}
 8003a62:	b085      	sub	sp, #20
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	60f8      	str	r0, [r7, #12]
 8003a68:	60b9      	str	r1, [r7, #8]
 8003a6a:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d128      	bne.n	8003ac4 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	689b      	ldr	r3, [r3, #8]
 8003a76:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8003a7a:	68bb      	ldr	r3, [r7, #8]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	1e59      	subs	r1, r3, #1
 8003a80:	68bb      	ldr	r3, [r7, #8]
 8003a82:	685b      	ldr	r3, [r3, #4]
 8003a84:	3b01      	subs	r3, #1
 8003a86:	011b      	lsls	r3, r3, #4
 8003a88:	4319      	orrs	r1, r3
 8003a8a:	68bb      	ldr	r3, [r7, #8]
 8003a8c:	689b      	ldr	r3, [r3, #8]
 8003a8e:	3b01      	subs	r3, #1
 8003a90:	021b      	lsls	r3, r3, #8
 8003a92:	4319      	orrs	r1, r3
 8003a94:	68bb      	ldr	r3, [r7, #8]
 8003a96:	68db      	ldr	r3, [r3, #12]
 8003a98:	3b01      	subs	r3, #1
 8003a9a:	031b      	lsls	r3, r3, #12
 8003a9c:	4319      	orrs	r1, r3
 8003a9e:	68bb      	ldr	r3, [r7, #8]
 8003aa0:	691b      	ldr	r3, [r3, #16]
 8003aa2:	3b01      	subs	r3, #1
 8003aa4:	041b      	lsls	r3, r3, #16
 8003aa6:	4319      	orrs	r1, r3
 8003aa8:	68bb      	ldr	r3, [r7, #8]
 8003aaa:	695b      	ldr	r3, [r3, #20]
 8003aac:	3b01      	subs	r3, #1
 8003aae:	051b      	lsls	r3, r3, #20
 8003ab0:	4319      	orrs	r1, r3
 8003ab2:	68bb      	ldr	r3, [r7, #8]
 8003ab4:	699b      	ldr	r3, [r3, #24]
 8003ab6:	3b01      	subs	r3, #1
 8003ab8:	061b      	lsls	r3, r3, #24
 8003aba:	430b      	orrs	r3, r1
 8003abc:	431a      	orrs	r2, r3
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	609a      	str	r2, [r3, #8]
 8003ac2:	e02d      	b.n	8003b20 <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTRx_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	689a      	ldr	r2, [r3, #8]
 8003ac8:	4b19      	ldr	r3, [pc, #100]	; (8003b30 <FMC_SDRAM_Timing_Init+0xd0>)
 8003aca:	4013      	ands	r3, r2
 8003acc:	68ba      	ldr	r2, [r7, #8]
 8003ace:	68d2      	ldr	r2, [r2, #12]
 8003ad0:	3a01      	subs	r2, #1
 8003ad2:	0311      	lsls	r1, r2, #12
 8003ad4:	68ba      	ldr	r2, [r7, #8]
 8003ad6:	6952      	ldr	r2, [r2, #20]
 8003ad8:	3a01      	subs	r2, #1
 8003ada:	0512      	lsls	r2, r2, #20
 8003adc:	430a      	orrs	r2, r1
 8003ade:	431a      	orrs	r2, r3
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	609a      	str	r2, [r3, #8]
               FMC_SDTRx_TRC |
               FMC_SDTRx_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTRx_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTRx_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	68db      	ldr	r3, [r3, #12]
 8003ae8:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8003aec:	68bb      	ldr	r3, [r7, #8]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	1e59      	subs	r1, r3, #1
 8003af2:	68bb      	ldr	r3, [r7, #8]
 8003af4:	685b      	ldr	r3, [r3, #4]
 8003af6:	3b01      	subs	r3, #1
 8003af8:	011b      	lsls	r3, r3, #4
 8003afa:	4319      	orrs	r1, r3
 8003afc:	68bb      	ldr	r3, [r7, #8]
 8003afe:	689b      	ldr	r3, [r3, #8]
 8003b00:	3b01      	subs	r3, #1
 8003b02:	021b      	lsls	r3, r3, #8
 8003b04:	4319      	orrs	r1, r3
 8003b06:	68bb      	ldr	r3, [r7, #8]
 8003b08:	691b      	ldr	r3, [r3, #16]
 8003b0a:	3b01      	subs	r3, #1
 8003b0c:	041b      	lsls	r3, r3, #16
 8003b0e:	4319      	orrs	r1, r3
 8003b10:	68bb      	ldr	r3, [r7, #8]
 8003b12:	699b      	ldr	r3, [r3, #24]
 8003b14:	3b01      	subs	r3, #1
 8003b16:	061b      	lsls	r3, r3, #24
 8003b18:	430b      	orrs	r3, r1
 8003b1a:	431a      	orrs	r2, r3
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTRx_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTRx_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }

  return HAL_OK;
 8003b20:	2300      	movs	r3, #0
}
 8003b22:	4618      	mov	r0, r3
 8003b24:	3714      	adds	r7, #20
 8003b26:	46bd      	mov	sp, r7
 8003b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b2c:	4770      	bx	lr
 8003b2e:	bf00      	nop
 8003b30:	ff0f0fff 	.word	0xff0f0fff

08003b34 <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8003b34:	b480      	push	{r7}
 8003b36:	b085      	sub	sp, #20
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	60f8      	str	r0, [r7, #12]
 8003b3c:	60b9      	str	r1, [r7, #8]
 8003b3e:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	691a      	ldr	r2, [r3, #16]
 8003b44:	4b0c      	ldr	r3, [pc, #48]	; (8003b78 <FMC_SDRAM_SendCommand+0x44>)
 8003b46:	4013      	ands	r3, r2
 8003b48:	68ba      	ldr	r2, [r7, #8]
 8003b4a:	6811      	ldr	r1, [r2, #0]
 8003b4c:	68ba      	ldr	r2, [r7, #8]
 8003b4e:	6852      	ldr	r2, [r2, #4]
 8003b50:	4311      	orrs	r1, r2
 8003b52:	68ba      	ldr	r2, [r7, #8]
 8003b54:	6892      	ldr	r2, [r2, #8]
 8003b56:	3a01      	subs	r2, #1
 8003b58:	0152      	lsls	r2, r2, #5
 8003b5a:	4311      	orrs	r1, r2
 8003b5c:	68ba      	ldr	r2, [r7, #8]
 8003b5e:	68d2      	ldr	r2, [r2, #12]
 8003b60:	0252      	lsls	r2, r2, #9
 8003b62:	430a      	orrs	r2, r1
 8003b64:	431a      	orrs	r2, r3
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
 8003b6a:	2300      	movs	r3, #0
}
 8003b6c:	4618      	mov	r0, r3
 8003b6e:	3714      	adds	r7, #20
 8003b70:	46bd      	mov	sp, r7
 8003b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b76:	4770      	bx	lr
 8003b78:	ffc00000 	.word	0xffc00000

08003b7c <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 8003b7c:	b480      	push	{r7}
 8003b7e:	b083      	sub	sp, #12
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	6078      	str	r0, [r7, #4]
 8003b84:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	695a      	ldr	r2, [r3, #20]
 8003b8a:	4b07      	ldr	r3, [pc, #28]	; (8003ba8 <FMC_SDRAM_ProgramRefreshRate+0x2c>)
 8003b8c:	4013      	ands	r3, r2
 8003b8e:	683a      	ldr	r2, [r7, #0]
 8003b90:	0052      	lsls	r2, r2, #1
 8003b92:	431a      	orrs	r2, r3
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 8003b98:	2300      	movs	r3, #0
}
 8003b9a:	4618      	mov	r0, r3
 8003b9c:	370c      	adds	r7, #12
 8003b9e:	46bd      	mov	sp, r7
 8003ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba4:	4770      	bx	lr
 8003ba6:	bf00      	nop
 8003ba8:	ffffc001 	.word	0xffffc001

08003bac <IS42S32800G_Init>:
  * @param  Ctx Component object pointer
  * @param  pRegMode : Pointer to Register Mode structure
  * @retval error status
  */
int32_t IS42S32800G_Init(SDRAM_HandleTypeDef *Ctx, IS42S32800G_Context_t *pRegMode)
{
 8003bac:	b580      	push	{r7, lr}
 8003bae:	b084      	sub	sp, #16
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	6078      	str	r0, [r7, #4]
 8003bb4:	6039      	str	r1, [r7, #0]
  int32_t ret = IS42S32800G_ERROR;
 8003bb6:	f04f 33ff 	mov.w	r3, #4294967295
 8003bba:	60fb      	str	r3, [r7, #12]

  /* Step 1: Configure a clock configuration enable command */
  if(IS42S32800G_ClockEnable(Ctx, pRegMode->TargetBank) == IS42S32800G_OK)
 8003bbc:	683b      	ldr	r3, [r7, #0]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	4619      	mov	r1, r3
 8003bc2:	6878      	ldr	r0, [r7, #4]
 8003bc4:	f000 f832 	bl	8003c2c <IS42S32800G_ClockEnable>
 8003bc8:	4603      	mov	r3, r0
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d128      	bne.n	8003c20 <IS42S32800G_Init+0x74>
  {
    /* Step 2: Insert 100 us minimum delay */
    /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
    (void)IS42S32800G_Delay(1);
 8003bce:	2001      	movs	r0, #1
 8003bd0:	f000 f8e2 	bl	8003d98 <IS42S32800G_Delay>

    /* Step 3: Configure a PALL (precharge all) command */
    if(IS42S32800G_Precharge(Ctx, pRegMode->TargetBank) == IS42S32800G_OK)
 8003bd4:	683b      	ldr	r3, [r7, #0]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	4619      	mov	r1, r3
 8003bda:	6878      	ldr	r0, [r7, #4]
 8003bdc:	f000 f84a 	bl	8003c74 <IS42S32800G_Precharge>
 8003be0:	4603      	mov	r3, r0
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d11c      	bne.n	8003c20 <IS42S32800G_Init+0x74>
    {
      /* Step 4: Configure a Refresh command */
      if(IS42S32800G_RefreshMode(Ctx, pRegMode->TargetBank, pRegMode->RefreshMode) == IS42S32800G_OK)
 8003be6:	683b      	ldr	r3, [r7, #0]
 8003be8:	6819      	ldr	r1, [r3, #0]
 8003bea:	683b      	ldr	r3, [r7, #0]
 8003bec:	685b      	ldr	r3, [r3, #4]
 8003bee:	461a      	mov	r2, r3
 8003bf0:	6878      	ldr	r0, [r7, #4]
 8003bf2:	f000 f897 	bl	8003d24 <IS42S32800G_RefreshMode>
 8003bf6:	4603      	mov	r3, r0
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d111      	bne.n	8003c20 <IS42S32800G_Init+0x74>
      {
        /* Step 5: Program the external memory mode register */
        if(IS42S32800G_ModeRegConfig(Ctx, pRegMode) == IS42S32800G_OK)
 8003bfc:	6839      	ldr	r1, [r7, #0]
 8003bfe:	6878      	ldr	r0, [r7, #4]
 8003c00:	f000 f85c 	bl	8003cbc <IS42S32800G_ModeRegConfig>
 8003c04:	4603      	mov	r3, r0
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d10a      	bne.n	8003c20 <IS42S32800G_Init+0x74>
        {
          /* Step 6: Set the refresh rate counter */
          if(IS42S32800G_RefreshRate(Ctx, pRegMode->RefreshRate) == IS42S32800G_OK)
 8003c0a:	683b      	ldr	r3, [r7, #0]
 8003c0c:	689b      	ldr	r3, [r3, #8]
 8003c0e:	4619      	mov	r1, r3
 8003c10:	6878      	ldr	r0, [r7, #4]
 8003c12:	f000 f8ad 	bl	8003d70 <IS42S32800G_RefreshRate>
 8003c16:	4603      	mov	r3, r0
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d101      	bne.n	8003c20 <IS42S32800G_Init+0x74>
          {
            ret = IS42S32800G_OK;
 8003c1c:	2300      	movs	r3, #0
 8003c1e:	60fb      	str	r3, [r7, #12]
          }
        }
      }
    }
  }
  return ret;
 8003c20:	68fb      	ldr	r3, [r7, #12]
}
 8003c22:	4618      	mov	r0, r3
 8003c24:	3710      	adds	r7, #16
 8003c26:	46bd      	mov	sp, r7
 8003c28:	bd80      	pop	{r7, pc}
	...

08003c2c <IS42S32800G_ClockEnable>:
  * @param  Ctx Component object pointer
  * @param  Interface Could be FMC_SDRAM_CMD_TARGET_BANK1 or FMC_SDRAM_CMD_TARGET_BANK2
  * @retval error status
  */
int32_t IS42S32800G_ClockEnable(SDRAM_HandleTypeDef *Ctx, uint32_t Interface)
{
 8003c2c:	b580      	push	{r7, lr}
 8003c2e:	b082      	sub	sp, #8
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	6078      	str	r0, [r7, #4]
 8003c34:	6039      	str	r1, [r7, #0]
  Command.CommandMode            = IS42S32800G_CLK_ENABLE_CMD;
 8003c36:	4b0e      	ldr	r3, [pc, #56]	; (8003c70 <IS42S32800G_ClockEnable+0x44>)
 8003c38:	2201      	movs	r2, #1
 8003c3a:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = Interface;
 8003c3c:	4a0c      	ldr	r2, [pc, #48]	; (8003c70 <IS42S32800G_ClockEnable+0x44>)
 8003c3e:	683b      	ldr	r3, [r7, #0]
 8003c40:	6053      	str	r3, [r2, #4]
  Command.AutoRefreshNumber      = 1;
 8003c42:	4b0b      	ldr	r3, [pc, #44]	; (8003c70 <IS42S32800G_ClockEnable+0x44>)
 8003c44:	2201      	movs	r2, #1
 8003c46:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8003c48:	4b09      	ldr	r3, [pc, #36]	; (8003c70 <IS42S32800G_ClockEnable+0x44>)
 8003c4a:	2200      	movs	r2, #0
 8003c4c:	60da      	str	r2, [r3, #12]

  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800G_TIMEOUT) != HAL_OK)
 8003c4e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003c52:	4907      	ldr	r1, [pc, #28]	; (8003c70 <IS42S32800G_ClockEnable+0x44>)
 8003c54:	6878      	ldr	r0, [r7, #4]
 8003c56:	f7ff fe49 	bl	80038ec <HAL_SDRAM_SendCommand>
 8003c5a:	4603      	mov	r3, r0
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d002      	beq.n	8003c66 <IS42S32800G_ClockEnable+0x3a>
  {
    return IS42S32800G_ERROR;
 8003c60:	f04f 33ff 	mov.w	r3, #4294967295
 8003c64:	e000      	b.n	8003c68 <IS42S32800G_ClockEnable+0x3c>
  }
  else
  {
    return IS42S32800G_OK;
 8003c66:	2300      	movs	r3, #0
  }
}
 8003c68:	4618      	mov	r0, r3
 8003c6a:	3708      	adds	r7, #8
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	bd80      	pop	{r7, pc}
 8003c70:	24001068 	.word	0x24001068

08003c74 <IS42S32800G_Precharge>:
  * @param  Ctx Component object pointer
  * @param  Interface Could be FMC_SDRAM_CMD_TARGET_BANK1 or FMC_SDRAM_CMD_TARGET_BANK2
  * @retval error status
  */
int32_t IS42S32800G_Precharge(SDRAM_HandleTypeDef *Ctx, uint32_t Interface)
{
 8003c74:	b580      	push	{r7, lr}
 8003c76:	b082      	sub	sp, #8
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	6078      	str	r0, [r7, #4]
 8003c7c:	6039      	str	r1, [r7, #0]
  Command.CommandMode            = IS42S32800G_PALL_CMD   ;
 8003c7e:	4b0e      	ldr	r3, [pc, #56]	; (8003cb8 <IS42S32800G_Precharge+0x44>)
 8003c80:	2202      	movs	r2, #2
 8003c82:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = Interface;
 8003c84:	4a0c      	ldr	r2, [pc, #48]	; (8003cb8 <IS42S32800G_Precharge+0x44>)
 8003c86:	683b      	ldr	r3, [r7, #0]
 8003c88:	6053      	str	r3, [r2, #4]
  Command.AutoRefreshNumber      = 1;
 8003c8a:	4b0b      	ldr	r3, [pc, #44]	; (8003cb8 <IS42S32800G_Precharge+0x44>)
 8003c8c:	2201      	movs	r2, #1
 8003c8e:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8003c90:	4b09      	ldr	r3, [pc, #36]	; (8003cb8 <IS42S32800G_Precharge+0x44>)
 8003c92:	2200      	movs	r2, #0
 8003c94:	60da      	str	r2, [r3, #12]

  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800G_TIMEOUT) != HAL_OK)
 8003c96:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003c9a:	4907      	ldr	r1, [pc, #28]	; (8003cb8 <IS42S32800G_Precharge+0x44>)
 8003c9c:	6878      	ldr	r0, [r7, #4]
 8003c9e:	f7ff fe25 	bl	80038ec <HAL_SDRAM_SendCommand>
 8003ca2:	4603      	mov	r3, r0
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d002      	beq.n	8003cae <IS42S32800G_Precharge+0x3a>
  {
    return IS42S32800G_ERROR;
 8003ca8:	f04f 33ff 	mov.w	r3, #4294967295
 8003cac:	e000      	b.n	8003cb0 <IS42S32800G_Precharge+0x3c>
  }
  else
  {
    return IS42S32800G_OK;
 8003cae:	2300      	movs	r3, #0
  }
}
 8003cb0:	4618      	mov	r0, r3
 8003cb2:	3708      	adds	r7, #8
 8003cb4:	46bd      	mov	sp, r7
 8003cb6:	bd80      	pop	{r7, pc}
 8003cb8:	24001068 	.word	0x24001068

08003cbc <IS42S32800G_ModeRegConfig>:
  * @param  Ctx Component object pointer
  * @param  pRegMode : Pointer to Register Mode structure
  * @retval error status
  */
int32_t IS42S32800G_ModeRegConfig(SDRAM_HandleTypeDef *Ctx, IS42S32800G_Context_t *pRegMode)
{
 8003cbc:	b580      	push	{r7, lr}
 8003cbe:	b084      	sub	sp, #16
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	6078      	str	r0, [r7, #4]
 8003cc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpmrd;

  /* Program the external memory mode register */
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
 8003cc6:	683b      	ldr	r3, [r7, #0]
 8003cc8:	68da      	ldr	r2, [r3, #12]
                     pRegMode->BurstType     |\
 8003cca:	683b      	ldr	r3, [r7, #0]
 8003ccc:	691b      	ldr	r3, [r3, #16]
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
 8003cce:	431a      	orrs	r2, r3
                     pRegMode->CASLatency    |\
 8003cd0:	683b      	ldr	r3, [r7, #0]
 8003cd2:	695b      	ldr	r3, [r3, #20]
                     pRegMode->BurstType     |\
 8003cd4:	431a      	orrs	r2, r3
                     pRegMode->OperationMode |\
 8003cd6:	683b      	ldr	r3, [r7, #0]
 8003cd8:	699b      	ldr	r3, [r3, #24]
                     pRegMode->CASLatency    |\
 8003cda:	431a      	orrs	r2, r3
                     pRegMode->WriteBurstMode;
 8003cdc:	683b      	ldr	r3, [r7, #0]
 8003cde:	69db      	ldr	r3, [r3, #28]
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
 8003ce0:	4313      	orrs	r3, r2
 8003ce2:	60fb      	str	r3, [r7, #12]

  Command.CommandMode            = IS42S32800G_LOAD_MODE_CMD;
 8003ce4:	4b0e      	ldr	r3, [pc, #56]	; (8003d20 <IS42S32800G_ModeRegConfig+0x64>)
 8003ce6:	2204      	movs	r2, #4
 8003ce8:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = pRegMode->TargetBank;
 8003cea:	683b      	ldr	r3, [r7, #0]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	4a0c      	ldr	r2, [pc, #48]	; (8003d20 <IS42S32800G_ModeRegConfig+0x64>)
 8003cf0:	6053      	str	r3, [r2, #4]
  Command.AutoRefreshNumber      = 1;
 8003cf2:	4b0b      	ldr	r3, [pc, #44]	; (8003d20 <IS42S32800G_ModeRegConfig+0x64>)
 8003cf4:	2201      	movs	r2, #1
 8003cf6:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = tmpmrd;
 8003cf8:	4a09      	ldr	r2, [pc, #36]	; (8003d20 <IS42S32800G_ModeRegConfig+0x64>)
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800G_TIMEOUT) != HAL_OK)
 8003cfe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003d02:	4907      	ldr	r1, [pc, #28]	; (8003d20 <IS42S32800G_ModeRegConfig+0x64>)
 8003d04:	6878      	ldr	r0, [r7, #4]
 8003d06:	f7ff fdf1 	bl	80038ec <HAL_SDRAM_SendCommand>
 8003d0a:	4603      	mov	r3, r0
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d002      	beq.n	8003d16 <IS42S32800G_ModeRegConfig+0x5a>
  {
    return IS42S32800G_ERROR;
 8003d10:	f04f 33ff 	mov.w	r3, #4294967295
 8003d14:	e000      	b.n	8003d18 <IS42S32800G_ModeRegConfig+0x5c>
  }
  else
  {
    return IS42S32800G_OK;
 8003d16:	2300      	movs	r3, #0
  }
}
 8003d18:	4618      	mov	r0, r3
 8003d1a:	3710      	adds	r7, #16
 8003d1c:	46bd      	mov	sp, r7
 8003d1e:	bd80      	pop	{r7, pc}
 8003d20:	24001068 	.word	0x24001068

08003d24 <IS42S32800G_RefreshMode>:
  * @param  RefreshMode Could be IS42S32800G_CMD_AUTOREFRESH_MODE or
  *                      IS42S32800G_CMD_SELFREFRESH_MODE
  * @retval error status
  */
int32_t IS42S32800G_RefreshMode(SDRAM_HandleTypeDef *Ctx, uint32_t Interface, uint32_t RefreshMode)
{
 8003d24:	b580      	push	{r7, lr}
 8003d26:	b084      	sub	sp, #16
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	60f8      	str	r0, [r7, #12]
 8003d2c:	60b9      	str	r1, [r7, #8]
 8003d2e:	607a      	str	r2, [r7, #4]
  Command.CommandMode            = RefreshMode;
 8003d30:	4a0e      	ldr	r2, [pc, #56]	; (8003d6c <IS42S32800G_RefreshMode+0x48>)
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	6013      	str	r3, [r2, #0]
  Command.CommandTarget          = Interface;
 8003d36:	4a0d      	ldr	r2, [pc, #52]	; (8003d6c <IS42S32800G_RefreshMode+0x48>)
 8003d38:	68bb      	ldr	r3, [r7, #8]
 8003d3a:	6053      	str	r3, [r2, #4]
  Command.AutoRefreshNumber      = 8;
 8003d3c:	4b0b      	ldr	r3, [pc, #44]	; (8003d6c <IS42S32800G_RefreshMode+0x48>)
 8003d3e:	2208      	movs	r2, #8
 8003d40:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8003d42:	4b0a      	ldr	r3, [pc, #40]	; (8003d6c <IS42S32800G_RefreshMode+0x48>)
 8003d44:	2200      	movs	r2, #0
 8003d46:	60da      	str	r2, [r3, #12]

  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800G_TIMEOUT) != HAL_OK)
 8003d48:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003d4c:	4907      	ldr	r1, [pc, #28]	; (8003d6c <IS42S32800G_RefreshMode+0x48>)
 8003d4e:	68f8      	ldr	r0, [r7, #12]
 8003d50:	f7ff fdcc 	bl	80038ec <HAL_SDRAM_SendCommand>
 8003d54:	4603      	mov	r3, r0
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d002      	beq.n	8003d60 <IS42S32800G_RefreshMode+0x3c>
  {
    return IS42S32800G_ERROR;
 8003d5a:	f04f 33ff 	mov.w	r3, #4294967295
 8003d5e:	e000      	b.n	8003d62 <IS42S32800G_RefreshMode+0x3e>
  }
  else
  {
    return IS42S32800G_OK;
 8003d60:	2300      	movs	r3, #0
  }
}
 8003d62:	4618      	mov	r0, r3
 8003d64:	3710      	adds	r7, #16
 8003d66:	46bd      	mov	sp, r7
 8003d68:	bd80      	pop	{r7, pc}
 8003d6a:	bf00      	nop
 8003d6c:	24001068 	.word	0x24001068

08003d70 <IS42S32800G_RefreshRate>:
  * @param  Ctx Component object pointer
  * @param  RefreshCount The refresh rate to be programmed
  * @retval error status
  */
int32_t IS42S32800G_RefreshRate(SDRAM_HandleTypeDef *Ctx, uint32_t RefreshCount)
{
 8003d70:	b580      	push	{r7, lr}
 8003d72:	b082      	sub	sp, #8
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	6078      	str	r0, [r7, #4]
 8003d78:	6039      	str	r1, [r7, #0]
  /* Set the device refresh rate */
  if(HAL_SDRAM_ProgramRefreshRate(Ctx, RefreshCount) != HAL_OK)
 8003d7a:	6839      	ldr	r1, [r7, #0]
 8003d7c:	6878      	ldr	r0, [r7, #4]
 8003d7e:	f7ff fdea 	bl	8003956 <HAL_SDRAM_ProgramRefreshRate>
 8003d82:	4603      	mov	r3, r0
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d002      	beq.n	8003d8e <IS42S32800G_RefreshRate+0x1e>
  {
    return IS42S32800G_ERROR;
 8003d88:	f04f 33ff 	mov.w	r3, #4294967295
 8003d8c:	e000      	b.n	8003d90 <IS42S32800G_RefreshRate+0x20>
  }
  else
  {
    return IS42S32800G_OK;
 8003d8e:	2300      	movs	r3, #0
  }
}
 8003d90:	4618      	mov	r0, r3
 8003d92:	3708      	adds	r7, #8
 8003d94:	46bd      	mov	sp, r7
 8003d96:	bd80      	pop	{r7, pc}

08003d98 <IS42S32800G_Delay>:
  * @brief This function provides accurate delay (in milliseconds)
  * @param Delay : specifies the delay time length, in milliseconds
  * @retval IS42S32800G_OK
  */
static int32_t IS42S32800G_Delay(uint32_t Delay)
{
 8003d98:	b580      	push	{r7, lr}
 8003d9a:	b084      	sub	sp, #16
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  tickstart = HAL_GetTick();
 8003da0:	f7fc ff10 	bl	8000bc4 <HAL_GetTick>
 8003da4:	60f8      	str	r0, [r7, #12]
  while((HAL_GetTick() - tickstart) < Delay)
 8003da6:	bf00      	nop
 8003da8:	f7fc ff0c 	bl	8000bc4 <HAL_GetTick>
 8003dac:	4602      	mov	r2, r0
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	1ad3      	subs	r3, r2, r3
 8003db2:	687a      	ldr	r2, [r7, #4]
 8003db4:	429a      	cmp	r2, r3
 8003db6:	d8f7      	bhi.n	8003da8 <IS42S32800G_Delay+0x10>
  {
  }
  return IS42S32800G_OK;
 8003db8:	2300      	movs	r3, #0
}
 8003dba:	4618      	mov	r0, r3
 8003dbc:	3710      	adds	r7, #16
 8003dbe:	46bd      	mov	sp, r7
 8003dc0:	bd80      	pop	{r7, pc}
	...

08003dc4 <__libc_init_array>:
 8003dc4:	b570      	push	{r4, r5, r6, lr}
 8003dc6:	4d0d      	ldr	r5, [pc, #52]	; (8003dfc <__libc_init_array+0x38>)
 8003dc8:	4c0d      	ldr	r4, [pc, #52]	; (8003e00 <__libc_init_array+0x3c>)
 8003dca:	1b64      	subs	r4, r4, r5
 8003dcc:	10a4      	asrs	r4, r4, #2
 8003dce:	2600      	movs	r6, #0
 8003dd0:	42a6      	cmp	r6, r4
 8003dd2:	d109      	bne.n	8003de8 <__libc_init_array+0x24>
 8003dd4:	4d0b      	ldr	r5, [pc, #44]	; (8003e04 <__libc_init_array+0x40>)
 8003dd6:	4c0c      	ldr	r4, [pc, #48]	; (8003e08 <__libc_init_array+0x44>)
 8003dd8:	f000 f820 	bl	8003e1c <_init>
 8003ddc:	1b64      	subs	r4, r4, r5
 8003dde:	10a4      	asrs	r4, r4, #2
 8003de0:	2600      	movs	r6, #0
 8003de2:	42a6      	cmp	r6, r4
 8003de4:	d105      	bne.n	8003df2 <__libc_init_array+0x2e>
 8003de6:	bd70      	pop	{r4, r5, r6, pc}
 8003de8:	f855 3b04 	ldr.w	r3, [r5], #4
 8003dec:	4798      	blx	r3
 8003dee:	3601      	adds	r6, #1
 8003df0:	e7ee      	b.n	8003dd0 <__libc_init_array+0xc>
 8003df2:	f855 3b04 	ldr.w	r3, [r5], #4
 8003df6:	4798      	blx	r3
 8003df8:	3601      	adds	r6, #1
 8003dfa:	e7f2      	b.n	8003de2 <__libc_init_array+0x1e>
 8003dfc:	08003e44 	.word	0x08003e44
 8003e00:	08003e44 	.word	0x08003e44
 8003e04:	08003e44 	.word	0x08003e44
 8003e08:	08003e48 	.word	0x08003e48

08003e0c <memset>:
 8003e0c:	4402      	add	r2, r0
 8003e0e:	4603      	mov	r3, r0
 8003e10:	4293      	cmp	r3, r2
 8003e12:	d100      	bne.n	8003e16 <memset+0xa>
 8003e14:	4770      	bx	lr
 8003e16:	f803 1b01 	strb.w	r1, [r3], #1
 8003e1a:	e7f9      	b.n	8003e10 <memset+0x4>

08003e1c <_init>:
 8003e1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e1e:	bf00      	nop
 8003e20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e22:	bc08      	pop	{r3}
 8003e24:	469e      	mov	lr, r3
 8003e26:	4770      	bx	lr

08003e28 <_fini>:
 8003e28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e2a:	bf00      	nop
 8003e2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e2e:	bc08      	pop	{r3}
 8003e30:	469e      	mov	lr, r3
 8003e32:	4770      	bx	lr
