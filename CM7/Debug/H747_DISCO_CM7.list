
H747_DISCO_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003c38  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08003ed0  08003ed0  00013ed0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003ee0  08003ee0  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08003ee0  08003ee0  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003ee0  08003ee0  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003ee0  08003ee0  00013ee0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003ee4  08003ee4  00013ee4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  24000000  08003ee8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000106c  24000010  08003ef8  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2400107c  08003ef8  0002107c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000cd17  00000000  00000000  0002003e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d18  00000000  00000000  0002cd55  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009d8  00000000  00000000  0002ea70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000008f0  00000000  00000000  0002f448  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003e672  00000000  00000000  0002fd38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d1d4  00000000  00000000  0006e3aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00191762  00000000  00000000  0007b57e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0020cce0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000026a4  00000000  00000000  0020cd30  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000010 	.word	0x24000010
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08003eb8 	.word	0x08003eb8

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000014 	.word	0x24000014
 80002d4:	08003eb8 	.word	0x08003eb8

080002d8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80002d8:	b480      	push	{r7}
 80002da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80002dc:	4b3d      	ldr	r3, [pc, #244]	; (80003d4 <SystemInit+0xfc>)
 80002de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80002e2:	4a3c      	ldr	r2, [pc, #240]	; (80003d4 <SystemInit+0xfc>)
 80002e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80002e8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80002ec:	4b39      	ldr	r3, [pc, #228]	; (80003d4 <SystemInit+0xfc>)
 80002ee:	691b      	ldr	r3, [r3, #16]
 80002f0:	4a38      	ldr	r2, [pc, #224]	; (80003d4 <SystemInit+0xfc>)
 80002f2:	f043 0310 	orr.w	r3, r3, #16
 80002f6:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80002f8:	4b37      	ldr	r3, [pc, #220]	; (80003d8 <SystemInit+0x100>)
 80002fa:	681b      	ldr	r3, [r3, #0]
 80002fc:	f003 030f 	and.w	r3, r3, #15
 8000300:	2b06      	cmp	r3, #6
 8000302:	d807      	bhi.n	8000314 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000304:	4b34      	ldr	r3, [pc, #208]	; (80003d8 <SystemInit+0x100>)
 8000306:	681b      	ldr	r3, [r3, #0]
 8000308:	f023 030f 	bic.w	r3, r3, #15
 800030c:	4a32      	ldr	r2, [pc, #200]	; (80003d8 <SystemInit+0x100>)
 800030e:	f043 0307 	orr.w	r3, r3, #7
 8000312:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000314:	4b31      	ldr	r3, [pc, #196]	; (80003dc <SystemInit+0x104>)
 8000316:	681b      	ldr	r3, [r3, #0]
 8000318:	4a30      	ldr	r2, [pc, #192]	; (80003dc <SystemInit+0x104>)
 800031a:	f043 0301 	orr.w	r3, r3, #1
 800031e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000320:	4b2e      	ldr	r3, [pc, #184]	; (80003dc <SystemInit+0x104>)
 8000322:	2200      	movs	r2, #0
 8000324:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000326:	4b2d      	ldr	r3, [pc, #180]	; (80003dc <SystemInit+0x104>)
 8000328:	681a      	ldr	r2, [r3, #0]
 800032a:	492c      	ldr	r1, [pc, #176]	; (80003dc <SystemInit+0x104>)
 800032c:	4b2c      	ldr	r3, [pc, #176]	; (80003e0 <SystemInit+0x108>)
 800032e:	4013      	ands	r3, r2
 8000330:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000332:	4b29      	ldr	r3, [pc, #164]	; (80003d8 <SystemInit+0x100>)
 8000334:	681b      	ldr	r3, [r3, #0]
 8000336:	f003 0308 	and.w	r3, r3, #8
 800033a:	2b00      	cmp	r3, #0
 800033c:	d007      	beq.n	800034e <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800033e:	4b26      	ldr	r3, [pc, #152]	; (80003d8 <SystemInit+0x100>)
 8000340:	681b      	ldr	r3, [r3, #0]
 8000342:	f023 030f 	bic.w	r3, r3, #15
 8000346:	4a24      	ldr	r2, [pc, #144]	; (80003d8 <SystemInit+0x100>)
 8000348:	f043 0307 	orr.w	r3, r3, #7
 800034c:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800034e:	4b23      	ldr	r3, [pc, #140]	; (80003dc <SystemInit+0x104>)
 8000350:	2200      	movs	r2, #0
 8000352:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000354:	4b21      	ldr	r3, [pc, #132]	; (80003dc <SystemInit+0x104>)
 8000356:	2200      	movs	r2, #0
 8000358:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800035a:	4b20      	ldr	r3, [pc, #128]	; (80003dc <SystemInit+0x104>)
 800035c:	2200      	movs	r2, #0
 800035e:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000360:	4b1e      	ldr	r3, [pc, #120]	; (80003dc <SystemInit+0x104>)
 8000362:	4a20      	ldr	r2, [pc, #128]	; (80003e4 <SystemInit+0x10c>)
 8000364:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000366:	4b1d      	ldr	r3, [pc, #116]	; (80003dc <SystemInit+0x104>)
 8000368:	4a1f      	ldr	r2, [pc, #124]	; (80003e8 <SystemInit+0x110>)
 800036a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800036c:	4b1b      	ldr	r3, [pc, #108]	; (80003dc <SystemInit+0x104>)
 800036e:	4a1f      	ldr	r2, [pc, #124]	; (80003ec <SystemInit+0x114>)
 8000370:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000372:	4b1a      	ldr	r3, [pc, #104]	; (80003dc <SystemInit+0x104>)
 8000374:	2200      	movs	r2, #0
 8000376:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000378:	4b18      	ldr	r3, [pc, #96]	; (80003dc <SystemInit+0x104>)
 800037a:	4a1c      	ldr	r2, [pc, #112]	; (80003ec <SystemInit+0x114>)
 800037c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800037e:	4b17      	ldr	r3, [pc, #92]	; (80003dc <SystemInit+0x104>)
 8000380:	2200      	movs	r2, #0
 8000382:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000384:	4b15      	ldr	r3, [pc, #84]	; (80003dc <SystemInit+0x104>)
 8000386:	4a19      	ldr	r2, [pc, #100]	; (80003ec <SystemInit+0x114>)
 8000388:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800038a:	4b14      	ldr	r3, [pc, #80]	; (80003dc <SystemInit+0x104>)
 800038c:	2200      	movs	r2, #0
 800038e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000390:	4b12      	ldr	r3, [pc, #72]	; (80003dc <SystemInit+0x104>)
 8000392:	681b      	ldr	r3, [r3, #0]
 8000394:	4a11      	ldr	r2, [pc, #68]	; (80003dc <SystemInit+0x104>)
 8000396:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800039a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800039c:	4b0f      	ldr	r3, [pc, #60]	; (80003dc <SystemInit+0x104>)
 800039e:	2200      	movs	r2, #0
 80003a0:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 80003a2:	4b13      	ldr	r3, [pc, #76]	; (80003f0 <SystemInit+0x118>)
 80003a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80003a6:	4a12      	ldr	r2, [pc, #72]	; (80003f0 <SystemInit+0x118>)
 80003a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80003ac:	6253      	str	r3, [r2, #36]	; 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80003ae:	4b11      	ldr	r3, [pc, #68]	; (80003f4 <SystemInit+0x11c>)
 80003b0:	681a      	ldr	r2, [r3, #0]
 80003b2:	4b11      	ldr	r3, [pc, #68]	; (80003f8 <SystemInit+0x120>)
 80003b4:	4013      	ands	r3, r2
 80003b6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80003ba:	d202      	bcs.n	80003c2 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80003bc:	4b0f      	ldr	r3, [pc, #60]	; (80003fc <SystemInit+0x124>)
 80003be:	2201      	movs	r2, #1
 80003c0:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80003c2:	4b0f      	ldr	r3, [pc, #60]	; (8000400 <SystemInit+0x128>)
 80003c4:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80003c8:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 80003ca:	bf00      	nop
 80003cc:	46bd      	mov	sp, r7
 80003ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003d2:	4770      	bx	lr
 80003d4:	e000ed00 	.word	0xe000ed00
 80003d8:	52002000 	.word	0x52002000
 80003dc:	58024400 	.word	0x58024400
 80003e0:	eaf6ed7f 	.word	0xeaf6ed7f
 80003e4:	02020200 	.word	0x02020200
 80003e8:	01ff0000 	.word	0x01ff0000
 80003ec:	01010280 	.word	0x01010280
 80003f0:	580000c0 	.word	0x580000c0
 80003f4:	5c001000 	.word	0x5c001000
 80003f8:	ffff0000 	.word	0xffff0000
 80003fc:	51008108 	.word	0x51008108
 8000400:	52004000 	.word	0x52004000

08000404 <MX_FMC_Init>:

SDRAM_HandleTypeDef hsdram1;

/* FMC initialization function */
void MX_FMC_Init(void)
{
 8000404:	b580      	push	{r7, lr}
 8000406:	b090      	sub	sp, #64	; 0x40
 8000408:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 800040a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800040e:	2200      	movs	r2, #0
 8000410:	601a      	str	r2, [r3, #0]
 8000412:	605a      	str	r2, [r3, #4]
 8000414:	609a      	str	r2, [r3, #8]
 8000416:	60da      	str	r2, [r3, #12]
 8000418:	611a      	str	r2, [r3, #16]
 800041a:	615a      	str	r2, [r3, #20]
 800041c:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 800041e:	4b2e      	ldr	r3, [pc, #184]	; (80004d8 <MX_FMC_Init+0xd4>)
 8000420:	4a2e      	ldr	r2, [pc, #184]	; (80004dc <MX_FMC_Init+0xd8>)
 8000422:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 8000424:	4b2c      	ldr	r3, [pc, #176]	; (80004d8 <MX_FMC_Init+0xd4>)
 8000426:	2201      	movs	r2, #1
 8000428:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_9;
 800042a:	4b2b      	ldr	r3, [pc, #172]	; (80004d8 <MX_FMC_Init+0xd4>)
 800042c:	2201      	movs	r2, #1
 800042e:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8000430:	4b29      	ldr	r3, [pc, #164]	; (80004d8 <MX_FMC_Init+0xd4>)
 8000432:	2204      	movs	r2, #4
 8000434:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_32;
 8000436:	4b28      	ldr	r3, [pc, #160]	; (80004d8 <MX_FMC_Init+0xd4>)
 8000438:	2220      	movs	r2, #32
 800043a:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 800043c:	4b26      	ldr	r3, [pc, #152]	; (80004d8 <MX_FMC_Init+0xd4>)
 800043e:	2240      	movs	r2, #64	; 0x40
 8000440:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_1;
 8000442:	4b25      	ldr	r3, [pc, #148]	; (80004d8 <MX_FMC_Init+0xd4>)
 8000444:	2280      	movs	r2, #128	; 0x80
 8000446:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8000448:	4b23      	ldr	r3, [pc, #140]	; (80004d8 <MX_FMC_Init+0xd4>)
 800044a:	2200      	movs	r2, #0
 800044c:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 800044e:	4b22      	ldr	r3, [pc, #136]	; (80004d8 <MX_FMC_Init+0xd4>)
 8000450:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000454:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 8000456:	4b20      	ldr	r3, [pc, #128]	; (80004d8 <MX_FMC_Init+0xd4>)
 8000458:	2200      	movs	r2, #0
 800045a:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_2;
 800045c:	4b1e      	ldr	r3, [pc, #120]	; (80004d8 <MX_FMC_Init+0xd4>)
 800045e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000462:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 16;
 8000464:	2310      	movs	r3, #16
 8000466:	627b      	str	r3, [r7, #36]	; 0x24
  SdramTiming.ExitSelfRefreshDelay = 16;
 8000468:	2310      	movs	r3, #16
 800046a:	62bb      	str	r3, [r7, #40]	; 0x28
  SdramTiming.SelfRefreshTime = 16;
 800046c:	2310      	movs	r3, #16
 800046e:	62fb      	str	r3, [r7, #44]	; 0x2c
  SdramTiming.RowCycleDelay = 16;
 8000470:	2310      	movs	r3, #16
 8000472:	633b      	str	r3, [r7, #48]	; 0x30
  SdramTiming.WriteRecoveryTime = 16;
 8000474:	2310      	movs	r3, #16
 8000476:	637b      	str	r3, [r7, #52]	; 0x34
  SdramTiming.RPDelay = 16;
 8000478:	2310      	movs	r3, #16
 800047a:	63bb      	str	r3, [r7, #56]	; 0x38
  SdramTiming.RCDDelay = 16;
 800047c:	2310      	movs	r3, #16
 800047e:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8000480:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000484:	4619      	mov	r1, r3
 8000486:	4814      	ldr	r0, [pc, #80]	; (80004d8 <MX_FMC_Init+0xd4>)
 8000488:	f003 fb4e 	bl	8003b28 <HAL_SDRAM_Init>
 800048c:	4603      	mov	r3, r0
 800048e:	2b00      	cmp	r3, #0
 8000490:	d001      	beq.n	8000496 <MX_FMC_Init+0x92>
  {
    Error_Handler( );
 8000492:	f000 fbba 	bl	8000c0a <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */
    IS42S32800G_Context_t IS42S32800G_init;
    IS42S32800G_init.TargetBank = FMC_SDRAM_CMD_TARGET_BANK2;
 8000496:	2308      	movs	r3, #8
 8000498:	607b      	str	r3, [r7, #4]
    IS42S32800G_init.RefreshMode = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 800049a:	2303      	movs	r3, #3
 800049c:	60bb      	str	r3, [r7, #8]
    IS42S32800G_init.RefreshRate = REFRESH_COUNT;
 800049e:	f240 6303 	movw	r3, #1539	; 0x603
 80004a2:	60fb      	str	r3, [r7, #12]
    IS42S32800G_init.BurstLength = IS42S32800G_BURST_LENGTH_1;
 80004a4:	2300      	movs	r3, #0
 80004a6:	613b      	str	r3, [r7, #16]
    IS42S32800G_init.BurstType = IS42S32800G_BURST_TYPE_SEQUENTIAL;
 80004a8:	2300      	movs	r3, #0
 80004aa:	617b      	str	r3, [r7, #20]
    IS42S32800G_init.CASLatency = IS42S32800G_CAS_LATENCY_2;
 80004ac:	2320      	movs	r3, #32
 80004ae:	61bb      	str	r3, [r7, #24]
    IS42S32800G_init.OperationMode = IS42S32800G_OPERATING_MODE_STANDARD;
 80004b0:	2300      	movs	r3, #0
 80004b2:	61fb      	str	r3, [r7, #28]
    IS42S32800G_init.WriteBurstMode = IS42S32800G_WRITEBURST_MODE_SINGLE;
 80004b4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80004b8:	623b      	str	r3, [r7, #32]

    if (IS42S32800G_Init(&hsdram1, &IS42S32800G_init) != IS42S32800G_OK)
 80004ba:	1d3b      	adds	r3, r7, #4
 80004bc:	4619      	mov	r1, r3
 80004be:	4806      	ldr	r0, [pc, #24]	; (80004d8 <MX_FMC_Init+0xd4>)
 80004c0:	f000 fa98 	bl	80009f4 <IS42S32800G_Init>
 80004c4:	4603      	mov	r3, r0
 80004c6:	2b00      	cmp	r3, #0
 80004c8:	d001      	beq.n	80004ce <MX_FMC_Init+0xca>
    {
        Error_Handler();
 80004ca:	f000 fb9e 	bl	8000c0a <Error_Handler>
    }
  /* USER CODE END FMC_Init 2 */
}
 80004ce:	bf00      	nop
 80004d0:	3740      	adds	r7, #64	; 0x40
 80004d2:	46bd      	mov	sp, r7
 80004d4:	bd80      	pop	{r7, pc}
 80004d6:	bf00      	nop
 80004d8:	2400002c 	.word	0x2400002c
 80004dc:	52004140 	.word	0x52004140

080004e0 <HAL_FMC_MspInit>:

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 80004e0:	b580      	push	{r7, lr}
 80004e2:	b0ba      	sub	sp, #232	; 0xe8
 80004e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004e6:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80004ea:	2200      	movs	r2, #0
 80004ec:	601a      	str	r2, [r3, #0]
 80004ee:	605a      	str	r2, [r3, #4]
 80004f0:	609a      	str	r2, [r3, #8]
 80004f2:	60da      	str	r2, [r3, #12]
 80004f4:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 80004f6:	4b5c      	ldr	r3, [pc, #368]	; (8000668 <HAL_FMC_MspInit+0x188>)
 80004f8:	681b      	ldr	r3, [r3, #0]
 80004fa:	2b00      	cmp	r3, #0
 80004fc:	f040 80b0 	bne.w	8000660 <HAL_FMC_MspInit+0x180>
    return;
  }
  FMC_Initialized = 1;
 8000500:	4b59      	ldr	r3, [pc, #356]	; (8000668 <HAL_FMC_MspInit+0x188>)
 8000502:	2201      	movs	r2, #1
 8000504:	601a      	str	r2, [r3, #0]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000506:	f107 0308 	add.w	r3, r7, #8
 800050a:	22c8      	movs	r2, #200	; 0xc8
 800050c:	2100      	movs	r1, #0
 800050e:	4618      	mov	r0, r3
 8000510:	f003 fcca 	bl	8003ea8 <memset>

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FMC;
 8000514:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000518:	f04f 0300 	mov.w	r3, #0
 800051c:	e9c7 2302 	strd	r2, r3, [r7, #8]
    PeriphClkInitStruct.FmcClockSelection = RCC_FMCCLKSOURCE_D1HCLK;
 8000520:	2300      	movs	r3, #0
 8000522:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000524:	f107 0308 	add.w	r3, r7, #8
 8000528:	4618      	mov	r0, r3
 800052a:	f001 ff4f 	bl	80023cc <HAL_RCCEx_PeriphCLKConfig>
 800052e:	4603      	mov	r3, r0
 8000530:	2b00      	cmp	r3, #0
 8000532:	d001      	beq.n	8000538 <HAL_FMC_MspInit+0x58>
    {
      Error_Handler();
 8000534:	f000 fb69 	bl	8000c0a <Error_Handler>
    }

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8000538:	4b4c      	ldr	r3, [pc, #304]	; (800066c <HAL_FMC_MspInit+0x18c>)
 800053a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800053e:	4a4b      	ldr	r2, [pc, #300]	; (800066c <HAL_FMC_MspInit+0x18c>)
 8000540:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000544:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8000548:	4b48      	ldr	r3, [pc, #288]	; (800066c <HAL_FMC_MspInit+0x18c>)
 800054a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800054e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000552:	607b      	str	r3, [r7, #4]
 8000554:	687b      	ldr	r3, [r7, #4]
  PE14   ------> FMC_D11
  PH7   ------> FMC_SDCKE1
  PD8   ------> FMC_D13
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_1
 8000556:	f240 63ff 	movw	r3, #1791	; 0x6ff
 800055a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
                          |GPIO_PIN_0|GPIO_PIN_7|GPIO_PIN_2|GPIO_PIN_3
                          |GPIO_PIN_9|GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800055e:	2302      	movs	r3, #2
 8000560:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000564:	2300      	movs	r3, #0
 8000566:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800056a:	2303      	movs	r3, #3
 800056c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000570:	230c      	movs	r3, #12
 8000572:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4

  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000576:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800057a:	4619      	mov	r1, r3
 800057c:	483c      	ldr	r0, [pc, #240]	; (8000670 <HAL_FMC_MspInit+0x190>)
 800057e:	f000 fd5d 	bl	800103c <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_10|GPIO_PIN_9
 8000582:	f64f 7383 	movw	r3, #65411	; 0xff83
 8000586:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_15|GPIO_PIN_8
                          |GPIO_PIN_13|GPIO_PIN_7|GPIO_PIN_14;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800058a:	2302      	movs	r3, #2
 800058c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000590:	2300      	movs	r3, #0
 8000592:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000596:	2303      	movs	r3, #3
 8000598:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800059c:	230c      	movs	r3, #12
 800059e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80005a2:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80005a6:	4619      	mov	r1, r3
 80005a8:	4832      	ldr	r0, [pc, #200]	; (8000674 <HAL_FMC_MspInit+0x194>)
 80005aa:	f000 fd47 	bl	800103c <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_14|GPIO_PIN_13|GPIO_PIN_5
 80005ae:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80005b2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_9|GPIO_PIN_12
                          |GPIO_PIN_6|GPIO_PIN_8|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005b6:	2302      	movs	r3, #2
 80005b8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005bc:	2300      	movs	r3, #0
 80005be:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80005c2:	2303      	movs	r3, #3
 80005c4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80005c8:	230c      	movs	r3, #12
 80005ca:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4

  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80005ce:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80005d2:	4619      	mov	r1, r3
 80005d4:	4828      	ldr	r0, [pc, #160]	; (8000678 <HAL_FMC_MspInit+0x198>)
 80005d6:	f000 fd31 	bl	800103c <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_5|GPIO_PIN_4
 80005da:	f248 1333 	movw	r3, #33075	; 0x8133
 80005de:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
                          |GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005e2:	2302      	movs	r3, #2
 80005e4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005e8:	2300      	movs	r3, #0
 80005ea:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80005ee:	2303      	movs	r3, #3
 80005f0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80005f4:	230c      	movs	r3, #12
 80005f6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4

  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80005fa:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80005fe:	4619      	mov	r1, r3
 8000600:	481e      	ldr	r0, [pc, #120]	; (800067c <HAL_FMC_MspInit+0x19c>)
 8000602:	f000 fd1b 	bl	800103c <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15|GPIO_PIN_14
 8000606:	f24c 7303 	movw	r3, #50947	; 0xc703
 800060a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
                          |GPIO_PIN_10|GPIO_PIN_9|GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800060e:	2302      	movs	r3, #2
 8000610:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000614:	2300      	movs	r3, #0
 8000616:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800061a:	2303      	movs	r3, #3
 800061c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000620:	230c      	movs	r3, #12
 8000622:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000626:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800062a:	4619      	mov	r1, r3
 800062c:	4814      	ldr	r0, [pc, #80]	; (8000680 <HAL_FMC_MspInit+0x1a0>)
 800062e:	f000 fd05 	bl	800103c <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_3
 8000632:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8000636:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
                          |GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_12|GPIO_PIN_15|GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800063a:	2302      	movs	r3, #2
 800063c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000640:	2300      	movs	r3, #0
 8000642:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000646:	2303      	movs	r3, #3
 8000648:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800064c:	230c      	movs	r3, #12
 800064e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4

  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000652:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000656:	4619      	mov	r1, r3
 8000658:	480a      	ldr	r0, [pc, #40]	; (8000684 <HAL_FMC_MspInit+0x1a4>)
 800065a:	f000 fcef 	bl	800103c <HAL_GPIO_Init>
 800065e:	e000      	b.n	8000662 <HAL_FMC_MspInit+0x182>
    return;
 8000660:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8000662:	37e8      	adds	r7, #232	; 0xe8
 8000664:	46bd      	mov	sp, r7
 8000666:	bd80      	pop	{r7, pc}
 8000668:	24000060 	.word	0x24000060
 800066c:	58024400 	.word	0x58024400
 8000670:	58022000 	.word	0x58022000
 8000674:	58021000 	.word	0x58021000
 8000678:	58021c00 	.word	0x58021c00
 800067c:	58021800 	.word	0x58021800
 8000680:	58020c00 	.word	0x58020c00
 8000684:	58021400 	.word	0x58021400

08000688 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* sdramHandle){
 8000688:	b580      	push	{r7, lr}
 800068a:	b082      	sub	sp, #8
 800068c:	af00      	add	r7, sp, #0
 800068e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8000690:	f7ff ff26 	bl	80004e0 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8000694:	bf00      	nop
 8000696:	3708      	adds	r7, #8
 8000698:	46bd      	mov	sp, r7
 800069a:	bd80      	pop	{r7, pc}

0800069c <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	b08c      	sub	sp, #48	; 0x30
 80006a0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006a2:	f107 031c 	add.w	r3, r7, #28
 80006a6:	2200      	movs	r2, #0
 80006a8:	601a      	str	r2, [r3, #0]
 80006aa:	605a      	str	r2, [r3, #4]
 80006ac:	609a      	str	r2, [r3, #8]
 80006ae:	60da      	str	r2, [r3, #12]
 80006b0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80006b2:	4b39      	ldr	r3, [pc, #228]	; (8000798 <MX_GPIO_Init+0xfc>)
 80006b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006b8:	4a37      	ldr	r2, [pc, #220]	; (8000798 <MX_GPIO_Init+0xfc>)
 80006ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80006be:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80006c2:	4b35      	ldr	r3, [pc, #212]	; (8000798 <MX_GPIO_Init+0xfc>)
 80006c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80006cc:	61bb      	str	r3, [r7, #24]
 80006ce:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80006d0:	4b31      	ldr	r3, [pc, #196]	; (8000798 <MX_GPIO_Init+0xfc>)
 80006d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006d6:	4a30      	ldr	r2, [pc, #192]	; (8000798 <MX_GPIO_Init+0xfc>)
 80006d8:	f043 0310 	orr.w	r3, r3, #16
 80006dc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80006e0:	4b2d      	ldr	r3, [pc, #180]	; (8000798 <MX_GPIO_Init+0xfc>)
 80006e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006e6:	f003 0310 	and.w	r3, r3, #16
 80006ea:	617b      	str	r3, [r7, #20]
 80006ec:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006ee:	4b2a      	ldr	r3, [pc, #168]	; (8000798 <MX_GPIO_Init+0xfc>)
 80006f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006f4:	4a28      	ldr	r2, [pc, #160]	; (8000798 <MX_GPIO_Init+0xfc>)
 80006f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006fa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80006fe:	4b26      	ldr	r3, [pc, #152]	; (8000798 <MX_GPIO_Init+0xfc>)
 8000700:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000704:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000708:	613b      	str	r3, [r7, #16]
 800070a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800070c:	4b22      	ldr	r3, [pc, #136]	; (8000798 <MX_GPIO_Init+0xfc>)
 800070e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000712:	4a21      	ldr	r2, [pc, #132]	; (8000798 <MX_GPIO_Init+0xfc>)
 8000714:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000718:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800071c:	4b1e      	ldr	r3, [pc, #120]	; (8000798 <MX_GPIO_Init+0xfc>)
 800071e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000722:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000726:	60fb      	str	r3, [r7, #12]
 8000728:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800072a:	4b1b      	ldr	r3, [pc, #108]	; (8000798 <MX_GPIO_Init+0xfc>)
 800072c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000730:	4a19      	ldr	r2, [pc, #100]	; (8000798 <MX_GPIO_Init+0xfc>)
 8000732:	f043 0308 	orr.w	r3, r3, #8
 8000736:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800073a:	4b17      	ldr	r3, [pc, #92]	; (8000798 <MX_GPIO_Init+0xfc>)
 800073c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000740:	f003 0308 	and.w	r3, r3, #8
 8000744:	60bb      	str	r3, [r7, #8]
 8000746:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000748:	4b13      	ldr	r3, [pc, #76]	; (8000798 <MX_GPIO_Init+0xfc>)
 800074a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800074e:	4a12      	ldr	r2, [pc, #72]	; (8000798 <MX_GPIO_Init+0xfc>)
 8000750:	f043 0320 	orr.w	r3, r3, #32
 8000754:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000758:	4b0f      	ldr	r3, [pc, #60]	; (8000798 <MX_GPIO_Init+0xfc>)
 800075a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800075e:	f003 0320 	and.w	r3, r3, #32
 8000762:	607b      	str	r3, [r7, #4]
 8000764:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, LED_1_Pin|LED_2_Pin, GPIO_PIN_RESET);
 8000766:	2200      	movs	r2, #0
 8000768:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 800076c:	480b      	ldr	r0, [pc, #44]	; (800079c <MX_GPIO_Init+0x100>)
 800076e:	f000 fe15 	bl	800139c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PIPin PIPin */
  GPIO_InitStruct.Pin = LED_1_Pin|LED_2_Pin;
 8000772:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000776:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000778:	2301      	movs	r3, #1
 800077a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800077c:	2300      	movs	r3, #0
 800077e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000780:	2300      	movs	r3, #0
 8000782:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000784:	f107 031c 	add.w	r3, r7, #28
 8000788:	4619      	mov	r1, r3
 800078a:	4804      	ldr	r0, [pc, #16]	; (800079c <MX_GPIO_Init+0x100>)
 800078c:	f000 fc56 	bl	800103c <HAL_GPIO_Init>

}
 8000790:	bf00      	nop
 8000792:	3730      	adds	r7, #48	; 0x30
 8000794:	46bd      	mov	sp, r7
 8000796:	bd80      	pop	{r7, pc}
 8000798:	58024400 	.word	0x58024400
 800079c:	58022000 	.word	0x58022000

080007a0 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b086      	sub	sp, #24
 80007a4:	af00      	add	r7, sp, #0
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80007a6:	4b50      	ldr	r3, [pc, #320]	; (80008e8 <main+0x148>)
 80007a8:	695b      	ldr	r3, [r3, #20]
 80007aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d11b      	bne.n	80007ea <main+0x4a>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80007b2:	f3bf 8f4f 	dsb	sy
}
 80007b6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80007b8:	f3bf 8f6f 	isb	sy
}
 80007bc:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80007be:	4b4a      	ldr	r3, [pc, #296]	; (80008e8 <main+0x148>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80007c6:	f3bf 8f4f 	dsb	sy
}
 80007ca:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80007cc:	f3bf 8f6f 	isb	sy
}
 80007d0:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80007d2:	4b45      	ldr	r3, [pc, #276]	; (80008e8 <main+0x148>)
 80007d4:	695b      	ldr	r3, [r3, #20]
 80007d6:	4a44      	ldr	r2, [pc, #272]	; (80008e8 <main+0x148>)
 80007d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80007dc:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80007de:	f3bf 8f4f 	dsb	sy
}
 80007e2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80007e4:	f3bf 8f6f 	isb	sy
}
 80007e8:	e000      	b.n	80007ec <main+0x4c>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80007ea:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 80007ec:	4b3e      	ldr	r3, [pc, #248]	; (80008e8 <main+0x148>)
 80007ee:	695b      	ldr	r3, [r3, #20]
 80007f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d138      	bne.n	800086a <main+0xca>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 80007f8:	4b3b      	ldr	r3, [pc, #236]	; (80008e8 <main+0x148>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000800:	f3bf 8f4f 	dsb	sy
}
 8000804:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000806:	4b38      	ldr	r3, [pc, #224]	; (80008e8 <main+0x148>)
 8000808:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800080c:	60bb      	str	r3, [r7, #8]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800080e:	68bb      	ldr	r3, [r7, #8]
 8000810:	0b5b      	lsrs	r3, r3, #13
 8000812:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000816:	607b      	str	r3, [r7, #4]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000818:	68bb      	ldr	r3, [r7, #8]
 800081a:	08db      	lsrs	r3, r3, #3
 800081c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000820:	603b      	str	r3, [r7, #0]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	015a      	lsls	r2, r3, #5
 8000826:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 800082a:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 800082c:	683a      	ldr	r2, [r7, #0]
 800082e:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000830:	492d      	ldr	r1, [pc, #180]	; (80008e8 <main+0x148>)
 8000832:	4313      	orrs	r3, r2
 8000834:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000838:	683b      	ldr	r3, [r7, #0]
 800083a:	1e5a      	subs	r2, r3, #1
 800083c:	603a      	str	r2, [r7, #0]
 800083e:	2b00      	cmp	r3, #0
 8000840:	d1ef      	bne.n	8000822 <main+0x82>
    } while(sets-- != 0U);
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	1e5a      	subs	r2, r3, #1
 8000846:	607a      	str	r2, [r7, #4]
 8000848:	2b00      	cmp	r3, #0
 800084a:	d1e5      	bne.n	8000818 <main+0x78>
  __ASM volatile ("dsb 0xF":::"memory");
 800084c:	f3bf 8f4f 	dsb	sy
}
 8000850:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000852:	4b25      	ldr	r3, [pc, #148]	; (80008e8 <main+0x148>)
 8000854:	695b      	ldr	r3, [r3, #20]
 8000856:	4a24      	ldr	r2, [pc, #144]	; (80008e8 <main+0x148>)
 8000858:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800085c:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800085e:	f3bf 8f4f 	dsb	sy
}
 8000862:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000864:	f3bf 8f6f 	isb	sy
}
 8000868:	e000      	b.n	800086c <main+0xcc>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 800086a:	bf00      	nop
//    }
    /* USER CODE END Boot_Mode_Sequence_1 */
    /* MCU Configuration--------------------------------------------------------*/

    /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
    HAL_Init();
 800086c:	f000 fa40 	bl	8000cf0 <HAL_Init>
    /* USER CODE BEGIN Init */

    /* USER CODE END Init */

    /* Configure the system clock */
    SystemClock_Config();
 8000870:	f000 f844 	bl	80008fc <SystemClock_Config>
    /* USER CODE BEGIN SysInit */

    /* USER CODE END SysInit */

    /* Initialize all configured peripherals */
    MX_GPIO_Init();
 8000874:	f7ff ff12 	bl	800069c <MX_GPIO_Init>
    MX_FMC_Init();
 8000878:	f7ff fdc4 	bl	8000404 <MX_FMC_Init>
    /* USER CODE BEGIN 2 */
    for (int i = 0; i < 4096; i++)
 800087c:	2300      	movs	r3, #0
 800087e:	617b      	str	r3, [r7, #20]
 8000880:	e007      	b.n	8000892 <main+0xf2>
    {
        w_buf[i] = 0x77;
 8000882:	4a1a      	ldr	r2, [pc, #104]	; (80008ec <main+0x14c>)
 8000884:	697b      	ldr	r3, [r7, #20]
 8000886:	4413      	add	r3, r2
 8000888:	2277      	movs	r2, #119	; 0x77
 800088a:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < 4096; i++)
 800088c:	697b      	ldr	r3, [r7, #20]
 800088e:	3301      	adds	r3, #1
 8000890:	617b      	str	r3, [r7, #20]
 8000892:	697b      	ldr	r3, [r7, #20]
 8000894:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000898:	dbf3      	blt.n	8000882 <main+0xe2>
    }

//    memcpy((uint32_t*)SDRAM_BASE_ADDRESS, w_buf, 4096);
//    memcpy(r_buf, (uint32_t*)SDRAM_BASE_ADDRESS, 4096);
    uint32_t* p = (uint32_t*)SDRAM_BASE_ADDRESS;
 800089a:	f04f 4350 	mov.w	r3, #3489660928	; 0xd0000000
 800089e:	60fb      	str	r3, [r7, #12]
    for (uint32_t i = 0; i < (0x02000000 / 4); i++)
 80008a0:	2300      	movs	r3, #0
 80008a2:	613b      	str	r3, [r7, #16]
 80008a4:	e008      	b.n	80008b8 <main+0x118>
    {
        *(p + i) = 0x12345678;
 80008a6:	693b      	ldr	r3, [r7, #16]
 80008a8:	009b      	lsls	r3, r3, #2
 80008aa:	68fa      	ldr	r2, [r7, #12]
 80008ac:	4413      	add	r3, r2
 80008ae:	4a10      	ldr	r2, [pc, #64]	; (80008f0 <main+0x150>)
 80008b0:	601a      	str	r2, [r3, #0]
    for (uint32_t i = 0; i < (0x02000000 / 4); i++)
 80008b2:	693b      	ldr	r3, [r7, #16]
 80008b4:	3301      	adds	r3, #1
 80008b6:	613b      	str	r3, [r7, #16]
 80008b8:	693b      	ldr	r3, [r7, #16]
 80008ba:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80008be:	d3f2      	bcc.n	80008a6 <main+0x106>
    while (1)
    {
        /* USER CODE END WHILE */

        /* USER CODE BEGIN 3 */
        HAL_GPIO_TogglePin(LED_1_GPIO_Port, LED_1_Pin);
 80008c0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80008c4:	480b      	ldr	r0, [pc, #44]	; (80008f4 <main+0x154>)
 80008c6:	f000 fd82 	bl	80013ce <HAL_GPIO_TogglePin>
        HAL_GPIO_TogglePin(LED_2_GPIO_Port, LED_2_Pin);
 80008ca:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80008ce:	4809      	ldr	r0, [pc, #36]	; (80008f4 <main+0x154>)
 80008d0:	f000 fd7d 	bl	80013ce <HAL_GPIO_TogglePin>
        HAL_Delay(500);
 80008d4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80008d8:	f000 fa9c 	bl	8000e14 <HAL_Delay>
        test_count++;
 80008dc:	4b06      	ldr	r3, [pc, #24]	; (80008f8 <main+0x158>)
 80008de:	681b      	ldr	r3, [r3, #0]
 80008e0:	3301      	adds	r3, #1
 80008e2:	4a05      	ldr	r2, [pc, #20]	; (80008f8 <main+0x158>)
 80008e4:	6013      	str	r3, [r2, #0]
        HAL_GPIO_TogglePin(LED_1_GPIO_Port, LED_1_Pin);
 80008e6:	e7eb      	b.n	80008c0 <main+0x120>
 80008e8:	e000ed00 	.word	0xe000ed00
 80008ec:	24000068 	.word	0x24000068
 80008f0:	12345678 	.word	0x12345678
 80008f4:	58022000 	.word	0x58022000
 80008f8:	24000064 	.word	0x24000064

080008fc <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b09c      	sub	sp, #112	; 0x70
 8000900:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000902:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000906:	224c      	movs	r2, #76	; 0x4c
 8000908:	2100      	movs	r1, #0
 800090a:	4618      	mov	r0, r3
 800090c:	f003 facc 	bl	8003ea8 <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000910:	1d3b      	adds	r3, r7, #4
 8000912:	2220      	movs	r2, #32
 8000914:	2100      	movs	r1, #0
 8000916:	4618      	mov	r0, r3
 8000918:	f003 fac6 	bl	8003ea8 <memset>

    /** Supply configuration update enable
     */
    HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 800091c:	2004      	movs	r0, #4
 800091e:	f000 fd71 	bl	8001404 <HAL_PWREx_ConfigSupply>

    /** Configure the main internal regulator output voltage
     */
    __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000922:	2300      	movs	r3, #0
 8000924:	603b      	str	r3, [r7, #0]
 8000926:	4b31      	ldr	r3, [pc, #196]	; (80009ec <SystemClock_Config+0xf0>)
 8000928:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800092a:	4a30      	ldr	r2, [pc, #192]	; (80009ec <SystemClock_Config+0xf0>)
 800092c:	f023 0301 	bic.w	r3, r3, #1
 8000930:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000932:	4b2e      	ldr	r3, [pc, #184]	; (80009ec <SystemClock_Config+0xf0>)
 8000934:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000936:	f003 0301 	and.w	r3, r3, #1
 800093a:	603b      	str	r3, [r7, #0]
 800093c:	4b2c      	ldr	r3, [pc, #176]	; (80009f0 <SystemClock_Config+0xf4>)
 800093e:	699b      	ldr	r3, [r3, #24]
 8000940:	4a2b      	ldr	r2, [pc, #172]	; (80009f0 <SystemClock_Config+0xf4>)
 8000942:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000946:	6193      	str	r3, [r2, #24]
 8000948:	4b29      	ldr	r3, [pc, #164]	; (80009f0 <SystemClock_Config+0xf4>)
 800094a:	699b      	ldr	r3, [r3, #24]
 800094c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000950:	603b      	str	r3, [r7, #0]
 8000952:	683b      	ldr	r3, [r7, #0]

    while (!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY))
 8000954:	bf00      	nop
 8000956:	4b26      	ldr	r3, [pc, #152]	; (80009f0 <SystemClock_Config+0xf4>)
 8000958:	699b      	ldr	r3, [r3, #24]
 800095a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800095e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000962:	d1f8      	bne.n	8000956 <SystemClock_Config+0x5a>
    }

    /** Initializes the RCC Oscillators according to the specified parameters
     * in the RCC_OscInitTypeDef structure.
     */
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000964:	2302      	movs	r3, #2
 8000966:	627b      	str	r3, [r7, #36]	; 0x24
    RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000968:	2301      	movs	r3, #1
 800096a:	633b      	str	r3, [r7, #48]	; 0x30
    RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800096c:	2340      	movs	r3, #64	; 0x40
 800096e:	637b      	str	r3, [r7, #52]	; 0x34
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000970:	2302      	movs	r3, #2
 8000972:	64bb      	str	r3, [r7, #72]	; 0x48
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000974:	2300      	movs	r3, #0
 8000976:	64fb      	str	r3, [r7, #76]	; 0x4c
    RCC_OscInitStruct.PLL.PLLM = 4;
 8000978:	2304      	movs	r3, #4
 800097a:	653b      	str	r3, [r7, #80]	; 0x50
    RCC_OscInitStruct.PLL.PLLN = 50;
 800097c:	2332      	movs	r3, #50	; 0x32
 800097e:	657b      	str	r3, [r7, #84]	; 0x54
    RCC_OscInitStruct.PLL.PLLP = 2;
 8000980:	2302      	movs	r3, #2
 8000982:	65bb      	str	r3, [r7, #88]	; 0x58
    RCC_OscInitStruct.PLL.PLLQ = 5;
 8000984:	2305      	movs	r3, #5
 8000986:	65fb      	str	r3, [r7, #92]	; 0x5c
    RCC_OscInitStruct.PLL.PLLR = 2;
 8000988:	2302      	movs	r3, #2
 800098a:	663b      	str	r3, [r7, #96]	; 0x60
    RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800098c:	230c      	movs	r3, #12
 800098e:	667b      	str	r3, [r7, #100]	; 0x64
    RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000990:	2300      	movs	r3, #0
 8000992:	66bb      	str	r3, [r7, #104]	; 0x68
    RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000994:	2300      	movs	r3, #0
 8000996:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000998:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800099c:	4618      	mov	r0, r3
 800099e:	f000 fd8b 	bl	80014b8 <HAL_RCC_OscConfig>
 80009a2:	4603      	mov	r3, r0
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d001      	beq.n	80009ac <SystemClock_Config+0xb0>
    {
        Error_Handler();
 80009a8:	f000 f92f 	bl	8000c0a <Error_Handler>
    }

    /** Initializes the CPU, AHB and APB buses clocks
     */
    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80009ac:	233f      	movs	r3, #63	; 0x3f
 80009ae:	607b      	str	r3, [r7, #4]
            | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2
            | RCC_CLOCKTYPE_D3PCLK1 | RCC_CLOCKTYPE_D1PCLK1;
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009b0:	2303      	movs	r3, #3
 80009b2:	60bb      	str	r3, [r7, #8]
    RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80009b4:	2300      	movs	r3, #0
 80009b6:	60fb      	str	r3, [r7, #12]
    RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80009b8:	2308      	movs	r3, #8
 80009ba:	613b      	str	r3, [r7, #16]
    RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80009bc:	2340      	movs	r3, #64	; 0x40
 80009be:	617b      	str	r3, [r7, #20]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80009c0:	2340      	movs	r3, #64	; 0x40
 80009c2:	61bb      	str	r3, [r7, #24]
    RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80009c4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80009c8:	61fb      	str	r3, [r7, #28]
    RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80009ca:	2340      	movs	r3, #64	; 0x40
 80009cc:	623b      	str	r3, [r7, #32]

    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80009ce:	1d3b      	adds	r3, r7, #4
 80009d0:	2102      	movs	r1, #2
 80009d2:	4618      	mov	r0, r3
 80009d4:	f001 f9ca 	bl	8001d6c <HAL_RCC_ClockConfig>
 80009d8:	4603      	mov	r3, r0
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d001      	beq.n	80009e2 <SystemClock_Config+0xe6>
    {
        Error_Handler();
 80009de:	f000 f914 	bl	8000c0a <Error_Handler>
    }
}
 80009e2:	bf00      	nop
 80009e4:	3770      	adds	r7, #112	; 0x70
 80009e6:	46bd      	mov	sp, r7
 80009e8:	bd80      	pop	{r7, pc}
 80009ea:	bf00      	nop
 80009ec:	58000400 	.word	0x58000400
 80009f0:	58024800 	.word	0x58024800

080009f4 <IS42S32800G_Init>:
 * @param  Ctx Component object pointer
 * @param  pRegMode : Pointer to Register Mode structure
 * @retval error status
 */
int32_t IS42S32800G_Init(SDRAM_HandleTypeDef *Ctx, IS42S32800G_Context_t *pRegMode)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b084      	sub	sp, #16
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	6078      	str	r0, [r7, #4]
 80009fc:	6039      	str	r1, [r7, #0]
    int32_t ret = IS42S32800G_ERROR;
 80009fe:	f04f 33ff 	mov.w	r3, #4294967295
 8000a02:	60fb      	str	r3, [r7, #12]

    /* Step 1: Configure a clock configuration enable command */
    if (IS42S32800G_ClockEnable(Ctx, pRegMode->TargetBank) == IS42S32800G_OK)
 8000a04:	683b      	ldr	r3, [r7, #0]
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	4619      	mov	r1, r3
 8000a0a:	6878      	ldr	r0, [r7, #4]
 8000a0c:	f000 f832 	bl	8000a74 <IS42S32800G_ClockEnable>
 8000a10:	4603      	mov	r3, r0
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	d128      	bne.n	8000a68 <IS42S32800G_Init+0x74>
    {
        /* Step 2: Insert 100 us minimum delay */
        /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
        (void)IS42S32800G_Delay(1);
 8000a16:	2001      	movs	r0, #1
 8000a18:	f000 f8e2 	bl	8000be0 <IS42S32800G_Delay>

        /* Step 3: Configure a PALL (precharge all) command */
        if (IS42S32800G_Precharge(Ctx, pRegMode->TargetBank) == IS42S32800G_OK)
 8000a1c:	683b      	ldr	r3, [r7, #0]
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	4619      	mov	r1, r3
 8000a22:	6878      	ldr	r0, [r7, #4]
 8000a24:	f000 f84a 	bl	8000abc <IS42S32800G_Precharge>
 8000a28:	4603      	mov	r3, r0
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d11c      	bne.n	8000a68 <IS42S32800G_Init+0x74>
        {
            /* Step 4: Configure a Refresh command */
            if (IS42S32800G_RefreshMode(Ctx, pRegMode->TargetBank, pRegMode->RefreshMode) == IS42S32800G_OK)
 8000a2e:	683b      	ldr	r3, [r7, #0]
 8000a30:	6819      	ldr	r1, [r3, #0]
 8000a32:	683b      	ldr	r3, [r7, #0]
 8000a34:	685b      	ldr	r3, [r3, #4]
 8000a36:	461a      	mov	r2, r3
 8000a38:	6878      	ldr	r0, [r7, #4]
 8000a3a:	f000 f897 	bl	8000b6c <IS42S32800G_RefreshMode>
 8000a3e:	4603      	mov	r3, r0
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d111      	bne.n	8000a68 <IS42S32800G_Init+0x74>
            {
                /* Step 5: Program the external memory mode register */
                if (IS42S32800G_ModeRegConfig(Ctx, pRegMode) == IS42S32800G_OK)
 8000a44:	6839      	ldr	r1, [r7, #0]
 8000a46:	6878      	ldr	r0, [r7, #4]
 8000a48:	f000 f85c 	bl	8000b04 <IS42S32800G_ModeRegConfig>
 8000a4c:	4603      	mov	r3, r0
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d10a      	bne.n	8000a68 <IS42S32800G_Init+0x74>
                {
                    /* Step 6: Set the refresh rate counter */
                    if (IS42S32800G_RefreshRate(Ctx, pRegMode->RefreshRate) == IS42S32800G_OK)
 8000a52:	683b      	ldr	r3, [r7, #0]
 8000a54:	689b      	ldr	r3, [r3, #8]
 8000a56:	4619      	mov	r1, r3
 8000a58:	6878      	ldr	r0, [r7, #4]
 8000a5a:	f000 f8ad 	bl	8000bb8 <IS42S32800G_RefreshRate>
 8000a5e:	4603      	mov	r3, r0
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d101      	bne.n	8000a68 <IS42S32800G_Init+0x74>
                    {
                        ret = IS42S32800G_OK;
 8000a64:	2300      	movs	r3, #0
 8000a66:	60fb      	str	r3, [r7, #12]
                    }
                }
            }
        }
    }
    return ret;
 8000a68:	68fb      	ldr	r3, [r7, #12]
}
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	3710      	adds	r7, #16
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	bd80      	pop	{r7, pc}
	...

08000a74 <IS42S32800G_ClockEnable>:
 * @param  Ctx Component object pointer
 * @param  Interface Could be FMC_SDRAM_CMD_TARGET_BANK1 or FMC_SDRAM_CMD_TARGET_BANK2
 * @retval error status
 */
int32_t IS42S32800G_ClockEnable(SDRAM_HandleTypeDef *Ctx, uint32_t Interface)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b082      	sub	sp, #8
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	6078      	str	r0, [r7, #4]
 8000a7c:	6039      	str	r1, [r7, #0]
    Command.CommandMode = IS42S32800G_CLK_ENABLE_CMD;
 8000a7e:	4b0e      	ldr	r3, [pc, #56]	; (8000ab8 <IS42S32800G_ClockEnable+0x44>)
 8000a80:	2201      	movs	r2, #1
 8000a82:	601a      	str	r2, [r3, #0]
    Command.CommandTarget = Interface;
 8000a84:	4a0c      	ldr	r2, [pc, #48]	; (8000ab8 <IS42S32800G_ClockEnable+0x44>)
 8000a86:	683b      	ldr	r3, [r7, #0]
 8000a88:	6053      	str	r3, [r2, #4]
    Command.AutoRefreshNumber = 1;
 8000a8a:	4b0b      	ldr	r3, [pc, #44]	; (8000ab8 <IS42S32800G_ClockEnable+0x44>)
 8000a8c:	2201      	movs	r2, #1
 8000a8e:	609a      	str	r2, [r3, #8]
    Command.ModeRegisterDefinition = 0;
 8000a90:	4b09      	ldr	r3, [pc, #36]	; (8000ab8 <IS42S32800G_ClockEnable+0x44>)
 8000a92:	2200      	movs	r2, #0
 8000a94:	60da      	str	r2, [r3, #12]

    /* Send the command */
    if (HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800G_TIMEOUT) != HAL_OK)
 8000a96:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000a9a:	4907      	ldr	r1, [pc, #28]	; (8000ab8 <IS42S32800G_ClockEnable+0x44>)
 8000a9c:	6878      	ldr	r0, [r7, #4]
 8000a9e:	f003 f87f 	bl	8003ba0 <HAL_SDRAM_SendCommand>
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d002      	beq.n	8000aae <IS42S32800G_ClockEnable+0x3a>
    {
        return IS42S32800G_ERROR;
 8000aa8:	f04f 33ff 	mov.w	r3, #4294967295
 8000aac:	e000      	b.n	8000ab0 <IS42S32800G_ClockEnable+0x3c>
    }
    else
    {
        return IS42S32800G_OK;
 8000aae:	2300      	movs	r3, #0
    }
}
 8000ab0:	4618      	mov	r0, r3
 8000ab2:	3708      	adds	r7, #8
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	bd80      	pop	{r7, pc}
 8000ab8:	24001068 	.word	0x24001068

08000abc <IS42S32800G_Precharge>:
 * @param  Ctx Component object pointer
 * @param  Interface Could be FMC_SDRAM_CMD_TARGET_BANK1 or FMC_SDRAM_CMD_TARGET_BANK2
 * @retval error status
 */
int32_t IS42S32800G_Precharge(SDRAM_HandleTypeDef *Ctx, uint32_t Interface)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b082      	sub	sp, #8
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]
 8000ac4:	6039      	str	r1, [r7, #0]
    Command.CommandMode = IS42S32800G_PALL_CMD;
 8000ac6:	4b0e      	ldr	r3, [pc, #56]	; (8000b00 <IS42S32800G_Precharge+0x44>)
 8000ac8:	2202      	movs	r2, #2
 8000aca:	601a      	str	r2, [r3, #0]
    Command.CommandTarget = Interface;
 8000acc:	4a0c      	ldr	r2, [pc, #48]	; (8000b00 <IS42S32800G_Precharge+0x44>)
 8000ace:	683b      	ldr	r3, [r7, #0]
 8000ad0:	6053      	str	r3, [r2, #4]
    Command.AutoRefreshNumber = 1;
 8000ad2:	4b0b      	ldr	r3, [pc, #44]	; (8000b00 <IS42S32800G_Precharge+0x44>)
 8000ad4:	2201      	movs	r2, #1
 8000ad6:	609a      	str	r2, [r3, #8]
    Command.ModeRegisterDefinition = 0;
 8000ad8:	4b09      	ldr	r3, [pc, #36]	; (8000b00 <IS42S32800G_Precharge+0x44>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	60da      	str	r2, [r3, #12]

    /* Send the command */
    if (HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800G_TIMEOUT) != HAL_OK)
 8000ade:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000ae2:	4907      	ldr	r1, [pc, #28]	; (8000b00 <IS42S32800G_Precharge+0x44>)
 8000ae4:	6878      	ldr	r0, [r7, #4]
 8000ae6:	f003 f85b 	bl	8003ba0 <HAL_SDRAM_SendCommand>
 8000aea:	4603      	mov	r3, r0
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d002      	beq.n	8000af6 <IS42S32800G_Precharge+0x3a>
    {
        return IS42S32800G_ERROR;
 8000af0:	f04f 33ff 	mov.w	r3, #4294967295
 8000af4:	e000      	b.n	8000af8 <IS42S32800G_Precharge+0x3c>
    }
    else
    {
        return IS42S32800G_OK;
 8000af6:	2300      	movs	r3, #0
    }
}
 8000af8:	4618      	mov	r0, r3
 8000afa:	3708      	adds	r7, #8
 8000afc:	46bd      	mov	sp, r7
 8000afe:	bd80      	pop	{r7, pc}
 8000b00:	24001068 	.word	0x24001068

08000b04 <IS42S32800G_ModeRegConfig>:
 * @param  Ctx Component object pointer
 * @param  pRegMode : Pointer to Register Mode structure
 * @retval error status
 */
int32_t IS42S32800G_ModeRegConfig(SDRAM_HandleTypeDef *Ctx, IS42S32800G_Context_t *pRegMode)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b084      	sub	sp, #16
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	6078      	str	r0, [r7, #4]
 8000b0c:	6039      	str	r1, [r7, #0]
    uint32_t tmpmrd;

    /* Program the external memory mode register */
    tmpmrd = (uint32_t)pRegMode->BurstLength |\
 8000b0e:	683b      	ldr	r3, [r7, #0]
 8000b10:	68da      	ldr	r2, [r3, #12]
 pRegMode->BurstType |\
 8000b12:	683b      	ldr	r3, [r7, #0]
 8000b14:	691b      	ldr	r3, [r3, #16]
    tmpmrd = (uint32_t)pRegMode->BurstLength |\
 8000b16:	431a      	orrs	r2, r3
 pRegMode->CASLatency |\
 8000b18:	683b      	ldr	r3, [r7, #0]
 8000b1a:	695b      	ldr	r3, [r3, #20]
 pRegMode->BurstType |\
 8000b1c:	431a      	orrs	r2, r3
 pRegMode->OperationMode
 8000b1e:	683b      	ldr	r3, [r7, #0]
 8000b20:	699b      	ldr	r3, [r3, #24]
 pRegMode->CASLatency |\
 8000b22:	431a      	orrs	r2, r3
            |\
 pRegMode->WriteBurstMode;
 8000b24:	683b      	ldr	r3, [r7, #0]
 8000b26:	69db      	ldr	r3, [r3, #28]
    tmpmrd = (uint32_t)pRegMode->BurstLength |\
 8000b28:	4313      	orrs	r3, r2
 8000b2a:	60fb      	str	r3, [r7, #12]

    Command.CommandMode = IS42S32800G_LOAD_MODE_CMD;
 8000b2c:	4b0e      	ldr	r3, [pc, #56]	; (8000b68 <IS42S32800G_ModeRegConfig+0x64>)
 8000b2e:	2204      	movs	r2, #4
 8000b30:	601a      	str	r2, [r3, #0]
    Command.CommandTarget = pRegMode->TargetBank;
 8000b32:	683b      	ldr	r3, [r7, #0]
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	4a0c      	ldr	r2, [pc, #48]	; (8000b68 <IS42S32800G_ModeRegConfig+0x64>)
 8000b38:	6053      	str	r3, [r2, #4]
    Command.AutoRefreshNumber = 1;
 8000b3a:	4b0b      	ldr	r3, [pc, #44]	; (8000b68 <IS42S32800G_ModeRegConfig+0x64>)
 8000b3c:	2201      	movs	r2, #1
 8000b3e:	609a      	str	r2, [r3, #8]
    Command.ModeRegisterDefinition = tmpmrd;
 8000b40:	4a09      	ldr	r2, [pc, #36]	; (8000b68 <IS42S32800G_ModeRegConfig+0x64>)
 8000b42:	68fb      	ldr	r3, [r7, #12]
 8000b44:	60d3      	str	r3, [r2, #12]

    /* Send the command */
    if (HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800G_TIMEOUT) != HAL_OK)
 8000b46:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000b4a:	4907      	ldr	r1, [pc, #28]	; (8000b68 <IS42S32800G_ModeRegConfig+0x64>)
 8000b4c:	6878      	ldr	r0, [r7, #4]
 8000b4e:	f003 f827 	bl	8003ba0 <HAL_SDRAM_SendCommand>
 8000b52:	4603      	mov	r3, r0
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d002      	beq.n	8000b5e <IS42S32800G_ModeRegConfig+0x5a>
    {
        return IS42S32800G_ERROR;
 8000b58:	f04f 33ff 	mov.w	r3, #4294967295
 8000b5c:	e000      	b.n	8000b60 <IS42S32800G_ModeRegConfig+0x5c>
    }
    else
    {
        return IS42S32800G_OK;
 8000b5e:	2300      	movs	r3, #0
    }
}
 8000b60:	4618      	mov	r0, r3
 8000b62:	3710      	adds	r7, #16
 8000b64:	46bd      	mov	sp, r7
 8000b66:	bd80      	pop	{r7, pc}
 8000b68:	24001068 	.word	0x24001068

08000b6c <IS42S32800G_RefreshMode>:
 * @param  RefreshMode Could be IS42S32800G_CMD_AUTOREFRESH_MODE or
 *                      IS42S32800G_CMD_SELFREFRESH_MODE
 * @retval error status
 */
int32_t IS42S32800G_RefreshMode(SDRAM_HandleTypeDef *Ctx, uint32_t Interface, uint32_t RefreshMode)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b084      	sub	sp, #16
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	60f8      	str	r0, [r7, #12]
 8000b74:	60b9      	str	r1, [r7, #8]
 8000b76:	607a      	str	r2, [r7, #4]
    Command.CommandMode = RefreshMode;
 8000b78:	4a0e      	ldr	r2, [pc, #56]	; (8000bb4 <IS42S32800G_RefreshMode+0x48>)
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	6013      	str	r3, [r2, #0]
    Command.CommandTarget = Interface;
 8000b7e:	4a0d      	ldr	r2, [pc, #52]	; (8000bb4 <IS42S32800G_RefreshMode+0x48>)
 8000b80:	68bb      	ldr	r3, [r7, #8]
 8000b82:	6053      	str	r3, [r2, #4]
    Command.AutoRefreshNumber = 8;
 8000b84:	4b0b      	ldr	r3, [pc, #44]	; (8000bb4 <IS42S32800G_RefreshMode+0x48>)
 8000b86:	2208      	movs	r2, #8
 8000b88:	609a      	str	r2, [r3, #8]
    Command.ModeRegisterDefinition = 0;
 8000b8a:	4b0a      	ldr	r3, [pc, #40]	; (8000bb4 <IS42S32800G_RefreshMode+0x48>)
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	60da      	str	r2, [r3, #12]

    /* Send the command */
    if (HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800G_TIMEOUT) != HAL_OK)
 8000b90:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000b94:	4907      	ldr	r1, [pc, #28]	; (8000bb4 <IS42S32800G_RefreshMode+0x48>)
 8000b96:	68f8      	ldr	r0, [r7, #12]
 8000b98:	f003 f802 	bl	8003ba0 <HAL_SDRAM_SendCommand>
 8000b9c:	4603      	mov	r3, r0
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d002      	beq.n	8000ba8 <IS42S32800G_RefreshMode+0x3c>
    {
        return IS42S32800G_ERROR;
 8000ba2:	f04f 33ff 	mov.w	r3, #4294967295
 8000ba6:	e000      	b.n	8000baa <IS42S32800G_RefreshMode+0x3e>
    }
    else
    {
        return IS42S32800G_OK;
 8000ba8:	2300      	movs	r3, #0
    }
}
 8000baa:	4618      	mov	r0, r3
 8000bac:	3710      	adds	r7, #16
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	bd80      	pop	{r7, pc}
 8000bb2:	bf00      	nop
 8000bb4:	24001068 	.word	0x24001068

08000bb8 <IS42S32800G_RefreshRate>:
 * @param  Ctx Component object pointer
 * @param  RefreshCount The refresh rate to be programmed
 * @retval error status
 */
int32_t IS42S32800G_RefreshRate(SDRAM_HandleTypeDef *Ctx, uint32_t RefreshCount)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b082      	sub	sp, #8
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
 8000bc0:	6039      	str	r1, [r7, #0]
    /* Set the device refresh rate */
    if (HAL_SDRAM_ProgramRefreshRate(Ctx, RefreshCount) != HAL_OK)
 8000bc2:	6839      	ldr	r1, [r7, #0]
 8000bc4:	6878      	ldr	r0, [r7, #4]
 8000bc6:	f003 f820 	bl	8003c0a <HAL_SDRAM_ProgramRefreshRate>
 8000bca:	4603      	mov	r3, r0
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d002      	beq.n	8000bd6 <IS42S32800G_RefreshRate+0x1e>
    {
        return IS42S32800G_ERROR;
 8000bd0:	f04f 33ff 	mov.w	r3, #4294967295
 8000bd4:	e000      	b.n	8000bd8 <IS42S32800G_RefreshRate+0x20>
    }
    else
    {
        return IS42S32800G_OK;
 8000bd6:	2300      	movs	r3, #0
    }
}
 8000bd8:	4618      	mov	r0, r3
 8000bda:	3708      	adds	r7, #8
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	bd80      	pop	{r7, pc}

08000be0 <IS42S32800G_Delay>:
 * @brief This function provides accurate delay (in milliseconds)
 * @param Delay : specifies the delay time length, in milliseconds
 * @retval IS42S32800G_OK
 */
static int32_t IS42S32800G_Delay(uint32_t Delay)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b084      	sub	sp, #16
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	6078      	str	r0, [r7, #4]
    uint32_t tickstart;
    tickstart = HAL_GetTick();
 8000be8:	f000 f908 	bl	8000dfc <HAL_GetTick>
 8000bec:	60f8      	str	r0, [r7, #12]
    while ((HAL_GetTick() - tickstart) < Delay)
 8000bee:	bf00      	nop
 8000bf0:	f000 f904 	bl	8000dfc <HAL_GetTick>
 8000bf4:	4602      	mov	r2, r0
 8000bf6:	68fb      	ldr	r3, [r7, #12]
 8000bf8:	1ad3      	subs	r3, r2, r3
 8000bfa:	687a      	ldr	r2, [r7, #4]
 8000bfc:	429a      	cmp	r2, r3
 8000bfe:	d8f7      	bhi.n	8000bf0 <IS42S32800G_Delay+0x10>
    {
    }
    return IS42S32800G_OK;
 8000c00:	2300      	movs	r3, #0
}
 8000c02:	4618      	mov	r0, r3
 8000c04:	3710      	adds	r7, #16
 8000c06:	46bd      	mov	sp, r7
 8000c08:	bd80      	pop	{r7, pc}

08000c0a <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000c0a:	b480      	push	{r7}
 8000c0c:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000c0e:	b672      	cpsid	i
}
 8000c10:	bf00      	nop
    /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */
    __disable_irq();
    while (1)
 8000c12:	e7fe      	b.n	8000c12 <Error_Handler+0x8>

08000c14 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c14:	b480      	push	{r7}
 8000c16:	b083      	sub	sp, #12
 8000c18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c1a:	4b0a      	ldr	r3, [pc, #40]	; (8000c44 <HAL_MspInit+0x30>)
 8000c1c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000c20:	4a08      	ldr	r2, [pc, #32]	; (8000c44 <HAL_MspInit+0x30>)
 8000c22:	f043 0302 	orr.w	r3, r3, #2
 8000c26:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000c2a:	4b06      	ldr	r3, [pc, #24]	; (8000c44 <HAL_MspInit+0x30>)
 8000c2c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000c30:	f003 0302 	and.w	r3, r3, #2
 8000c34:	607b      	str	r3, [r7, #4]
 8000c36:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c38:	bf00      	nop
 8000c3a:	370c      	adds	r7, #12
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c42:	4770      	bx	lr
 8000c44:	58024400 	.word	0x58024400

08000c48 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c4c:	e7fe      	b.n	8000c4c <NMI_Handler+0x4>

08000c4e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c4e:	b480      	push	{r7}
 8000c50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c52:	e7fe      	b.n	8000c52 <HardFault_Handler+0x4>

08000c54 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c54:	b480      	push	{r7}
 8000c56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c58:	e7fe      	b.n	8000c58 <MemManage_Handler+0x4>

08000c5a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c5a:	b480      	push	{r7}
 8000c5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c5e:	e7fe      	b.n	8000c5e <BusFault_Handler+0x4>

08000c60 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c60:	b480      	push	{r7}
 8000c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c64:	e7fe      	b.n	8000c64 <UsageFault_Handler+0x4>

08000c66 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c66:	b480      	push	{r7}
 8000c68:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c6a:	bf00      	nop
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c72:	4770      	bx	lr

08000c74 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c74:	b480      	push	{r7}
 8000c76:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c78:	bf00      	nop
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c80:	4770      	bx	lr

08000c82 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c82:	b480      	push	{r7}
 8000c84:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c86:	bf00      	nop
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8e:	4770      	bx	lr

08000c90 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c94:	f000 f89e 	bl	8000dd4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c98:	bf00      	nop
 8000c9a:	bd80      	pop	{r7, pc}

08000c9c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000c9c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000cd4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000ca0:	f7ff fb1a 	bl	80002d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ca4:	480c      	ldr	r0, [pc, #48]	; (8000cd8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000ca6:	490d      	ldr	r1, [pc, #52]	; (8000cdc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000ca8:	4a0d      	ldr	r2, [pc, #52]	; (8000ce0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000caa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cac:	e002      	b.n	8000cb4 <LoopCopyDataInit>

08000cae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cb0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cb2:	3304      	adds	r3, #4

08000cb4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cb4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cb6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cb8:	d3f9      	bcc.n	8000cae <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cba:	4a0a      	ldr	r2, [pc, #40]	; (8000ce4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000cbc:	4c0a      	ldr	r4, [pc, #40]	; (8000ce8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000cbe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cc0:	e001      	b.n	8000cc6 <LoopFillZerobss>

08000cc2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cc2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cc4:	3204      	adds	r2, #4

08000cc6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cc6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cc8:	d3fb      	bcc.n	8000cc2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000cca:	f003 f8c9 	bl	8003e60 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000cce:	f7ff fd67 	bl	80007a0 <main>
  bx  lr
 8000cd2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000cd4:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000cd8:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000cdc:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 8000ce0:	08003ee8 	.word	0x08003ee8
  ldr r2, =_sbss
 8000ce4:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 8000ce8:	2400107c 	.word	0x2400107c

08000cec <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000cec:	e7fe      	b.n	8000cec <ADC3_IRQHandler>
	...

08000cf0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b082      	sub	sp, #8
 8000cf4:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cf6:	2003      	movs	r0, #3
 8000cf8:	f000 f96e 	bl	8000fd8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000cfc:	f001 f9ec 	bl	80020d8 <HAL_RCC_GetSysClockFreq>
 8000d00:	4602      	mov	r2, r0
 8000d02:	4b15      	ldr	r3, [pc, #84]	; (8000d58 <HAL_Init+0x68>)
 8000d04:	699b      	ldr	r3, [r3, #24]
 8000d06:	0a1b      	lsrs	r3, r3, #8
 8000d08:	f003 030f 	and.w	r3, r3, #15
 8000d0c:	4913      	ldr	r1, [pc, #76]	; (8000d5c <HAL_Init+0x6c>)
 8000d0e:	5ccb      	ldrb	r3, [r1, r3]
 8000d10:	f003 031f 	and.w	r3, r3, #31
 8000d14:	fa22 f303 	lsr.w	r3, r2, r3
 8000d18:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000d1a:	4b0f      	ldr	r3, [pc, #60]	; (8000d58 <HAL_Init+0x68>)
 8000d1c:	699b      	ldr	r3, [r3, #24]
 8000d1e:	f003 030f 	and.w	r3, r3, #15
 8000d22:	4a0e      	ldr	r2, [pc, #56]	; (8000d5c <HAL_Init+0x6c>)
 8000d24:	5cd3      	ldrb	r3, [r2, r3]
 8000d26:	f003 031f 	and.w	r3, r3, #31
 8000d2a:	687a      	ldr	r2, [r7, #4]
 8000d2c:	fa22 f303 	lsr.w	r3, r2, r3
 8000d30:	4a0b      	ldr	r2, [pc, #44]	; (8000d60 <HAL_Init+0x70>)
 8000d32:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000d34:	4a0b      	ldr	r2, [pc, #44]	; (8000d64 <HAL_Init+0x74>)
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000d3a:	200f      	movs	r0, #15
 8000d3c:	f000 f814 	bl	8000d68 <HAL_InitTick>
 8000d40:	4603      	mov	r3, r0
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d001      	beq.n	8000d4a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000d46:	2301      	movs	r3, #1
 8000d48:	e002      	b.n	8000d50 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000d4a:	f7ff ff63 	bl	8000c14 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d4e:	2300      	movs	r3, #0
}
 8000d50:	4618      	mov	r0, r3
 8000d52:	3708      	adds	r7, #8
 8000d54:	46bd      	mov	sp, r7
 8000d56:	bd80      	pop	{r7, pc}
 8000d58:	58024400 	.word	0x58024400
 8000d5c:	08003ed0 	.word	0x08003ed0
 8000d60:	24000004 	.word	0x24000004
 8000d64:	24000000 	.word	0x24000000

08000d68 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b082      	sub	sp, #8
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000d70:	4b15      	ldr	r3, [pc, #84]	; (8000dc8 <HAL_InitTick+0x60>)
 8000d72:	781b      	ldrb	r3, [r3, #0]
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d101      	bne.n	8000d7c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000d78:	2301      	movs	r3, #1
 8000d7a:	e021      	b.n	8000dc0 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000d7c:	4b13      	ldr	r3, [pc, #76]	; (8000dcc <HAL_InitTick+0x64>)
 8000d7e:	681a      	ldr	r2, [r3, #0]
 8000d80:	4b11      	ldr	r3, [pc, #68]	; (8000dc8 <HAL_InitTick+0x60>)
 8000d82:	781b      	ldrb	r3, [r3, #0]
 8000d84:	4619      	mov	r1, r3
 8000d86:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d8a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d92:	4618      	mov	r0, r3
 8000d94:	f000 f945 	bl	8001022 <HAL_SYSTICK_Config>
 8000d98:	4603      	mov	r3, r0
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d001      	beq.n	8000da2 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000d9e:	2301      	movs	r3, #1
 8000da0:	e00e      	b.n	8000dc0 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	2b0f      	cmp	r3, #15
 8000da6:	d80a      	bhi.n	8000dbe <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000da8:	2200      	movs	r2, #0
 8000daa:	6879      	ldr	r1, [r7, #4]
 8000dac:	f04f 30ff 	mov.w	r0, #4294967295
 8000db0:	f000 f91d 	bl	8000fee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000db4:	4a06      	ldr	r2, [pc, #24]	; (8000dd0 <HAL_InitTick+0x68>)
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	e000      	b.n	8000dc0 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000dbe:	2301      	movs	r3, #1
}
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	3708      	adds	r7, #8
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	bd80      	pop	{r7, pc}
 8000dc8:	2400000c 	.word	0x2400000c
 8000dcc:	24000000 	.word	0x24000000
 8000dd0:	24000008 	.word	0x24000008

08000dd4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000dd8:	4b06      	ldr	r3, [pc, #24]	; (8000df4 <HAL_IncTick+0x20>)
 8000dda:	781b      	ldrb	r3, [r3, #0]
 8000ddc:	461a      	mov	r2, r3
 8000dde:	4b06      	ldr	r3, [pc, #24]	; (8000df8 <HAL_IncTick+0x24>)
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	4413      	add	r3, r2
 8000de4:	4a04      	ldr	r2, [pc, #16]	; (8000df8 <HAL_IncTick+0x24>)
 8000de6:	6013      	str	r3, [r2, #0]
}
 8000de8:	bf00      	nop
 8000dea:	46bd      	mov	sp, r7
 8000dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df0:	4770      	bx	lr
 8000df2:	bf00      	nop
 8000df4:	2400000c 	.word	0x2400000c
 8000df8:	24001078 	.word	0x24001078

08000dfc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	af00      	add	r7, sp, #0
  return uwTick;
 8000e00:	4b03      	ldr	r3, [pc, #12]	; (8000e10 <HAL_GetTick+0x14>)
 8000e02:	681b      	ldr	r3, [r3, #0]
}
 8000e04:	4618      	mov	r0, r3
 8000e06:	46bd      	mov	sp, r7
 8000e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0c:	4770      	bx	lr
 8000e0e:	bf00      	nop
 8000e10:	24001078 	.word	0x24001078

08000e14 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b084      	sub	sp, #16
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e1c:	f7ff ffee 	bl	8000dfc <HAL_GetTick>
 8000e20:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e26:	68fb      	ldr	r3, [r7, #12]
 8000e28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e2c:	d005      	beq.n	8000e3a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e2e:	4b0a      	ldr	r3, [pc, #40]	; (8000e58 <HAL_Delay+0x44>)
 8000e30:	781b      	ldrb	r3, [r3, #0]
 8000e32:	461a      	mov	r2, r3
 8000e34:	68fb      	ldr	r3, [r7, #12]
 8000e36:	4413      	add	r3, r2
 8000e38:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000e3a:	bf00      	nop
 8000e3c:	f7ff ffde 	bl	8000dfc <HAL_GetTick>
 8000e40:	4602      	mov	r2, r0
 8000e42:	68bb      	ldr	r3, [r7, #8]
 8000e44:	1ad3      	subs	r3, r2, r3
 8000e46:	68fa      	ldr	r2, [r7, #12]
 8000e48:	429a      	cmp	r2, r3
 8000e4a:	d8f7      	bhi.n	8000e3c <HAL_Delay+0x28>
  {
  }
}
 8000e4c:	bf00      	nop
 8000e4e:	bf00      	nop
 8000e50:	3710      	adds	r7, #16
 8000e52:	46bd      	mov	sp, r7
 8000e54:	bd80      	pop	{r7, pc}
 8000e56:	bf00      	nop
 8000e58:	2400000c 	.word	0x2400000c

08000e5c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8000e60:	4b03      	ldr	r3, [pc, #12]	; (8000e70 <HAL_GetREVID+0x14>)
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	0c1b      	lsrs	r3, r3, #16
}
 8000e66:	4618      	mov	r0, r3
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6e:	4770      	bx	lr
 8000e70:	5c001000 	.word	0x5c001000

08000e74 <__NVIC_SetPriorityGrouping>:
{
 8000e74:	b480      	push	{r7}
 8000e76:	b085      	sub	sp, #20
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	f003 0307 	and.w	r3, r3, #7
 8000e82:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e84:	4b0b      	ldr	r3, [pc, #44]	; (8000eb4 <__NVIC_SetPriorityGrouping+0x40>)
 8000e86:	68db      	ldr	r3, [r3, #12]
 8000e88:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e8a:	68ba      	ldr	r2, [r7, #8]
 8000e8c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e90:	4013      	ands	r3, r2
 8000e92:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e94:	68fb      	ldr	r3, [r7, #12]
 8000e96:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e98:	68bb      	ldr	r3, [r7, #8]
 8000e9a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000e9c:	4b06      	ldr	r3, [pc, #24]	; (8000eb8 <__NVIC_SetPriorityGrouping+0x44>)
 8000e9e:	4313      	orrs	r3, r2
 8000ea0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ea2:	4a04      	ldr	r2, [pc, #16]	; (8000eb4 <__NVIC_SetPriorityGrouping+0x40>)
 8000ea4:	68bb      	ldr	r3, [r7, #8]
 8000ea6:	60d3      	str	r3, [r2, #12]
}
 8000ea8:	bf00      	nop
 8000eaa:	3714      	adds	r7, #20
 8000eac:	46bd      	mov	sp, r7
 8000eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb2:	4770      	bx	lr
 8000eb4:	e000ed00 	.word	0xe000ed00
 8000eb8:	05fa0000 	.word	0x05fa0000

08000ebc <__NVIC_GetPriorityGrouping>:
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ec0:	4b04      	ldr	r3, [pc, #16]	; (8000ed4 <__NVIC_GetPriorityGrouping+0x18>)
 8000ec2:	68db      	ldr	r3, [r3, #12]
 8000ec4:	0a1b      	lsrs	r3, r3, #8
 8000ec6:	f003 0307 	and.w	r3, r3, #7
}
 8000eca:	4618      	mov	r0, r3
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed2:	4770      	bx	lr
 8000ed4:	e000ed00 	.word	0xe000ed00

08000ed8 <__NVIC_SetPriority>:
{
 8000ed8:	b480      	push	{r7}
 8000eda:	b083      	sub	sp, #12
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	4603      	mov	r3, r0
 8000ee0:	6039      	str	r1, [r7, #0]
 8000ee2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000ee4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	db0a      	blt.n	8000f02 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000eec:	683b      	ldr	r3, [r7, #0]
 8000eee:	b2da      	uxtb	r2, r3
 8000ef0:	490c      	ldr	r1, [pc, #48]	; (8000f24 <__NVIC_SetPriority+0x4c>)
 8000ef2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000ef6:	0112      	lsls	r2, r2, #4
 8000ef8:	b2d2      	uxtb	r2, r2
 8000efa:	440b      	add	r3, r1
 8000efc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000f00:	e00a      	b.n	8000f18 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f02:	683b      	ldr	r3, [r7, #0]
 8000f04:	b2da      	uxtb	r2, r3
 8000f06:	4908      	ldr	r1, [pc, #32]	; (8000f28 <__NVIC_SetPriority+0x50>)
 8000f08:	88fb      	ldrh	r3, [r7, #6]
 8000f0a:	f003 030f 	and.w	r3, r3, #15
 8000f0e:	3b04      	subs	r3, #4
 8000f10:	0112      	lsls	r2, r2, #4
 8000f12:	b2d2      	uxtb	r2, r2
 8000f14:	440b      	add	r3, r1
 8000f16:	761a      	strb	r2, [r3, #24]
}
 8000f18:	bf00      	nop
 8000f1a:	370c      	adds	r7, #12
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f22:	4770      	bx	lr
 8000f24:	e000e100 	.word	0xe000e100
 8000f28:	e000ed00 	.word	0xe000ed00

08000f2c <NVIC_EncodePriority>:
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	b089      	sub	sp, #36	; 0x24
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	60f8      	str	r0, [r7, #12]
 8000f34:	60b9      	str	r1, [r7, #8]
 8000f36:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f38:	68fb      	ldr	r3, [r7, #12]
 8000f3a:	f003 0307 	and.w	r3, r3, #7
 8000f3e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f40:	69fb      	ldr	r3, [r7, #28]
 8000f42:	f1c3 0307 	rsb	r3, r3, #7
 8000f46:	2b04      	cmp	r3, #4
 8000f48:	bf28      	it	cs
 8000f4a:	2304      	movcs	r3, #4
 8000f4c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f4e:	69fb      	ldr	r3, [r7, #28]
 8000f50:	3304      	adds	r3, #4
 8000f52:	2b06      	cmp	r3, #6
 8000f54:	d902      	bls.n	8000f5c <NVIC_EncodePriority+0x30>
 8000f56:	69fb      	ldr	r3, [r7, #28]
 8000f58:	3b03      	subs	r3, #3
 8000f5a:	e000      	b.n	8000f5e <NVIC_EncodePriority+0x32>
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f60:	f04f 32ff 	mov.w	r2, #4294967295
 8000f64:	69bb      	ldr	r3, [r7, #24]
 8000f66:	fa02 f303 	lsl.w	r3, r2, r3
 8000f6a:	43da      	mvns	r2, r3
 8000f6c:	68bb      	ldr	r3, [r7, #8]
 8000f6e:	401a      	ands	r2, r3
 8000f70:	697b      	ldr	r3, [r7, #20]
 8000f72:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f74:	f04f 31ff 	mov.w	r1, #4294967295
 8000f78:	697b      	ldr	r3, [r7, #20]
 8000f7a:	fa01 f303 	lsl.w	r3, r1, r3
 8000f7e:	43d9      	mvns	r1, r3
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f84:	4313      	orrs	r3, r2
}
 8000f86:	4618      	mov	r0, r3
 8000f88:	3724      	adds	r7, #36	; 0x24
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f90:	4770      	bx	lr
	...

08000f94 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b082      	sub	sp, #8
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	3b01      	subs	r3, #1
 8000fa0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000fa4:	d301      	bcc.n	8000faa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000fa6:	2301      	movs	r3, #1
 8000fa8:	e00f      	b.n	8000fca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000faa:	4a0a      	ldr	r2, [pc, #40]	; (8000fd4 <SysTick_Config+0x40>)
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	3b01      	subs	r3, #1
 8000fb0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000fb2:	210f      	movs	r1, #15
 8000fb4:	f04f 30ff 	mov.w	r0, #4294967295
 8000fb8:	f7ff ff8e 	bl	8000ed8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fbc:	4b05      	ldr	r3, [pc, #20]	; (8000fd4 <SysTick_Config+0x40>)
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000fc2:	4b04      	ldr	r3, [pc, #16]	; (8000fd4 <SysTick_Config+0x40>)
 8000fc4:	2207      	movs	r2, #7
 8000fc6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000fc8:	2300      	movs	r3, #0
}
 8000fca:	4618      	mov	r0, r3
 8000fcc:	3708      	adds	r7, #8
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bd80      	pop	{r7, pc}
 8000fd2:	bf00      	nop
 8000fd4:	e000e010 	.word	0xe000e010

08000fd8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b082      	sub	sp, #8
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000fe0:	6878      	ldr	r0, [r7, #4]
 8000fe2:	f7ff ff47 	bl	8000e74 <__NVIC_SetPriorityGrouping>
}
 8000fe6:	bf00      	nop
 8000fe8:	3708      	adds	r7, #8
 8000fea:	46bd      	mov	sp, r7
 8000fec:	bd80      	pop	{r7, pc}

08000fee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fee:	b580      	push	{r7, lr}
 8000ff0:	b086      	sub	sp, #24
 8000ff2:	af00      	add	r7, sp, #0
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	60b9      	str	r1, [r7, #8]
 8000ff8:	607a      	str	r2, [r7, #4]
 8000ffa:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000ffc:	f7ff ff5e 	bl	8000ebc <__NVIC_GetPriorityGrouping>
 8001000:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001002:	687a      	ldr	r2, [r7, #4]
 8001004:	68b9      	ldr	r1, [r7, #8]
 8001006:	6978      	ldr	r0, [r7, #20]
 8001008:	f7ff ff90 	bl	8000f2c <NVIC_EncodePriority>
 800100c:	4602      	mov	r2, r0
 800100e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001012:	4611      	mov	r1, r2
 8001014:	4618      	mov	r0, r3
 8001016:	f7ff ff5f 	bl	8000ed8 <__NVIC_SetPriority>
}
 800101a:	bf00      	nop
 800101c:	3718      	adds	r7, #24
 800101e:	46bd      	mov	sp, r7
 8001020:	bd80      	pop	{r7, pc}

08001022 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001022:	b580      	push	{r7, lr}
 8001024:	b082      	sub	sp, #8
 8001026:	af00      	add	r7, sp, #0
 8001028:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800102a:	6878      	ldr	r0, [r7, #4]
 800102c:	f7ff ffb2 	bl	8000f94 <SysTick_Config>
 8001030:	4603      	mov	r3, r0
}
 8001032:	4618      	mov	r0, r3
 8001034:	3708      	adds	r7, #8
 8001036:	46bd      	mov	sp, r7
 8001038:	bd80      	pop	{r7, pc}
	...

0800103c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800103c:	b480      	push	{r7}
 800103e:	b089      	sub	sp, #36	; 0x24
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
 8001044:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001046:	2300      	movs	r3, #0
 8001048:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800104a:	4b89      	ldr	r3, [pc, #548]	; (8001270 <HAL_GPIO_Init+0x234>)
 800104c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800104e:	e194      	b.n	800137a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001050:	683b      	ldr	r3, [r7, #0]
 8001052:	681a      	ldr	r2, [r3, #0]
 8001054:	2101      	movs	r1, #1
 8001056:	69fb      	ldr	r3, [r7, #28]
 8001058:	fa01 f303 	lsl.w	r3, r1, r3
 800105c:	4013      	ands	r3, r2
 800105e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001060:	693b      	ldr	r3, [r7, #16]
 8001062:	2b00      	cmp	r3, #0
 8001064:	f000 8186 	beq.w	8001374 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001068:	683b      	ldr	r3, [r7, #0]
 800106a:	685b      	ldr	r3, [r3, #4]
 800106c:	f003 0303 	and.w	r3, r3, #3
 8001070:	2b01      	cmp	r3, #1
 8001072:	d005      	beq.n	8001080 <HAL_GPIO_Init+0x44>
 8001074:	683b      	ldr	r3, [r7, #0]
 8001076:	685b      	ldr	r3, [r3, #4]
 8001078:	f003 0303 	and.w	r3, r3, #3
 800107c:	2b02      	cmp	r3, #2
 800107e:	d130      	bne.n	80010e2 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	689b      	ldr	r3, [r3, #8]
 8001084:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001086:	69fb      	ldr	r3, [r7, #28]
 8001088:	005b      	lsls	r3, r3, #1
 800108a:	2203      	movs	r2, #3
 800108c:	fa02 f303 	lsl.w	r3, r2, r3
 8001090:	43db      	mvns	r3, r3
 8001092:	69ba      	ldr	r2, [r7, #24]
 8001094:	4013      	ands	r3, r2
 8001096:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001098:	683b      	ldr	r3, [r7, #0]
 800109a:	68da      	ldr	r2, [r3, #12]
 800109c:	69fb      	ldr	r3, [r7, #28]
 800109e:	005b      	lsls	r3, r3, #1
 80010a0:	fa02 f303 	lsl.w	r3, r2, r3
 80010a4:	69ba      	ldr	r2, [r7, #24]
 80010a6:	4313      	orrs	r3, r2
 80010a8:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	69ba      	ldr	r2, [r7, #24]
 80010ae:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	685b      	ldr	r3, [r3, #4]
 80010b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80010b6:	2201      	movs	r2, #1
 80010b8:	69fb      	ldr	r3, [r7, #28]
 80010ba:	fa02 f303 	lsl.w	r3, r2, r3
 80010be:	43db      	mvns	r3, r3
 80010c0:	69ba      	ldr	r2, [r7, #24]
 80010c2:	4013      	ands	r3, r2
 80010c4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80010c6:	683b      	ldr	r3, [r7, #0]
 80010c8:	685b      	ldr	r3, [r3, #4]
 80010ca:	091b      	lsrs	r3, r3, #4
 80010cc:	f003 0201 	and.w	r2, r3, #1
 80010d0:	69fb      	ldr	r3, [r7, #28]
 80010d2:	fa02 f303 	lsl.w	r3, r2, r3
 80010d6:	69ba      	ldr	r2, [r7, #24]
 80010d8:	4313      	orrs	r3, r2
 80010da:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	69ba      	ldr	r2, [r7, #24]
 80010e0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80010e2:	683b      	ldr	r3, [r7, #0]
 80010e4:	685b      	ldr	r3, [r3, #4]
 80010e6:	f003 0303 	and.w	r3, r3, #3
 80010ea:	2b03      	cmp	r3, #3
 80010ec:	d017      	beq.n	800111e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	68db      	ldr	r3, [r3, #12]
 80010f2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80010f4:	69fb      	ldr	r3, [r7, #28]
 80010f6:	005b      	lsls	r3, r3, #1
 80010f8:	2203      	movs	r2, #3
 80010fa:	fa02 f303 	lsl.w	r3, r2, r3
 80010fe:	43db      	mvns	r3, r3
 8001100:	69ba      	ldr	r2, [r7, #24]
 8001102:	4013      	ands	r3, r2
 8001104:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001106:	683b      	ldr	r3, [r7, #0]
 8001108:	689a      	ldr	r2, [r3, #8]
 800110a:	69fb      	ldr	r3, [r7, #28]
 800110c:	005b      	lsls	r3, r3, #1
 800110e:	fa02 f303 	lsl.w	r3, r2, r3
 8001112:	69ba      	ldr	r2, [r7, #24]
 8001114:	4313      	orrs	r3, r2
 8001116:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	69ba      	ldr	r2, [r7, #24]
 800111c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800111e:	683b      	ldr	r3, [r7, #0]
 8001120:	685b      	ldr	r3, [r3, #4]
 8001122:	f003 0303 	and.w	r3, r3, #3
 8001126:	2b02      	cmp	r3, #2
 8001128:	d123      	bne.n	8001172 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800112a:	69fb      	ldr	r3, [r7, #28]
 800112c:	08da      	lsrs	r2, r3, #3
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	3208      	adds	r2, #8
 8001132:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001136:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001138:	69fb      	ldr	r3, [r7, #28]
 800113a:	f003 0307 	and.w	r3, r3, #7
 800113e:	009b      	lsls	r3, r3, #2
 8001140:	220f      	movs	r2, #15
 8001142:	fa02 f303 	lsl.w	r3, r2, r3
 8001146:	43db      	mvns	r3, r3
 8001148:	69ba      	ldr	r2, [r7, #24]
 800114a:	4013      	ands	r3, r2
 800114c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800114e:	683b      	ldr	r3, [r7, #0]
 8001150:	691a      	ldr	r2, [r3, #16]
 8001152:	69fb      	ldr	r3, [r7, #28]
 8001154:	f003 0307 	and.w	r3, r3, #7
 8001158:	009b      	lsls	r3, r3, #2
 800115a:	fa02 f303 	lsl.w	r3, r2, r3
 800115e:	69ba      	ldr	r2, [r7, #24]
 8001160:	4313      	orrs	r3, r2
 8001162:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001164:	69fb      	ldr	r3, [r7, #28]
 8001166:	08da      	lsrs	r2, r3, #3
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	3208      	adds	r2, #8
 800116c:	69b9      	ldr	r1, [r7, #24]
 800116e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001178:	69fb      	ldr	r3, [r7, #28]
 800117a:	005b      	lsls	r3, r3, #1
 800117c:	2203      	movs	r2, #3
 800117e:	fa02 f303 	lsl.w	r3, r2, r3
 8001182:	43db      	mvns	r3, r3
 8001184:	69ba      	ldr	r2, [r7, #24]
 8001186:	4013      	ands	r3, r2
 8001188:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800118a:	683b      	ldr	r3, [r7, #0]
 800118c:	685b      	ldr	r3, [r3, #4]
 800118e:	f003 0203 	and.w	r2, r3, #3
 8001192:	69fb      	ldr	r3, [r7, #28]
 8001194:	005b      	lsls	r3, r3, #1
 8001196:	fa02 f303 	lsl.w	r3, r2, r3
 800119a:	69ba      	ldr	r2, [r7, #24]
 800119c:	4313      	orrs	r3, r2
 800119e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	69ba      	ldr	r2, [r7, #24]
 80011a4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80011a6:	683b      	ldr	r3, [r7, #0]
 80011a8:	685b      	ldr	r3, [r3, #4]
 80011aa:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	f000 80e0 	beq.w	8001374 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011b4:	4b2f      	ldr	r3, [pc, #188]	; (8001274 <HAL_GPIO_Init+0x238>)
 80011b6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80011ba:	4a2e      	ldr	r2, [pc, #184]	; (8001274 <HAL_GPIO_Init+0x238>)
 80011bc:	f043 0302 	orr.w	r3, r3, #2
 80011c0:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80011c4:	4b2b      	ldr	r3, [pc, #172]	; (8001274 <HAL_GPIO_Init+0x238>)
 80011c6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80011ca:	f003 0302 	and.w	r3, r3, #2
 80011ce:	60fb      	str	r3, [r7, #12]
 80011d0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80011d2:	4a29      	ldr	r2, [pc, #164]	; (8001278 <HAL_GPIO_Init+0x23c>)
 80011d4:	69fb      	ldr	r3, [r7, #28]
 80011d6:	089b      	lsrs	r3, r3, #2
 80011d8:	3302      	adds	r3, #2
 80011da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011de:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80011e0:	69fb      	ldr	r3, [r7, #28]
 80011e2:	f003 0303 	and.w	r3, r3, #3
 80011e6:	009b      	lsls	r3, r3, #2
 80011e8:	220f      	movs	r2, #15
 80011ea:	fa02 f303 	lsl.w	r3, r2, r3
 80011ee:	43db      	mvns	r3, r3
 80011f0:	69ba      	ldr	r2, [r7, #24]
 80011f2:	4013      	ands	r3, r2
 80011f4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	4a20      	ldr	r2, [pc, #128]	; (800127c <HAL_GPIO_Init+0x240>)
 80011fa:	4293      	cmp	r3, r2
 80011fc:	d052      	beq.n	80012a4 <HAL_GPIO_Init+0x268>
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	4a1f      	ldr	r2, [pc, #124]	; (8001280 <HAL_GPIO_Init+0x244>)
 8001202:	4293      	cmp	r3, r2
 8001204:	d031      	beq.n	800126a <HAL_GPIO_Init+0x22e>
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	4a1e      	ldr	r2, [pc, #120]	; (8001284 <HAL_GPIO_Init+0x248>)
 800120a:	4293      	cmp	r3, r2
 800120c:	d02b      	beq.n	8001266 <HAL_GPIO_Init+0x22a>
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	4a1d      	ldr	r2, [pc, #116]	; (8001288 <HAL_GPIO_Init+0x24c>)
 8001212:	4293      	cmp	r3, r2
 8001214:	d025      	beq.n	8001262 <HAL_GPIO_Init+0x226>
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	4a1c      	ldr	r2, [pc, #112]	; (800128c <HAL_GPIO_Init+0x250>)
 800121a:	4293      	cmp	r3, r2
 800121c:	d01f      	beq.n	800125e <HAL_GPIO_Init+0x222>
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	4a1b      	ldr	r2, [pc, #108]	; (8001290 <HAL_GPIO_Init+0x254>)
 8001222:	4293      	cmp	r3, r2
 8001224:	d019      	beq.n	800125a <HAL_GPIO_Init+0x21e>
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	4a1a      	ldr	r2, [pc, #104]	; (8001294 <HAL_GPIO_Init+0x258>)
 800122a:	4293      	cmp	r3, r2
 800122c:	d013      	beq.n	8001256 <HAL_GPIO_Init+0x21a>
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	4a19      	ldr	r2, [pc, #100]	; (8001298 <HAL_GPIO_Init+0x25c>)
 8001232:	4293      	cmp	r3, r2
 8001234:	d00d      	beq.n	8001252 <HAL_GPIO_Init+0x216>
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	4a18      	ldr	r2, [pc, #96]	; (800129c <HAL_GPIO_Init+0x260>)
 800123a:	4293      	cmp	r3, r2
 800123c:	d007      	beq.n	800124e <HAL_GPIO_Init+0x212>
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	4a17      	ldr	r2, [pc, #92]	; (80012a0 <HAL_GPIO_Init+0x264>)
 8001242:	4293      	cmp	r3, r2
 8001244:	d101      	bne.n	800124a <HAL_GPIO_Init+0x20e>
 8001246:	2309      	movs	r3, #9
 8001248:	e02d      	b.n	80012a6 <HAL_GPIO_Init+0x26a>
 800124a:	230a      	movs	r3, #10
 800124c:	e02b      	b.n	80012a6 <HAL_GPIO_Init+0x26a>
 800124e:	2308      	movs	r3, #8
 8001250:	e029      	b.n	80012a6 <HAL_GPIO_Init+0x26a>
 8001252:	2307      	movs	r3, #7
 8001254:	e027      	b.n	80012a6 <HAL_GPIO_Init+0x26a>
 8001256:	2306      	movs	r3, #6
 8001258:	e025      	b.n	80012a6 <HAL_GPIO_Init+0x26a>
 800125a:	2305      	movs	r3, #5
 800125c:	e023      	b.n	80012a6 <HAL_GPIO_Init+0x26a>
 800125e:	2304      	movs	r3, #4
 8001260:	e021      	b.n	80012a6 <HAL_GPIO_Init+0x26a>
 8001262:	2303      	movs	r3, #3
 8001264:	e01f      	b.n	80012a6 <HAL_GPIO_Init+0x26a>
 8001266:	2302      	movs	r3, #2
 8001268:	e01d      	b.n	80012a6 <HAL_GPIO_Init+0x26a>
 800126a:	2301      	movs	r3, #1
 800126c:	e01b      	b.n	80012a6 <HAL_GPIO_Init+0x26a>
 800126e:	bf00      	nop
 8001270:	58000080 	.word	0x58000080
 8001274:	58024400 	.word	0x58024400
 8001278:	58000400 	.word	0x58000400
 800127c:	58020000 	.word	0x58020000
 8001280:	58020400 	.word	0x58020400
 8001284:	58020800 	.word	0x58020800
 8001288:	58020c00 	.word	0x58020c00
 800128c:	58021000 	.word	0x58021000
 8001290:	58021400 	.word	0x58021400
 8001294:	58021800 	.word	0x58021800
 8001298:	58021c00 	.word	0x58021c00
 800129c:	58022000 	.word	0x58022000
 80012a0:	58022400 	.word	0x58022400
 80012a4:	2300      	movs	r3, #0
 80012a6:	69fa      	ldr	r2, [r7, #28]
 80012a8:	f002 0203 	and.w	r2, r2, #3
 80012ac:	0092      	lsls	r2, r2, #2
 80012ae:	4093      	lsls	r3, r2
 80012b0:	69ba      	ldr	r2, [r7, #24]
 80012b2:	4313      	orrs	r3, r2
 80012b4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80012b6:	4938      	ldr	r1, [pc, #224]	; (8001398 <HAL_GPIO_Init+0x35c>)
 80012b8:	69fb      	ldr	r3, [r7, #28]
 80012ba:	089b      	lsrs	r3, r3, #2
 80012bc:	3302      	adds	r3, #2
 80012be:	69ba      	ldr	r2, [r7, #24]
 80012c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80012c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80012cc:	693b      	ldr	r3, [r7, #16]
 80012ce:	43db      	mvns	r3, r3
 80012d0:	69ba      	ldr	r2, [r7, #24]
 80012d2:	4013      	ands	r3, r2
 80012d4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80012d6:	683b      	ldr	r3, [r7, #0]
 80012d8:	685b      	ldr	r3, [r3, #4]
 80012da:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d003      	beq.n	80012ea <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80012e2:	69ba      	ldr	r2, [r7, #24]
 80012e4:	693b      	ldr	r3, [r7, #16]
 80012e6:	4313      	orrs	r3, r2
 80012e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80012ea:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80012ee:	69bb      	ldr	r3, [r7, #24]
 80012f0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80012f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80012f6:	685b      	ldr	r3, [r3, #4]
 80012f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80012fa:	693b      	ldr	r3, [r7, #16]
 80012fc:	43db      	mvns	r3, r3
 80012fe:	69ba      	ldr	r2, [r7, #24]
 8001300:	4013      	ands	r3, r2
 8001302:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001304:	683b      	ldr	r3, [r7, #0]
 8001306:	685b      	ldr	r3, [r3, #4]
 8001308:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800130c:	2b00      	cmp	r3, #0
 800130e:	d003      	beq.n	8001318 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001310:	69ba      	ldr	r2, [r7, #24]
 8001312:	693b      	ldr	r3, [r7, #16]
 8001314:	4313      	orrs	r3, r2
 8001316:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001318:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800131c:	69bb      	ldr	r3, [r7, #24]
 800131e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8001320:	697b      	ldr	r3, [r7, #20]
 8001322:	685b      	ldr	r3, [r3, #4]
 8001324:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001326:	693b      	ldr	r3, [r7, #16]
 8001328:	43db      	mvns	r3, r3
 800132a:	69ba      	ldr	r2, [r7, #24]
 800132c:	4013      	ands	r3, r2
 800132e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001330:	683b      	ldr	r3, [r7, #0]
 8001332:	685b      	ldr	r3, [r3, #4]
 8001334:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001338:	2b00      	cmp	r3, #0
 800133a:	d003      	beq.n	8001344 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 800133c:	69ba      	ldr	r2, [r7, #24]
 800133e:	693b      	ldr	r3, [r7, #16]
 8001340:	4313      	orrs	r3, r2
 8001342:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001344:	697b      	ldr	r3, [r7, #20]
 8001346:	69ba      	ldr	r2, [r7, #24]
 8001348:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800134a:	697b      	ldr	r3, [r7, #20]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001350:	693b      	ldr	r3, [r7, #16]
 8001352:	43db      	mvns	r3, r3
 8001354:	69ba      	ldr	r2, [r7, #24]
 8001356:	4013      	ands	r3, r2
 8001358:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800135a:	683b      	ldr	r3, [r7, #0]
 800135c:	685b      	ldr	r3, [r3, #4]
 800135e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001362:	2b00      	cmp	r3, #0
 8001364:	d003      	beq.n	800136e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8001366:	69ba      	ldr	r2, [r7, #24]
 8001368:	693b      	ldr	r3, [r7, #16]
 800136a:	4313      	orrs	r3, r2
 800136c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800136e:	697b      	ldr	r3, [r7, #20]
 8001370:	69ba      	ldr	r2, [r7, #24]
 8001372:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001374:	69fb      	ldr	r3, [r7, #28]
 8001376:	3301      	adds	r3, #1
 8001378:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800137a:	683b      	ldr	r3, [r7, #0]
 800137c:	681a      	ldr	r2, [r3, #0]
 800137e:	69fb      	ldr	r3, [r7, #28]
 8001380:	fa22 f303 	lsr.w	r3, r2, r3
 8001384:	2b00      	cmp	r3, #0
 8001386:	f47f ae63 	bne.w	8001050 <HAL_GPIO_Init+0x14>
  }
}
 800138a:	bf00      	nop
 800138c:	bf00      	nop
 800138e:	3724      	adds	r7, #36	; 0x24
 8001390:	46bd      	mov	sp, r7
 8001392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001396:	4770      	bx	lr
 8001398:	58000400 	.word	0x58000400

0800139c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800139c:	b480      	push	{r7}
 800139e:	b083      	sub	sp, #12
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
 80013a4:	460b      	mov	r3, r1
 80013a6:	807b      	strh	r3, [r7, #2]
 80013a8:	4613      	mov	r3, r2
 80013aa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80013ac:	787b      	ldrb	r3, [r7, #1]
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d003      	beq.n	80013ba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80013b2:	887a      	ldrh	r2, [r7, #2]
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80013b8:	e003      	b.n	80013c2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80013ba:	887b      	ldrh	r3, [r7, #2]
 80013bc:	041a      	lsls	r2, r3, #16
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	619a      	str	r2, [r3, #24]
}
 80013c2:	bf00      	nop
 80013c4:	370c      	adds	r7, #12
 80013c6:	46bd      	mov	sp, r7
 80013c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013cc:	4770      	bx	lr

080013ce <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80013ce:	b480      	push	{r7}
 80013d0:	b085      	sub	sp, #20
 80013d2:	af00      	add	r7, sp, #0
 80013d4:	6078      	str	r0, [r7, #4]
 80013d6:	460b      	mov	r3, r1
 80013d8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	695b      	ldr	r3, [r3, #20]
 80013de:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80013e0:	887a      	ldrh	r2, [r7, #2]
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	4013      	ands	r3, r2
 80013e6:	041a      	lsls	r2, r3, #16
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	43d9      	mvns	r1, r3
 80013ec:	887b      	ldrh	r3, [r7, #2]
 80013ee:	400b      	ands	r3, r1
 80013f0:	431a      	orrs	r2, r3
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	619a      	str	r2, [r3, #24]
}
 80013f6:	bf00      	nop
 80013f8:	3714      	adds	r7, #20
 80013fa:	46bd      	mov	sp, r7
 80013fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001400:	4770      	bx	lr
	...

08001404 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b084      	sub	sp, #16
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 800140c:	4b29      	ldr	r3, [pc, #164]	; (80014b4 <HAL_PWREx_ConfigSupply+0xb0>)
 800140e:	68db      	ldr	r3, [r3, #12]
 8001410:	f003 0307 	and.w	r3, r3, #7
 8001414:	2b06      	cmp	r3, #6
 8001416:	d00a      	beq.n	800142e <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8001418:	4b26      	ldr	r3, [pc, #152]	; (80014b4 <HAL_PWREx_ConfigSupply+0xb0>)
 800141a:	68db      	ldr	r3, [r3, #12]
 800141c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001420:	687a      	ldr	r2, [r7, #4]
 8001422:	429a      	cmp	r2, r3
 8001424:	d001      	beq.n	800142a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8001426:	2301      	movs	r3, #1
 8001428:	e040      	b.n	80014ac <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800142a:	2300      	movs	r3, #0
 800142c:	e03e      	b.n	80014ac <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800142e:	4b21      	ldr	r3, [pc, #132]	; (80014b4 <HAL_PWREx_ConfigSupply+0xb0>)
 8001430:	68db      	ldr	r3, [r3, #12]
 8001432:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8001436:	491f      	ldr	r1, [pc, #124]	; (80014b4 <HAL_PWREx_ConfigSupply+0xb0>)
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	4313      	orrs	r3, r2
 800143c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800143e:	f7ff fcdd 	bl	8000dfc <HAL_GetTick>
 8001442:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001444:	e009      	b.n	800145a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001446:	f7ff fcd9 	bl	8000dfc <HAL_GetTick>
 800144a:	4602      	mov	r2, r0
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	1ad3      	subs	r3, r2, r3
 8001450:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001454:	d901      	bls.n	800145a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8001456:	2301      	movs	r3, #1
 8001458:	e028      	b.n	80014ac <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800145a:	4b16      	ldr	r3, [pc, #88]	; (80014b4 <HAL_PWREx_ConfigSupply+0xb0>)
 800145c:	685b      	ldr	r3, [r3, #4]
 800145e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001462:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001466:	d1ee      	bne.n	8001446 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	2b1e      	cmp	r3, #30
 800146c:	d008      	beq.n	8001480 <HAL_PWREx_ConfigSupply+0x7c>
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	2b2e      	cmp	r3, #46	; 0x2e
 8001472:	d005      	beq.n	8001480 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	2b1d      	cmp	r3, #29
 8001478:	d002      	beq.n	8001480 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	2b2d      	cmp	r3, #45	; 0x2d
 800147e:	d114      	bne.n	80014aa <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8001480:	f7ff fcbc 	bl	8000dfc <HAL_GetTick>
 8001484:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8001486:	e009      	b.n	800149c <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001488:	f7ff fcb8 	bl	8000dfc <HAL_GetTick>
 800148c:	4602      	mov	r2, r0
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	1ad3      	subs	r3, r2, r3
 8001492:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001496:	d901      	bls.n	800149c <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8001498:	2301      	movs	r3, #1
 800149a:	e007      	b.n	80014ac <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800149c:	4b05      	ldr	r3, [pc, #20]	; (80014b4 <HAL_PWREx_ConfigSupply+0xb0>)
 800149e:	68db      	ldr	r3, [r3, #12]
 80014a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80014a8:	d1ee      	bne.n	8001488 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80014aa:	2300      	movs	r3, #0
}
 80014ac:	4618      	mov	r0, r3
 80014ae:	3710      	adds	r7, #16
 80014b0:	46bd      	mov	sp, r7
 80014b2:	bd80      	pop	{r7, pc}
 80014b4:	58024800 	.word	0x58024800

080014b8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b08c      	sub	sp, #48	; 0x30
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d102      	bne.n	80014cc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80014c6:	2301      	movs	r3, #1
 80014c8:	f000 bc48 	b.w	8001d5c <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	f003 0301 	and.w	r3, r3, #1
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	f000 8088 	beq.w	80015ea <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80014da:	4b99      	ldr	r3, [pc, #612]	; (8001740 <HAL_RCC_OscConfig+0x288>)
 80014dc:	691b      	ldr	r3, [r3, #16]
 80014de:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80014e2:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80014e4:	4b96      	ldr	r3, [pc, #600]	; (8001740 <HAL_RCC_OscConfig+0x288>)
 80014e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014e8:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80014ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014ec:	2b10      	cmp	r3, #16
 80014ee:	d007      	beq.n	8001500 <HAL_RCC_OscConfig+0x48>
 80014f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014f2:	2b18      	cmp	r3, #24
 80014f4:	d111      	bne.n	800151a <HAL_RCC_OscConfig+0x62>
 80014f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014f8:	f003 0303 	and.w	r3, r3, #3
 80014fc:	2b02      	cmp	r3, #2
 80014fe:	d10c      	bne.n	800151a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001500:	4b8f      	ldr	r3, [pc, #572]	; (8001740 <HAL_RCC_OscConfig+0x288>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001508:	2b00      	cmp	r3, #0
 800150a:	d06d      	beq.n	80015e8 <HAL_RCC_OscConfig+0x130>
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	685b      	ldr	r3, [r3, #4]
 8001510:	2b00      	cmp	r3, #0
 8001512:	d169      	bne.n	80015e8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001514:	2301      	movs	r3, #1
 8001516:	f000 bc21 	b.w	8001d5c <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	685b      	ldr	r3, [r3, #4]
 800151e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001522:	d106      	bne.n	8001532 <HAL_RCC_OscConfig+0x7a>
 8001524:	4b86      	ldr	r3, [pc, #536]	; (8001740 <HAL_RCC_OscConfig+0x288>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	4a85      	ldr	r2, [pc, #532]	; (8001740 <HAL_RCC_OscConfig+0x288>)
 800152a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800152e:	6013      	str	r3, [r2, #0]
 8001530:	e02e      	b.n	8001590 <HAL_RCC_OscConfig+0xd8>
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	685b      	ldr	r3, [r3, #4]
 8001536:	2b00      	cmp	r3, #0
 8001538:	d10c      	bne.n	8001554 <HAL_RCC_OscConfig+0x9c>
 800153a:	4b81      	ldr	r3, [pc, #516]	; (8001740 <HAL_RCC_OscConfig+0x288>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	4a80      	ldr	r2, [pc, #512]	; (8001740 <HAL_RCC_OscConfig+0x288>)
 8001540:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001544:	6013      	str	r3, [r2, #0]
 8001546:	4b7e      	ldr	r3, [pc, #504]	; (8001740 <HAL_RCC_OscConfig+0x288>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	4a7d      	ldr	r2, [pc, #500]	; (8001740 <HAL_RCC_OscConfig+0x288>)
 800154c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001550:	6013      	str	r3, [r2, #0]
 8001552:	e01d      	b.n	8001590 <HAL_RCC_OscConfig+0xd8>
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	685b      	ldr	r3, [r3, #4]
 8001558:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800155c:	d10c      	bne.n	8001578 <HAL_RCC_OscConfig+0xc0>
 800155e:	4b78      	ldr	r3, [pc, #480]	; (8001740 <HAL_RCC_OscConfig+0x288>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	4a77      	ldr	r2, [pc, #476]	; (8001740 <HAL_RCC_OscConfig+0x288>)
 8001564:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001568:	6013      	str	r3, [r2, #0]
 800156a:	4b75      	ldr	r3, [pc, #468]	; (8001740 <HAL_RCC_OscConfig+0x288>)
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	4a74      	ldr	r2, [pc, #464]	; (8001740 <HAL_RCC_OscConfig+0x288>)
 8001570:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001574:	6013      	str	r3, [r2, #0]
 8001576:	e00b      	b.n	8001590 <HAL_RCC_OscConfig+0xd8>
 8001578:	4b71      	ldr	r3, [pc, #452]	; (8001740 <HAL_RCC_OscConfig+0x288>)
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	4a70      	ldr	r2, [pc, #448]	; (8001740 <HAL_RCC_OscConfig+0x288>)
 800157e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001582:	6013      	str	r3, [r2, #0]
 8001584:	4b6e      	ldr	r3, [pc, #440]	; (8001740 <HAL_RCC_OscConfig+0x288>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	4a6d      	ldr	r2, [pc, #436]	; (8001740 <HAL_RCC_OscConfig+0x288>)
 800158a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800158e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	685b      	ldr	r3, [r3, #4]
 8001594:	2b00      	cmp	r3, #0
 8001596:	d013      	beq.n	80015c0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001598:	f7ff fc30 	bl	8000dfc <HAL_GetTick>
 800159c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800159e:	e008      	b.n	80015b2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80015a0:	f7ff fc2c 	bl	8000dfc <HAL_GetTick>
 80015a4:	4602      	mov	r2, r0
 80015a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015a8:	1ad3      	subs	r3, r2, r3
 80015aa:	2b64      	cmp	r3, #100	; 0x64
 80015ac:	d901      	bls.n	80015b2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80015ae:	2303      	movs	r3, #3
 80015b0:	e3d4      	b.n	8001d5c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80015b2:	4b63      	ldr	r3, [pc, #396]	; (8001740 <HAL_RCC_OscConfig+0x288>)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d0f0      	beq.n	80015a0 <HAL_RCC_OscConfig+0xe8>
 80015be:	e014      	b.n	80015ea <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015c0:	f7ff fc1c 	bl	8000dfc <HAL_GetTick>
 80015c4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80015c6:	e008      	b.n	80015da <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80015c8:	f7ff fc18 	bl	8000dfc <HAL_GetTick>
 80015cc:	4602      	mov	r2, r0
 80015ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015d0:	1ad3      	subs	r3, r2, r3
 80015d2:	2b64      	cmp	r3, #100	; 0x64
 80015d4:	d901      	bls.n	80015da <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80015d6:	2303      	movs	r3, #3
 80015d8:	e3c0      	b.n	8001d5c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80015da:	4b59      	ldr	r3, [pc, #356]	; (8001740 <HAL_RCC_OscConfig+0x288>)
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d1f0      	bne.n	80015c8 <HAL_RCC_OscConfig+0x110>
 80015e6:	e000      	b.n	80015ea <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	f003 0302 	and.w	r3, r3, #2
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	f000 80ca 	beq.w	800178c <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80015f8:	4b51      	ldr	r3, [pc, #324]	; (8001740 <HAL_RCC_OscConfig+0x288>)
 80015fa:	691b      	ldr	r3, [r3, #16]
 80015fc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001600:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001602:	4b4f      	ldr	r3, [pc, #316]	; (8001740 <HAL_RCC_OscConfig+0x288>)
 8001604:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001606:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8001608:	6a3b      	ldr	r3, [r7, #32]
 800160a:	2b00      	cmp	r3, #0
 800160c:	d007      	beq.n	800161e <HAL_RCC_OscConfig+0x166>
 800160e:	6a3b      	ldr	r3, [r7, #32]
 8001610:	2b18      	cmp	r3, #24
 8001612:	d156      	bne.n	80016c2 <HAL_RCC_OscConfig+0x20a>
 8001614:	69fb      	ldr	r3, [r7, #28]
 8001616:	f003 0303 	and.w	r3, r3, #3
 800161a:	2b00      	cmp	r3, #0
 800161c:	d151      	bne.n	80016c2 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800161e:	4b48      	ldr	r3, [pc, #288]	; (8001740 <HAL_RCC_OscConfig+0x288>)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	f003 0304 	and.w	r3, r3, #4
 8001626:	2b00      	cmp	r3, #0
 8001628:	d005      	beq.n	8001636 <HAL_RCC_OscConfig+0x17e>
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	68db      	ldr	r3, [r3, #12]
 800162e:	2b00      	cmp	r3, #0
 8001630:	d101      	bne.n	8001636 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8001632:	2301      	movs	r3, #1
 8001634:	e392      	b.n	8001d5c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001636:	4b42      	ldr	r3, [pc, #264]	; (8001740 <HAL_RCC_OscConfig+0x288>)
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	f023 0219 	bic.w	r2, r3, #25
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	68db      	ldr	r3, [r3, #12]
 8001642:	493f      	ldr	r1, [pc, #252]	; (8001740 <HAL_RCC_OscConfig+0x288>)
 8001644:	4313      	orrs	r3, r2
 8001646:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001648:	f7ff fbd8 	bl	8000dfc <HAL_GetTick>
 800164c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800164e:	e008      	b.n	8001662 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001650:	f7ff fbd4 	bl	8000dfc <HAL_GetTick>
 8001654:	4602      	mov	r2, r0
 8001656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001658:	1ad3      	subs	r3, r2, r3
 800165a:	2b02      	cmp	r3, #2
 800165c:	d901      	bls.n	8001662 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800165e:	2303      	movs	r3, #3
 8001660:	e37c      	b.n	8001d5c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001662:	4b37      	ldr	r3, [pc, #220]	; (8001740 <HAL_RCC_OscConfig+0x288>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	f003 0304 	and.w	r3, r3, #4
 800166a:	2b00      	cmp	r3, #0
 800166c:	d0f0      	beq.n	8001650 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800166e:	f7ff fbf5 	bl	8000e5c <HAL_GetREVID>
 8001672:	4603      	mov	r3, r0
 8001674:	f241 0203 	movw	r2, #4099	; 0x1003
 8001678:	4293      	cmp	r3, r2
 800167a:	d817      	bhi.n	80016ac <HAL_RCC_OscConfig+0x1f4>
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	691b      	ldr	r3, [r3, #16]
 8001680:	2b40      	cmp	r3, #64	; 0x40
 8001682:	d108      	bne.n	8001696 <HAL_RCC_OscConfig+0x1de>
 8001684:	4b2e      	ldr	r3, [pc, #184]	; (8001740 <HAL_RCC_OscConfig+0x288>)
 8001686:	685b      	ldr	r3, [r3, #4]
 8001688:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800168c:	4a2c      	ldr	r2, [pc, #176]	; (8001740 <HAL_RCC_OscConfig+0x288>)
 800168e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001692:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001694:	e07a      	b.n	800178c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001696:	4b2a      	ldr	r3, [pc, #168]	; (8001740 <HAL_RCC_OscConfig+0x288>)
 8001698:	685b      	ldr	r3, [r3, #4]
 800169a:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	691b      	ldr	r3, [r3, #16]
 80016a2:	031b      	lsls	r3, r3, #12
 80016a4:	4926      	ldr	r1, [pc, #152]	; (8001740 <HAL_RCC_OscConfig+0x288>)
 80016a6:	4313      	orrs	r3, r2
 80016a8:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80016aa:	e06f      	b.n	800178c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016ac:	4b24      	ldr	r3, [pc, #144]	; (8001740 <HAL_RCC_OscConfig+0x288>)
 80016ae:	685b      	ldr	r3, [r3, #4]
 80016b0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	691b      	ldr	r3, [r3, #16]
 80016b8:	061b      	lsls	r3, r3, #24
 80016ba:	4921      	ldr	r1, [pc, #132]	; (8001740 <HAL_RCC_OscConfig+0x288>)
 80016bc:	4313      	orrs	r3, r2
 80016be:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80016c0:	e064      	b.n	800178c <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	68db      	ldr	r3, [r3, #12]
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d047      	beq.n	800175a <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80016ca:	4b1d      	ldr	r3, [pc, #116]	; (8001740 <HAL_RCC_OscConfig+0x288>)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	f023 0219 	bic.w	r2, r3, #25
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	68db      	ldr	r3, [r3, #12]
 80016d6:	491a      	ldr	r1, [pc, #104]	; (8001740 <HAL_RCC_OscConfig+0x288>)
 80016d8:	4313      	orrs	r3, r2
 80016da:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016dc:	f7ff fb8e 	bl	8000dfc <HAL_GetTick>
 80016e0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80016e2:	e008      	b.n	80016f6 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80016e4:	f7ff fb8a 	bl	8000dfc <HAL_GetTick>
 80016e8:	4602      	mov	r2, r0
 80016ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016ec:	1ad3      	subs	r3, r2, r3
 80016ee:	2b02      	cmp	r3, #2
 80016f0:	d901      	bls.n	80016f6 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80016f2:	2303      	movs	r3, #3
 80016f4:	e332      	b.n	8001d5c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80016f6:	4b12      	ldr	r3, [pc, #72]	; (8001740 <HAL_RCC_OscConfig+0x288>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f003 0304 	and.w	r3, r3, #4
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d0f0      	beq.n	80016e4 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001702:	f7ff fbab 	bl	8000e5c <HAL_GetREVID>
 8001706:	4603      	mov	r3, r0
 8001708:	f241 0203 	movw	r2, #4099	; 0x1003
 800170c:	4293      	cmp	r3, r2
 800170e:	d819      	bhi.n	8001744 <HAL_RCC_OscConfig+0x28c>
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	691b      	ldr	r3, [r3, #16]
 8001714:	2b40      	cmp	r3, #64	; 0x40
 8001716:	d108      	bne.n	800172a <HAL_RCC_OscConfig+0x272>
 8001718:	4b09      	ldr	r3, [pc, #36]	; (8001740 <HAL_RCC_OscConfig+0x288>)
 800171a:	685b      	ldr	r3, [r3, #4]
 800171c:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8001720:	4a07      	ldr	r2, [pc, #28]	; (8001740 <HAL_RCC_OscConfig+0x288>)
 8001722:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001726:	6053      	str	r3, [r2, #4]
 8001728:	e030      	b.n	800178c <HAL_RCC_OscConfig+0x2d4>
 800172a:	4b05      	ldr	r3, [pc, #20]	; (8001740 <HAL_RCC_OscConfig+0x288>)
 800172c:	685b      	ldr	r3, [r3, #4]
 800172e:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	691b      	ldr	r3, [r3, #16]
 8001736:	031b      	lsls	r3, r3, #12
 8001738:	4901      	ldr	r1, [pc, #4]	; (8001740 <HAL_RCC_OscConfig+0x288>)
 800173a:	4313      	orrs	r3, r2
 800173c:	604b      	str	r3, [r1, #4]
 800173e:	e025      	b.n	800178c <HAL_RCC_OscConfig+0x2d4>
 8001740:	58024400 	.word	0x58024400
 8001744:	4b9a      	ldr	r3, [pc, #616]	; (80019b0 <HAL_RCC_OscConfig+0x4f8>)
 8001746:	685b      	ldr	r3, [r3, #4]
 8001748:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	691b      	ldr	r3, [r3, #16]
 8001750:	061b      	lsls	r3, r3, #24
 8001752:	4997      	ldr	r1, [pc, #604]	; (80019b0 <HAL_RCC_OscConfig+0x4f8>)
 8001754:	4313      	orrs	r3, r2
 8001756:	604b      	str	r3, [r1, #4]
 8001758:	e018      	b.n	800178c <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800175a:	4b95      	ldr	r3, [pc, #596]	; (80019b0 <HAL_RCC_OscConfig+0x4f8>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	4a94      	ldr	r2, [pc, #592]	; (80019b0 <HAL_RCC_OscConfig+0x4f8>)
 8001760:	f023 0301 	bic.w	r3, r3, #1
 8001764:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001766:	f7ff fb49 	bl	8000dfc <HAL_GetTick>
 800176a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800176c:	e008      	b.n	8001780 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800176e:	f7ff fb45 	bl	8000dfc <HAL_GetTick>
 8001772:	4602      	mov	r2, r0
 8001774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001776:	1ad3      	subs	r3, r2, r3
 8001778:	2b02      	cmp	r3, #2
 800177a:	d901      	bls.n	8001780 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 800177c:	2303      	movs	r3, #3
 800177e:	e2ed      	b.n	8001d5c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001780:	4b8b      	ldr	r3, [pc, #556]	; (80019b0 <HAL_RCC_OscConfig+0x4f8>)
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	f003 0304 	and.w	r3, r3, #4
 8001788:	2b00      	cmp	r3, #0
 800178a:	d1f0      	bne.n	800176e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	f003 0310 	and.w	r3, r3, #16
 8001794:	2b00      	cmp	r3, #0
 8001796:	f000 80a9 	beq.w	80018ec <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800179a:	4b85      	ldr	r3, [pc, #532]	; (80019b0 <HAL_RCC_OscConfig+0x4f8>)
 800179c:	691b      	ldr	r3, [r3, #16]
 800179e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80017a2:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80017a4:	4b82      	ldr	r3, [pc, #520]	; (80019b0 <HAL_RCC_OscConfig+0x4f8>)
 80017a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017a8:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80017aa:	69bb      	ldr	r3, [r7, #24]
 80017ac:	2b08      	cmp	r3, #8
 80017ae:	d007      	beq.n	80017c0 <HAL_RCC_OscConfig+0x308>
 80017b0:	69bb      	ldr	r3, [r7, #24]
 80017b2:	2b18      	cmp	r3, #24
 80017b4:	d13a      	bne.n	800182c <HAL_RCC_OscConfig+0x374>
 80017b6:	697b      	ldr	r3, [r7, #20]
 80017b8:	f003 0303 	and.w	r3, r3, #3
 80017bc:	2b01      	cmp	r3, #1
 80017be:	d135      	bne.n	800182c <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80017c0:	4b7b      	ldr	r3, [pc, #492]	; (80019b0 <HAL_RCC_OscConfig+0x4f8>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d005      	beq.n	80017d8 <HAL_RCC_OscConfig+0x320>
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	69db      	ldr	r3, [r3, #28]
 80017d0:	2b80      	cmp	r3, #128	; 0x80
 80017d2:	d001      	beq.n	80017d8 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 80017d4:	2301      	movs	r3, #1
 80017d6:	e2c1      	b.n	8001d5c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80017d8:	f7ff fb40 	bl	8000e5c <HAL_GetREVID>
 80017dc:	4603      	mov	r3, r0
 80017de:	f241 0203 	movw	r2, #4099	; 0x1003
 80017e2:	4293      	cmp	r3, r2
 80017e4:	d817      	bhi.n	8001816 <HAL_RCC_OscConfig+0x35e>
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	6a1b      	ldr	r3, [r3, #32]
 80017ea:	2b20      	cmp	r3, #32
 80017ec:	d108      	bne.n	8001800 <HAL_RCC_OscConfig+0x348>
 80017ee:	4b70      	ldr	r3, [pc, #448]	; (80019b0 <HAL_RCC_OscConfig+0x4f8>)
 80017f0:	685b      	ldr	r3, [r3, #4]
 80017f2:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80017f6:	4a6e      	ldr	r2, [pc, #440]	; (80019b0 <HAL_RCC_OscConfig+0x4f8>)
 80017f8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80017fc:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80017fe:	e075      	b.n	80018ec <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001800:	4b6b      	ldr	r3, [pc, #428]	; (80019b0 <HAL_RCC_OscConfig+0x4f8>)
 8001802:	685b      	ldr	r3, [r3, #4]
 8001804:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	6a1b      	ldr	r3, [r3, #32]
 800180c:	069b      	lsls	r3, r3, #26
 800180e:	4968      	ldr	r1, [pc, #416]	; (80019b0 <HAL_RCC_OscConfig+0x4f8>)
 8001810:	4313      	orrs	r3, r2
 8001812:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001814:	e06a      	b.n	80018ec <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001816:	4b66      	ldr	r3, [pc, #408]	; (80019b0 <HAL_RCC_OscConfig+0x4f8>)
 8001818:	68db      	ldr	r3, [r3, #12]
 800181a:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	6a1b      	ldr	r3, [r3, #32]
 8001822:	061b      	lsls	r3, r3, #24
 8001824:	4962      	ldr	r1, [pc, #392]	; (80019b0 <HAL_RCC_OscConfig+0x4f8>)
 8001826:	4313      	orrs	r3, r2
 8001828:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800182a:	e05f      	b.n	80018ec <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	69db      	ldr	r3, [r3, #28]
 8001830:	2b00      	cmp	r3, #0
 8001832:	d042      	beq.n	80018ba <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8001834:	4b5e      	ldr	r3, [pc, #376]	; (80019b0 <HAL_RCC_OscConfig+0x4f8>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	4a5d      	ldr	r2, [pc, #372]	; (80019b0 <HAL_RCC_OscConfig+0x4f8>)
 800183a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800183e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001840:	f7ff fadc 	bl	8000dfc <HAL_GetTick>
 8001844:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001846:	e008      	b.n	800185a <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8001848:	f7ff fad8 	bl	8000dfc <HAL_GetTick>
 800184c:	4602      	mov	r2, r0
 800184e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001850:	1ad3      	subs	r3, r2, r3
 8001852:	2b02      	cmp	r3, #2
 8001854:	d901      	bls.n	800185a <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8001856:	2303      	movs	r3, #3
 8001858:	e280      	b.n	8001d5c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800185a:	4b55      	ldr	r3, [pc, #340]	; (80019b0 <HAL_RCC_OscConfig+0x4f8>)
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001862:	2b00      	cmp	r3, #0
 8001864:	d0f0      	beq.n	8001848 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001866:	f7ff faf9 	bl	8000e5c <HAL_GetREVID>
 800186a:	4603      	mov	r3, r0
 800186c:	f241 0203 	movw	r2, #4099	; 0x1003
 8001870:	4293      	cmp	r3, r2
 8001872:	d817      	bhi.n	80018a4 <HAL_RCC_OscConfig+0x3ec>
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	6a1b      	ldr	r3, [r3, #32]
 8001878:	2b20      	cmp	r3, #32
 800187a:	d108      	bne.n	800188e <HAL_RCC_OscConfig+0x3d6>
 800187c:	4b4c      	ldr	r3, [pc, #304]	; (80019b0 <HAL_RCC_OscConfig+0x4f8>)
 800187e:	685b      	ldr	r3, [r3, #4]
 8001880:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8001884:	4a4a      	ldr	r2, [pc, #296]	; (80019b0 <HAL_RCC_OscConfig+0x4f8>)
 8001886:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800188a:	6053      	str	r3, [r2, #4]
 800188c:	e02e      	b.n	80018ec <HAL_RCC_OscConfig+0x434>
 800188e:	4b48      	ldr	r3, [pc, #288]	; (80019b0 <HAL_RCC_OscConfig+0x4f8>)
 8001890:	685b      	ldr	r3, [r3, #4]
 8001892:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	6a1b      	ldr	r3, [r3, #32]
 800189a:	069b      	lsls	r3, r3, #26
 800189c:	4944      	ldr	r1, [pc, #272]	; (80019b0 <HAL_RCC_OscConfig+0x4f8>)
 800189e:	4313      	orrs	r3, r2
 80018a0:	604b      	str	r3, [r1, #4]
 80018a2:	e023      	b.n	80018ec <HAL_RCC_OscConfig+0x434>
 80018a4:	4b42      	ldr	r3, [pc, #264]	; (80019b0 <HAL_RCC_OscConfig+0x4f8>)
 80018a6:	68db      	ldr	r3, [r3, #12]
 80018a8:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	6a1b      	ldr	r3, [r3, #32]
 80018b0:	061b      	lsls	r3, r3, #24
 80018b2:	493f      	ldr	r1, [pc, #252]	; (80019b0 <HAL_RCC_OscConfig+0x4f8>)
 80018b4:	4313      	orrs	r3, r2
 80018b6:	60cb      	str	r3, [r1, #12]
 80018b8:	e018      	b.n	80018ec <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80018ba:	4b3d      	ldr	r3, [pc, #244]	; (80019b0 <HAL_RCC_OscConfig+0x4f8>)
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	4a3c      	ldr	r2, [pc, #240]	; (80019b0 <HAL_RCC_OscConfig+0x4f8>)
 80018c0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80018c4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018c6:	f7ff fa99 	bl	8000dfc <HAL_GetTick>
 80018ca:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80018cc:	e008      	b.n	80018e0 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80018ce:	f7ff fa95 	bl	8000dfc <HAL_GetTick>
 80018d2:	4602      	mov	r2, r0
 80018d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018d6:	1ad3      	subs	r3, r2, r3
 80018d8:	2b02      	cmp	r3, #2
 80018da:	d901      	bls.n	80018e0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80018dc:	2303      	movs	r3, #3
 80018de:	e23d      	b.n	8001d5c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80018e0:	4b33      	ldr	r3, [pc, #204]	; (80019b0 <HAL_RCC_OscConfig+0x4f8>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d1f0      	bne.n	80018ce <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	f003 0308 	and.w	r3, r3, #8
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d036      	beq.n	8001966 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	695b      	ldr	r3, [r3, #20]
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d019      	beq.n	8001934 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001900:	4b2b      	ldr	r3, [pc, #172]	; (80019b0 <HAL_RCC_OscConfig+0x4f8>)
 8001902:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001904:	4a2a      	ldr	r2, [pc, #168]	; (80019b0 <HAL_RCC_OscConfig+0x4f8>)
 8001906:	f043 0301 	orr.w	r3, r3, #1
 800190a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800190c:	f7ff fa76 	bl	8000dfc <HAL_GetTick>
 8001910:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001912:	e008      	b.n	8001926 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001914:	f7ff fa72 	bl	8000dfc <HAL_GetTick>
 8001918:	4602      	mov	r2, r0
 800191a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800191c:	1ad3      	subs	r3, r2, r3
 800191e:	2b02      	cmp	r3, #2
 8001920:	d901      	bls.n	8001926 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8001922:	2303      	movs	r3, #3
 8001924:	e21a      	b.n	8001d5c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001926:	4b22      	ldr	r3, [pc, #136]	; (80019b0 <HAL_RCC_OscConfig+0x4f8>)
 8001928:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800192a:	f003 0302 	and.w	r3, r3, #2
 800192e:	2b00      	cmp	r3, #0
 8001930:	d0f0      	beq.n	8001914 <HAL_RCC_OscConfig+0x45c>
 8001932:	e018      	b.n	8001966 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001934:	4b1e      	ldr	r3, [pc, #120]	; (80019b0 <HAL_RCC_OscConfig+0x4f8>)
 8001936:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001938:	4a1d      	ldr	r2, [pc, #116]	; (80019b0 <HAL_RCC_OscConfig+0x4f8>)
 800193a:	f023 0301 	bic.w	r3, r3, #1
 800193e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001940:	f7ff fa5c 	bl	8000dfc <HAL_GetTick>
 8001944:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001946:	e008      	b.n	800195a <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001948:	f7ff fa58 	bl	8000dfc <HAL_GetTick>
 800194c:	4602      	mov	r2, r0
 800194e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001950:	1ad3      	subs	r3, r2, r3
 8001952:	2b02      	cmp	r3, #2
 8001954:	d901      	bls.n	800195a <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8001956:	2303      	movs	r3, #3
 8001958:	e200      	b.n	8001d5c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800195a:	4b15      	ldr	r3, [pc, #84]	; (80019b0 <HAL_RCC_OscConfig+0x4f8>)
 800195c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800195e:	f003 0302 	and.w	r3, r3, #2
 8001962:	2b00      	cmp	r3, #0
 8001964:	d1f0      	bne.n	8001948 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	f003 0320 	and.w	r3, r3, #32
 800196e:	2b00      	cmp	r3, #0
 8001970:	d039      	beq.n	80019e6 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	699b      	ldr	r3, [r3, #24]
 8001976:	2b00      	cmp	r3, #0
 8001978:	d01c      	beq.n	80019b4 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800197a:	4b0d      	ldr	r3, [pc, #52]	; (80019b0 <HAL_RCC_OscConfig+0x4f8>)
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	4a0c      	ldr	r2, [pc, #48]	; (80019b0 <HAL_RCC_OscConfig+0x4f8>)
 8001980:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001984:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001986:	f7ff fa39 	bl	8000dfc <HAL_GetTick>
 800198a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800198c:	e008      	b.n	80019a0 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800198e:	f7ff fa35 	bl	8000dfc <HAL_GetTick>
 8001992:	4602      	mov	r2, r0
 8001994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001996:	1ad3      	subs	r3, r2, r3
 8001998:	2b02      	cmp	r3, #2
 800199a:	d901      	bls.n	80019a0 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 800199c:	2303      	movs	r3, #3
 800199e:	e1dd      	b.n	8001d5c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80019a0:	4b03      	ldr	r3, [pc, #12]	; (80019b0 <HAL_RCC_OscConfig+0x4f8>)
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d0f0      	beq.n	800198e <HAL_RCC_OscConfig+0x4d6>
 80019ac:	e01b      	b.n	80019e6 <HAL_RCC_OscConfig+0x52e>
 80019ae:	bf00      	nop
 80019b0:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80019b4:	4b9b      	ldr	r3, [pc, #620]	; (8001c24 <HAL_RCC_OscConfig+0x76c>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	4a9a      	ldr	r2, [pc, #616]	; (8001c24 <HAL_RCC_OscConfig+0x76c>)
 80019ba:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80019be:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80019c0:	f7ff fa1c 	bl	8000dfc <HAL_GetTick>
 80019c4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80019c6:	e008      	b.n	80019da <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80019c8:	f7ff fa18 	bl	8000dfc <HAL_GetTick>
 80019cc:	4602      	mov	r2, r0
 80019ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019d0:	1ad3      	subs	r3, r2, r3
 80019d2:	2b02      	cmp	r3, #2
 80019d4:	d901      	bls.n	80019da <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 80019d6:	2303      	movs	r3, #3
 80019d8:	e1c0      	b.n	8001d5c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80019da:	4b92      	ldr	r3, [pc, #584]	; (8001c24 <HAL_RCC_OscConfig+0x76c>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d1f0      	bne.n	80019c8 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f003 0304 	and.w	r3, r3, #4
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	f000 8081 	beq.w	8001af6 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80019f4:	4b8c      	ldr	r3, [pc, #560]	; (8001c28 <HAL_RCC_OscConfig+0x770>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	4a8b      	ldr	r2, [pc, #556]	; (8001c28 <HAL_RCC_OscConfig+0x770>)
 80019fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019fe:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001a00:	f7ff f9fc 	bl	8000dfc <HAL_GetTick>
 8001a04:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001a06:	e008      	b.n	8001a1a <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a08:	f7ff f9f8 	bl	8000dfc <HAL_GetTick>
 8001a0c:	4602      	mov	r2, r0
 8001a0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a10:	1ad3      	subs	r3, r2, r3
 8001a12:	2b64      	cmp	r3, #100	; 0x64
 8001a14:	d901      	bls.n	8001a1a <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8001a16:	2303      	movs	r3, #3
 8001a18:	e1a0      	b.n	8001d5c <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001a1a:	4b83      	ldr	r3, [pc, #524]	; (8001c28 <HAL_RCC_OscConfig+0x770>)
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d0f0      	beq.n	8001a08 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	689b      	ldr	r3, [r3, #8]
 8001a2a:	2b01      	cmp	r3, #1
 8001a2c:	d106      	bne.n	8001a3c <HAL_RCC_OscConfig+0x584>
 8001a2e:	4b7d      	ldr	r3, [pc, #500]	; (8001c24 <HAL_RCC_OscConfig+0x76c>)
 8001a30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a32:	4a7c      	ldr	r2, [pc, #496]	; (8001c24 <HAL_RCC_OscConfig+0x76c>)
 8001a34:	f043 0301 	orr.w	r3, r3, #1
 8001a38:	6713      	str	r3, [r2, #112]	; 0x70
 8001a3a:	e02d      	b.n	8001a98 <HAL_RCC_OscConfig+0x5e0>
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	689b      	ldr	r3, [r3, #8]
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d10c      	bne.n	8001a5e <HAL_RCC_OscConfig+0x5a6>
 8001a44:	4b77      	ldr	r3, [pc, #476]	; (8001c24 <HAL_RCC_OscConfig+0x76c>)
 8001a46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a48:	4a76      	ldr	r2, [pc, #472]	; (8001c24 <HAL_RCC_OscConfig+0x76c>)
 8001a4a:	f023 0301 	bic.w	r3, r3, #1
 8001a4e:	6713      	str	r3, [r2, #112]	; 0x70
 8001a50:	4b74      	ldr	r3, [pc, #464]	; (8001c24 <HAL_RCC_OscConfig+0x76c>)
 8001a52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a54:	4a73      	ldr	r2, [pc, #460]	; (8001c24 <HAL_RCC_OscConfig+0x76c>)
 8001a56:	f023 0304 	bic.w	r3, r3, #4
 8001a5a:	6713      	str	r3, [r2, #112]	; 0x70
 8001a5c:	e01c      	b.n	8001a98 <HAL_RCC_OscConfig+0x5e0>
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	689b      	ldr	r3, [r3, #8]
 8001a62:	2b05      	cmp	r3, #5
 8001a64:	d10c      	bne.n	8001a80 <HAL_RCC_OscConfig+0x5c8>
 8001a66:	4b6f      	ldr	r3, [pc, #444]	; (8001c24 <HAL_RCC_OscConfig+0x76c>)
 8001a68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a6a:	4a6e      	ldr	r2, [pc, #440]	; (8001c24 <HAL_RCC_OscConfig+0x76c>)
 8001a6c:	f043 0304 	orr.w	r3, r3, #4
 8001a70:	6713      	str	r3, [r2, #112]	; 0x70
 8001a72:	4b6c      	ldr	r3, [pc, #432]	; (8001c24 <HAL_RCC_OscConfig+0x76c>)
 8001a74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a76:	4a6b      	ldr	r2, [pc, #428]	; (8001c24 <HAL_RCC_OscConfig+0x76c>)
 8001a78:	f043 0301 	orr.w	r3, r3, #1
 8001a7c:	6713      	str	r3, [r2, #112]	; 0x70
 8001a7e:	e00b      	b.n	8001a98 <HAL_RCC_OscConfig+0x5e0>
 8001a80:	4b68      	ldr	r3, [pc, #416]	; (8001c24 <HAL_RCC_OscConfig+0x76c>)
 8001a82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a84:	4a67      	ldr	r2, [pc, #412]	; (8001c24 <HAL_RCC_OscConfig+0x76c>)
 8001a86:	f023 0301 	bic.w	r3, r3, #1
 8001a8a:	6713      	str	r3, [r2, #112]	; 0x70
 8001a8c:	4b65      	ldr	r3, [pc, #404]	; (8001c24 <HAL_RCC_OscConfig+0x76c>)
 8001a8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a90:	4a64      	ldr	r2, [pc, #400]	; (8001c24 <HAL_RCC_OscConfig+0x76c>)
 8001a92:	f023 0304 	bic.w	r3, r3, #4
 8001a96:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	689b      	ldr	r3, [r3, #8]
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d015      	beq.n	8001acc <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001aa0:	f7ff f9ac 	bl	8000dfc <HAL_GetTick>
 8001aa4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001aa6:	e00a      	b.n	8001abe <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001aa8:	f7ff f9a8 	bl	8000dfc <HAL_GetTick>
 8001aac:	4602      	mov	r2, r0
 8001aae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ab0:	1ad3      	subs	r3, r2, r3
 8001ab2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ab6:	4293      	cmp	r3, r2
 8001ab8:	d901      	bls.n	8001abe <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8001aba:	2303      	movs	r3, #3
 8001abc:	e14e      	b.n	8001d5c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001abe:	4b59      	ldr	r3, [pc, #356]	; (8001c24 <HAL_RCC_OscConfig+0x76c>)
 8001ac0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ac2:	f003 0302 	and.w	r3, r3, #2
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d0ee      	beq.n	8001aa8 <HAL_RCC_OscConfig+0x5f0>
 8001aca:	e014      	b.n	8001af6 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001acc:	f7ff f996 	bl	8000dfc <HAL_GetTick>
 8001ad0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001ad2:	e00a      	b.n	8001aea <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ad4:	f7ff f992 	bl	8000dfc <HAL_GetTick>
 8001ad8:	4602      	mov	r2, r0
 8001ada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001adc:	1ad3      	subs	r3, r2, r3
 8001ade:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ae2:	4293      	cmp	r3, r2
 8001ae4:	d901      	bls.n	8001aea <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8001ae6:	2303      	movs	r3, #3
 8001ae8:	e138      	b.n	8001d5c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001aea:	4b4e      	ldr	r3, [pc, #312]	; (8001c24 <HAL_RCC_OscConfig+0x76c>)
 8001aec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001aee:	f003 0302 	and.w	r3, r3, #2
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d1ee      	bne.n	8001ad4 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	f000 812d 	beq.w	8001d5a <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8001b00:	4b48      	ldr	r3, [pc, #288]	; (8001c24 <HAL_RCC_OscConfig+0x76c>)
 8001b02:	691b      	ldr	r3, [r3, #16]
 8001b04:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001b08:	2b18      	cmp	r3, #24
 8001b0a:	f000 80bd 	beq.w	8001c88 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b12:	2b02      	cmp	r3, #2
 8001b14:	f040 809e 	bne.w	8001c54 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b18:	4b42      	ldr	r3, [pc, #264]	; (8001c24 <HAL_RCC_OscConfig+0x76c>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	4a41      	ldr	r2, [pc, #260]	; (8001c24 <HAL_RCC_OscConfig+0x76c>)
 8001b1e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001b22:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b24:	f7ff f96a 	bl	8000dfc <HAL_GetTick>
 8001b28:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001b2a:	e008      	b.n	8001b3e <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b2c:	f7ff f966 	bl	8000dfc <HAL_GetTick>
 8001b30:	4602      	mov	r2, r0
 8001b32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b34:	1ad3      	subs	r3, r2, r3
 8001b36:	2b02      	cmp	r3, #2
 8001b38:	d901      	bls.n	8001b3e <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8001b3a:	2303      	movs	r3, #3
 8001b3c:	e10e      	b.n	8001d5c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001b3e:	4b39      	ldr	r3, [pc, #228]	; (8001c24 <HAL_RCC_OscConfig+0x76c>)
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d1f0      	bne.n	8001b2c <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001b4a:	4b36      	ldr	r3, [pc, #216]	; (8001c24 <HAL_RCC_OscConfig+0x76c>)
 8001b4c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001b4e:	4b37      	ldr	r3, [pc, #220]	; (8001c2c <HAL_RCC_OscConfig+0x774>)
 8001b50:	4013      	ands	r3, r2
 8001b52:	687a      	ldr	r2, [r7, #4]
 8001b54:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8001b56:	687a      	ldr	r2, [r7, #4]
 8001b58:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001b5a:	0112      	lsls	r2, r2, #4
 8001b5c:	430a      	orrs	r2, r1
 8001b5e:	4931      	ldr	r1, [pc, #196]	; (8001c24 <HAL_RCC_OscConfig+0x76c>)
 8001b60:	4313      	orrs	r3, r2
 8001b62:	628b      	str	r3, [r1, #40]	; 0x28
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b68:	3b01      	subs	r3, #1
 8001b6a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b72:	3b01      	subs	r3, #1
 8001b74:	025b      	lsls	r3, r3, #9
 8001b76:	b29b      	uxth	r3, r3
 8001b78:	431a      	orrs	r2, r3
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b7e:	3b01      	subs	r3, #1
 8001b80:	041b      	lsls	r3, r3, #16
 8001b82:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8001b86:	431a      	orrs	r2, r3
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b8c:	3b01      	subs	r3, #1
 8001b8e:	061b      	lsls	r3, r3, #24
 8001b90:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8001b94:	4923      	ldr	r1, [pc, #140]	; (8001c24 <HAL_RCC_OscConfig+0x76c>)
 8001b96:	4313      	orrs	r3, r2
 8001b98:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8001b9a:	4b22      	ldr	r3, [pc, #136]	; (8001c24 <HAL_RCC_OscConfig+0x76c>)
 8001b9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b9e:	4a21      	ldr	r2, [pc, #132]	; (8001c24 <HAL_RCC_OscConfig+0x76c>)
 8001ba0:	f023 0301 	bic.w	r3, r3, #1
 8001ba4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001ba6:	4b1f      	ldr	r3, [pc, #124]	; (8001c24 <HAL_RCC_OscConfig+0x76c>)
 8001ba8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001baa:	4b21      	ldr	r3, [pc, #132]	; (8001c30 <HAL_RCC_OscConfig+0x778>)
 8001bac:	4013      	ands	r3, r2
 8001bae:	687a      	ldr	r2, [r7, #4]
 8001bb0:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001bb2:	00d2      	lsls	r2, r2, #3
 8001bb4:	491b      	ldr	r1, [pc, #108]	; (8001c24 <HAL_RCC_OscConfig+0x76c>)
 8001bb6:	4313      	orrs	r3, r2
 8001bb8:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8001bba:	4b1a      	ldr	r3, [pc, #104]	; (8001c24 <HAL_RCC_OscConfig+0x76c>)
 8001bbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bbe:	f023 020c 	bic.w	r2, r3, #12
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bc6:	4917      	ldr	r1, [pc, #92]	; (8001c24 <HAL_RCC_OscConfig+0x76c>)
 8001bc8:	4313      	orrs	r3, r2
 8001bca:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8001bcc:	4b15      	ldr	r3, [pc, #84]	; (8001c24 <HAL_RCC_OscConfig+0x76c>)
 8001bce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bd0:	f023 0202 	bic.w	r2, r3, #2
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bd8:	4912      	ldr	r1, [pc, #72]	; (8001c24 <HAL_RCC_OscConfig+0x76c>)
 8001bda:	4313      	orrs	r3, r2
 8001bdc:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8001bde:	4b11      	ldr	r3, [pc, #68]	; (8001c24 <HAL_RCC_OscConfig+0x76c>)
 8001be0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001be2:	4a10      	ldr	r2, [pc, #64]	; (8001c24 <HAL_RCC_OscConfig+0x76c>)
 8001be4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001be8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001bea:	4b0e      	ldr	r3, [pc, #56]	; (8001c24 <HAL_RCC_OscConfig+0x76c>)
 8001bec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bee:	4a0d      	ldr	r2, [pc, #52]	; (8001c24 <HAL_RCC_OscConfig+0x76c>)
 8001bf0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001bf4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8001bf6:	4b0b      	ldr	r3, [pc, #44]	; (8001c24 <HAL_RCC_OscConfig+0x76c>)
 8001bf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bfa:	4a0a      	ldr	r2, [pc, #40]	; (8001c24 <HAL_RCC_OscConfig+0x76c>)
 8001bfc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c00:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8001c02:	4b08      	ldr	r3, [pc, #32]	; (8001c24 <HAL_RCC_OscConfig+0x76c>)
 8001c04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c06:	4a07      	ldr	r2, [pc, #28]	; (8001c24 <HAL_RCC_OscConfig+0x76c>)
 8001c08:	f043 0301 	orr.w	r3, r3, #1
 8001c0c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c0e:	4b05      	ldr	r3, [pc, #20]	; (8001c24 <HAL_RCC_OscConfig+0x76c>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	4a04      	ldr	r2, [pc, #16]	; (8001c24 <HAL_RCC_OscConfig+0x76c>)
 8001c14:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001c18:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c1a:	f7ff f8ef 	bl	8000dfc <HAL_GetTick>
 8001c1e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001c20:	e011      	b.n	8001c46 <HAL_RCC_OscConfig+0x78e>
 8001c22:	bf00      	nop
 8001c24:	58024400 	.word	0x58024400
 8001c28:	58024800 	.word	0x58024800
 8001c2c:	fffffc0c 	.word	0xfffffc0c
 8001c30:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c34:	f7ff f8e2 	bl	8000dfc <HAL_GetTick>
 8001c38:	4602      	mov	r2, r0
 8001c3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c3c:	1ad3      	subs	r3, r2, r3
 8001c3e:	2b02      	cmp	r3, #2
 8001c40:	d901      	bls.n	8001c46 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8001c42:	2303      	movs	r3, #3
 8001c44:	e08a      	b.n	8001d5c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001c46:	4b47      	ldr	r3, [pc, #284]	; (8001d64 <HAL_RCC_OscConfig+0x8ac>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d0f0      	beq.n	8001c34 <HAL_RCC_OscConfig+0x77c>
 8001c52:	e082      	b.n	8001d5a <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c54:	4b43      	ldr	r3, [pc, #268]	; (8001d64 <HAL_RCC_OscConfig+0x8ac>)
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	4a42      	ldr	r2, [pc, #264]	; (8001d64 <HAL_RCC_OscConfig+0x8ac>)
 8001c5a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001c5e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c60:	f7ff f8cc 	bl	8000dfc <HAL_GetTick>
 8001c64:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001c66:	e008      	b.n	8001c7a <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c68:	f7ff f8c8 	bl	8000dfc <HAL_GetTick>
 8001c6c:	4602      	mov	r2, r0
 8001c6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c70:	1ad3      	subs	r3, r2, r3
 8001c72:	2b02      	cmp	r3, #2
 8001c74:	d901      	bls.n	8001c7a <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8001c76:	2303      	movs	r3, #3
 8001c78:	e070      	b.n	8001d5c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001c7a:	4b3a      	ldr	r3, [pc, #232]	; (8001d64 <HAL_RCC_OscConfig+0x8ac>)
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d1f0      	bne.n	8001c68 <HAL_RCC_OscConfig+0x7b0>
 8001c86:	e068      	b.n	8001d5a <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8001c88:	4b36      	ldr	r3, [pc, #216]	; (8001d64 <HAL_RCC_OscConfig+0x8ac>)
 8001c8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c8c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8001c8e:	4b35      	ldr	r3, [pc, #212]	; (8001d64 <HAL_RCC_OscConfig+0x8ac>)
 8001c90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c92:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c98:	2b01      	cmp	r3, #1
 8001c9a:	d031      	beq.n	8001d00 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c9c:	693b      	ldr	r3, [r7, #16]
 8001c9e:	f003 0203 	and.w	r2, r3, #3
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001ca6:	429a      	cmp	r2, r3
 8001ca8:	d12a      	bne.n	8001d00 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001caa:	693b      	ldr	r3, [r7, #16]
 8001cac:	091b      	lsrs	r3, r3, #4
 8001cae:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cb6:	429a      	cmp	r2, r3
 8001cb8:	d122      	bne.n	8001d00 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cc4:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001cc6:	429a      	cmp	r2, r3
 8001cc8:	d11a      	bne.n	8001d00 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	0a5b      	lsrs	r3, r3, #9
 8001cce:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001cd6:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001cd8:	429a      	cmp	r2, r3
 8001cda:	d111      	bne.n	8001d00 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	0c1b      	lsrs	r3, r3, #16
 8001ce0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ce8:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001cea:	429a      	cmp	r2, r3
 8001cec:	d108      	bne.n	8001d00 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	0e1b      	lsrs	r3, r3, #24
 8001cf2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001cfa:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001cfc:	429a      	cmp	r2, r3
 8001cfe:	d001      	beq.n	8001d04 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8001d00:	2301      	movs	r3, #1
 8001d02:	e02b      	b.n	8001d5c <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8001d04:	4b17      	ldr	r3, [pc, #92]	; (8001d64 <HAL_RCC_OscConfig+0x8ac>)
 8001d06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d08:	08db      	lsrs	r3, r3, #3
 8001d0a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8001d0e:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d14:	693a      	ldr	r2, [r7, #16]
 8001d16:	429a      	cmp	r2, r3
 8001d18:	d01f      	beq.n	8001d5a <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8001d1a:	4b12      	ldr	r3, [pc, #72]	; (8001d64 <HAL_RCC_OscConfig+0x8ac>)
 8001d1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d1e:	4a11      	ldr	r2, [pc, #68]	; (8001d64 <HAL_RCC_OscConfig+0x8ac>)
 8001d20:	f023 0301 	bic.w	r3, r3, #1
 8001d24:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001d26:	f7ff f869 	bl	8000dfc <HAL_GetTick>
 8001d2a:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8001d2c:	bf00      	nop
 8001d2e:	f7ff f865 	bl	8000dfc <HAL_GetTick>
 8001d32:	4602      	mov	r2, r0
 8001d34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d36:	4293      	cmp	r3, r2
 8001d38:	d0f9      	beq.n	8001d2e <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001d3a:	4b0a      	ldr	r3, [pc, #40]	; (8001d64 <HAL_RCC_OscConfig+0x8ac>)
 8001d3c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001d3e:	4b0a      	ldr	r3, [pc, #40]	; (8001d68 <HAL_RCC_OscConfig+0x8b0>)
 8001d40:	4013      	ands	r3, r2
 8001d42:	687a      	ldr	r2, [r7, #4]
 8001d44:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001d46:	00d2      	lsls	r2, r2, #3
 8001d48:	4906      	ldr	r1, [pc, #24]	; (8001d64 <HAL_RCC_OscConfig+0x8ac>)
 8001d4a:	4313      	orrs	r3, r2
 8001d4c:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8001d4e:	4b05      	ldr	r3, [pc, #20]	; (8001d64 <HAL_RCC_OscConfig+0x8ac>)
 8001d50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d52:	4a04      	ldr	r2, [pc, #16]	; (8001d64 <HAL_RCC_OscConfig+0x8ac>)
 8001d54:	f043 0301 	orr.w	r3, r3, #1
 8001d58:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8001d5a:	2300      	movs	r3, #0
}
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	3730      	adds	r7, #48	; 0x30
 8001d60:	46bd      	mov	sp, r7
 8001d62:	bd80      	pop	{r7, pc}
 8001d64:	58024400 	.word	0x58024400
 8001d68:	ffff0007 	.word	0xffff0007

08001d6c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b086      	sub	sp, #24
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
 8001d74:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d101      	bne.n	8001d80 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001d7c:	2301      	movs	r3, #1
 8001d7e:	e19c      	b.n	80020ba <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001d80:	4b8a      	ldr	r3, [pc, #552]	; (8001fac <HAL_RCC_ClockConfig+0x240>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	f003 030f 	and.w	r3, r3, #15
 8001d88:	683a      	ldr	r2, [r7, #0]
 8001d8a:	429a      	cmp	r2, r3
 8001d8c:	d910      	bls.n	8001db0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d8e:	4b87      	ldr	r3, [pc, #540]	; (8001fac <HAL_RCC_ClockConfig+0x240>)
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f023 020f 	bic.w	r2, r3, #15
 8001d96:	4985      	ldr	r1, [pc, #532]	; (8001fac <HAL_RCC_ClockConfig+0x240>)
 8001d98:	683b      	ldr	r3, [r7, #0]
 8001d9a:	4313      	orrs	r3, r2
 8001d9c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d9e:	4b83      	ldr	r3, [pc, #524]	; (8001fac <HAL_RCC_ClockConfig+0x240>)
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f003 030f 	and.w	r3, r3, #15
 8001da6:	683a      	ldr	r2, [r7, #0]
 8001da8:	429a      	cmp	r2, r3
 8001daa:	d001      	beq.n	8001db0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001dac:	2301      	movs	r3, #1
 8001dae:	e184      	b.n	80020ba <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f003 0304 	and.w	r3, r3, #4
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d010      	beq.n	8001dde <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	691a      	ldr	r2, [r3, #16]
 8001dc0:	4b7b      	ldr	r3, [pc, #492]	; (8001fb0 <HAL_RCC_ClockConfig+0x244>)
 8001dc2:	699b      	ldr	r3, [r3, #24]
 8001dc4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001dc8:	429a      	cmp	r2, r3
 8001dca:	d908      	bls.n	8001dde <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001dcc:	4b78      	ldr	r3, [pc, #480]	; (8001fb0 <HAL_RCC_ClockConfig+0x244>)
 8001dce:	699b      	ldr	r3, [r3, #24]
 8001dd0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	691b      	ldr	r3, [r3, #16]
 8001dd8:	4975      	ldr	r1, [pc, #468]	; (8001fb0 <HAL_RCC_ClockConfig+0x244>)
 8001dda:	4313      	orrs	r3, r2
 8001ddc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f003 0308 	and.w	r3, r3, #8
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d010      	beq.n	8001e0c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	695a      	ldr	r2, [r3, #20]
 8001dee:	4b70      	ldr	r3, [pc, #448]	; (8001fb0 <HAL_RCC_ClockConfig+0x244>)
 8001df0:	69db      	ldr	r3, [r3, #28]
 8001df2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001df6:	429a      	cmp	r2, r3
 8001df8:	d908      	bls.n	8001e0c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001dfa:	4b6d      	ldr	r3, [pc, #436]	; (8001fb0 <HAL_RCC_ClockConfig+0x244>)
 8001dfc:	69db      	ldr	r3, [r3, #28]
 8001dfe:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	695b      	ldr	r3, [r3, #20]
 8001e06:	496a      	ldr	r1, [pc, #424]	; (8001fb0 <HAL_RCC_ClockConfig+0x244>)
 8001e08:	4313      	orrs	r3, r2
 8001e0a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f003 0310 	and.w	r3, r3, #16
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d010      	beq.n	8001e3a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	699a      	ldr	r2, [r3, #24]
 8001e1c:	4b64      	ldr	r3, [pc, #400]	; (8001fb0 <HAL_RCC_ClockConfig+0x244>)
 8001e1e:	69db      	ldr	r3, [r3, #28]
 8001e20:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001e24:	429a      	cmp	r2, r3
 8001e26:	d908      	bls.n	8001e3a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001e28:	4b61      	ldr	r3, [pc, #388]	; (8001fb0 <HAL_RCC_ClockConfig+0x244>)
 8001e2a:	69db      	ldr	r3, [r3, #28]
 8001e2c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	699b      	ldr	r3, [r3, #24]
 8001e34:	495e      	ldr	r1, [pc, #376]	; (8001fb0 <HAL_RCC_ClockConfig+0x244>)
 8001e36:	4313      	orrs	r3, r2
 8001e38:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f003 0320 	and.w	r3, r3, #32
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d010      	beq.n	8001e68 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	69da      	ldr	r2, [r3, #28]
 8001e4a:	4b59      	ldr	r3, [pc, #356]	; (8001fb0 <HAL_RCC_ClockConfig+0x244>)
 8001e4c:	6a1b      	ldr	r3, [r3, #32]
 8001e4e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001e52:	429a      	cmp	r2, r3
 8001e54:	d908      	bls.n	8001e68 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8001e56:	4b56      	ldr	r3, [pc, #344]	; (8001fb0 <HAL_RCC_ClockConfig+0x244>)
 8001e58:	6a1b      	ldr	r3, [r3, #32]
 8001e5a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	69db      	ldr	r3, [r3, #28]
 8001e62:	4953      	ldr	r1, [pc, #332]	; (8001fb0 <HAL_RCC_ClockConfig+0x244>)
 8001e64:	4313      	orrs	r3, r2
 8001e66:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f003 0302 	and.w	r3, r3, #2
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d010      	beq.n	8001e96 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	68da      	ldr	r2, [r3, #12]
 8001e78:	4b4d      	ldr	r3, [pc, #308]	; (8001fb0 <HAL_RCC_ClockConfig+0x244>)
 8001e7a:	699b      	ldr	r3, [r3, #24]
 8001e7c:	f003 030f 	and.w	r3, r3, #15
 8001e80:	429a      	cmp	r2, r3
 8001e82:	d908      	bls.n	8001e96 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e84:	4b4a      	ldr	r3, [pc, #296]	; (8001fb0 <HAL_RCC_ClockConfig+0x244>)
 8001e86:	699b      	ldr	r3, [r3, #24]
 8001e88:	f023 020f 	bic.w	r2, r3, #15
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	68db      	ldr	r3, [r3, #12]
 8001e90:	4947      	ldr	r1, [pc, #284]	; (8001fb0 <HAL_RCC_ClockConfig+0x244>)
 8001e92:	4313      	orrs	r3, r2
 8001e94:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f003 0301 	and.w	r3, r3, #1
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d055      	beq.n	8001f4e <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8001ea2:	4b43      	ldr	r3, [pc, #268]	; (8001fb0 <HAL_RCC_ClockConfig+0x244>)
 8001ea4:	699b      	ldr	r3, [r3, #24]
 8001ea6:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	689b      	ldr	r3, [r3, #8]
 8001eae:	4940      	ldr	r1, [pc, #256]	; (8001fb0 <HAL_RCC_ClockConfig+0x244>)
 8001eb0:	4313      	orrs	r3, r2
 8001eb2:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	685b      	ldr	r3, [r3, #4]
 8001eb8:	2b02      	cmp	r3, #2
 8001eba:	d107      	bne.n	8001ecc <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001ebc:	4b3c      	ldr	r3, [pc, #240]	; (8001fb0 <HAL_RCC_ClockConfig+0x244>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d121      	bne.n	8001f0c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001ec8:	2301      	movs	r3, #1
 8001eca:	e0f6      	b.n	80020ba <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	685b      	ldr	r3, [r3, #4]
 8001ed0:	2b03      	cmp	r3, #3
 8001ed2:	d107      	bne.n	8001ee4 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001ed4:	4b36      	ldr	r3, [pc, #216]	; (8001fb0 <HAL_RCC_ClockConfig+0x244>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d115      	bne.n	8001f0c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001ee0:	2301      	movs	r3, #1
 8001ee2:	e0ea      	b.n	80020ba <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	685b      	ldr	r3, [r3, #4]
 8001ee8:	2b01      	cmp	r3, #1
 8001eea:	d107      	bne.n	8001efc <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001eec:	4b30      	ldr	r3, [pc, #192]	; (8001fb0 <HAL_RCC_ClockConfig+0x244>)
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d109      	bne.n	8001f0c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001ef8:	2301      	movs	r3, #1
 8001efa:	e0de      	b.n	80020ba <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001efc:	4b2c      	ldr	r3, [pc, #176]	; (8001fb0 <HAL_RCC_ClockConfig+0x244>)
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f003 0304 	and.w	r3, r3, #4
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d101      	bne.n	8001f0c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001f08:	2301      	movs	r3, #1
 8001f0a:	e0d6      	b.n	80020ba <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001f0c:	4b28      	ldr	r3, [pc, #160]	; (8001fb0 <HAL_RCC_ClockConfig+0x244>)
 8001f0e:	691b      	ldr	r3, [r3, #16]
 8001f10:	f023 0207 	bic.w	r2, r3, #7
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	685b      	ldr	r3, [r3, #4]
 8001f18:	4925      	ldr	r1, [pc, #148]	; (8001fb0 <HAL_RCC_ClockConfig+0x244>)
 8001f1a:	4313      	orrs	r3, r2
 8001f1c:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001f1e:	f7fe ff6d 	bl	8000dfc <HAL_GetTick>
 8001f22:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f24:	e00a      	b.n	8001f3c <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f26:	f7fe ff69 	bl	8000dfc <HAL_GetTick>
 8001f2a:	4602      	mov	r2, r0
 8001f2c:	697b      	ldr	r3, [r7, #20]
 8001f2e:	1ad3      	subs	r3, r2, r3
 8001f30:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f34:	4293      	cmp	r3, r2
 8001f36:	d901      	bls.n	8001f3c <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8001f38:	2303      	movs	r3, #3
 8001f3a:	e0be      	b.n	80020ba <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f3c:	4b1c      	ldr	r3, [pc, #112]	; (8001fb0 <HAL_RCC_ClockConfig+0x244>)
 8001f3e:	691b      	ldr	r3, [r3, #16]
 8001f40:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	685b      	ldr	r3, [r3, #4]
 8001f48:	00db      	lsls	r3, r3, #3
 8001f4a:	429a      	cmp	r2, r3
 8001f4c:	d1eb      	bne.n	8001f26 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f003 0302 	and.w	r3, r3, #2
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d010      	beq.n	8001f7c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	68da      	ldr	r2, [r3, #12]
 8001f5e:	4b14      	ldr	r3, [pc, #80]	; (8001fb0 <HAL_RCC_ClockConfig+0x244>)
 8001f60:	699b      	ldr	r3, [r3, #24]
 8001f62:	f003 030f 	and.w	r3, r3, #15
 8001f66:	429a      	cmp	r2, r3
 8001f68:	d208      	bcs.n	8001f7c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f6a:	4b11      	ldr	r3, [pc, #68]	; (8001fb0 <HAL_RCC_ClockConfig+0x244>)
 8001f6c:	699b      	ldr	r3, [r3, #24]
 8001f6e:	f023 020f 	bic.w	r2, r3, #15
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	68db      	ldr	r3, [r3, #12]
 8001f76:	490e      	ldr	r1, [pc, #56]	; (8001fb0 <HAL_RCC_ClockConfig+0x244>)
 8001f78:	4313      	orrs	r3, r2
 8001f7a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001f7c:	4b0b      	ldr	r3, [pc, #44]	; (8001fac <HAL_RCC_ClockConfig+0x240>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f003 030f 	and.w	r3, r3, #15
 8001f84:	683a      	ldr	r2, [r7, #0]
 8001f86:	429a      	cmp	r2, r3
 8001f88:	d214      	bcs.n	8001fb4 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f8a:	4b08      	ldr	r3, [pc, #32]	; (8001fac <HAL_RCC_ClockConfig+0x240>)
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f023 020f 	bic.w	r2, r3, #15
 8001f92:	4906      	ldr	r1, [pc, #24]	; (8001fac <HAL_RCC_ClockConfig+0x240>)
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	4313      	orrs	r3, r2
 8001f98:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f9a:	4b04      	ldr	r3, [pc, #16]	; (8001fac <HAL_RCC_ClockConfig+0x240>)
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f003 030f 	and.w	r3, r3, #15
 8001fa2:	683a      	ldr	r2, [r7, #0]
 8001fa4:	429a      	cmp	r2, r3
 8001fa6:	d005      	beq.n	8001fb4 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8001fa8:	2301      	movs	r3, #1
 8001faa:	e086      	b.n	80020ba <HAL_RCC_ClockConfig+0x34e>
 8001fac:	52002000 	.word	0x52002000
 8001fb0:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f003 0304 	and.w	r3, r3, #4
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d010      	beq.n	8001fe2 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	691a      	ldr	r2, [r3, #16]
 8001fc4:	4b3f      	ldr	r3, [pc, #252]	; (80020c4 <HAL_RCC_ClockConfig+0x358>)
 8001fc6:	699b      	ldr	r3, [r3, #24]
 8001fc8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001fcc:	429a      	cmp	r2, r3
 8001fce:	d208      	bcs.n	8001fe2 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001fd0:	4b3c      	ldr	r3, [pc, #240]	; (80020c4 <HAL_RCC_ClockConfig+0x358>)
 8001fd2:	699b      	ldr	r3, [r3, #24]
 8001fd4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	691b      	ldr	r3, [r3, #16]
 8001fdc:	4939      	ldr	r1, [pc, #228]	; (80020c4 <HAL_RCC_ClockConfig+0x358>)
 8001fde:	4313      	orrs	r3, r2
 8001fe0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f003 0308 	and.w	r3, r3, #8
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d010      	beq.n	8002010 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	695a      	ldr	r2, [r3, #20]
 8001ff2:	4b34      	ldr	r3, [pc, #208]	; (80020c4 <HAL_RCC_ClockConfig+0x358>)
 8001ff4:	69db      	ldr	r3, [r3, #28]
 8001ff6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001ffa:	429a      	cmp	r2, r3
 8001ffc:	d208      	bcs.n	8002010 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001ffe:	4b31      	ldr	r3, [pc, #196]	; (80020c4 <HAL_RCC_ClockConfig+0x358>)
 8002000:	69db      	ldr	r3, [r3, #28]
 8002002:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	695b      	ldr	r3, [r3, #20]
 800200a:	492e      	ldr	r1, [pc, #184]	; (80020c4 <HAL_RCC_ClockConfig+0x358>)
 800200c:	4313      	orrs	r3, r2
 800200e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f003 0310 	and.w	r3, r3, #16
 8002018:	2b00      	cmp	r3, #0
 800201a:	d010      	beq.n	800203e <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	699a      	ldr	r2, [r3, #24]
 8002020:	4b28      	ldr	r3, [pc, #160]	; (80020c4 <HAL_RCC_ClockConfig+0x358>)
 8002022:	69db      	ldr	r3, [r3, #28]
 8002024:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002028:	429a      	cmp	r2, r3
 800202a:	d208      	bcs.n	800203e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800202c:	4b25      	ldr	r3, [pc, #148]	; (80020c4 <HAL_RCC_ClockConfig+0x358>)
 800202e:	69db      	ldr	r3, [r3, #28]
 8002030:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	699b      	ldr	r3, [r3, #24]
 8002038:	4922      	ldr	r1, [pc, #136]	; (80020c4 <HAL_RCC_ClockConfig+0x358>)
 800203a:	4313      	orrs	r3, r2
 800203c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f003 0320 	and.w	r3, r3, #32
 8002046:	2b00      	cmp	r3, #0
 8002048:	d010      	beq.n	800206c <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	69da      	ldr	r2, [r3, #28]
 800204e:	4b1d      	ldr	r3, [pc, #116]	; (80020c4 <HAL_RCC_ClockConfig+0x358>)
 8002050:	6a1b      	ldr	r3, [r3, #32]
 8002052:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002056:	429a      	cmp	r2, r3
 8002058:	d208      	bcs.n	800206c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800205a:	4b1a      	ldr	r3, [pc, #104]	; (80020c4 <HAL_RCC_ClockConfig+0x358>)
 800205c:	6a1b      	ldr	r3, [r3, #32]
 800205e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	69db      	ldr	r3, [r3, #28]
 8002066:	4917      	ldr	r1, [pc, #92]	; (80020c4 <HAL_RCC_ClockConfig+0x358>)
 8002068:	4313      	orrs	r3, r2
 800206a:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800206c:	f000 f834 	bl	80020d8 <HAL_RCC_GetSysClockFreq>
 8002070:	4602      	mov	r2, r0
 8002072:	4b14      	ldr	r3, [pc, #80]	; (80020c4 <HAL_RCC_ClockConfig+0x358>)
 8002074:	699b      	ldr	r3, [r3, #24]
 8002076:	0a1b      	lsrs	r3, r3, #8
 8002078:	f003 030f 	and.w	r3, r3, #15
 800207c:	4912      	ldr	r1, [pc, #72]	; (80020c8 <HAL_RCC_ClockConfig+0x35c>)
 800207e:	5ccb      	ldrb	r3, [r1, r3]
 8002080:	f003 031f 	and.w	r3, r3, #31
 8002084:	fa22 f303 	lsr.w	r3, r2, r3
 8002088:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800208a:	4b0e      	ldr	r3, [pc, #56]	; (80020c4 <HAL_RCC_ClockConfig+0x358>)
 800208c:	699b      	ldr	r3, [r3, #24]
 800208e:	f003 030f 	and.w	r3, r3, #15
 8002092:	4a0d      	ldr	r2, [pc, #52]	; (80020c8 <HAL_RCC_ClockConfig+0x35c>)
 8002094:	5cd3      	ldrb	r3, [r2, r3]
 8002096:	f003 031f 	and.w	r3, r3, #31
 800209a:	693a      	ldr	r2, [r7, #16]
 800209c:	fa22 f303 	lsr.w	r3, r2, r3
 80020a0:	4a0a      	ldr	r2, [pc, #40]	; (80020cc <HAL_RCC_ClockConfig+0x360>)
 80020a2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80020a4:	4a0a      	ldr	r2, [pc, #40]	; (80020d0 <HAL_RCC_ClockConfig+0x364>)
 80020a6:	693b      	ldr	r3, [r7, #16]
 80020a8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80020aa:	4b0a      	ldr	r3, [pc, #40]	; (80020d4 <HAL_RCC_ClockConfig+0x368>)
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	4618      	mov	r0, r3
 80020b0:	f7fe fe5a 	bl	8000d68 <HAL_InitTick>
 80020b4:	4603      	mov	r3, r0
 80020b6:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80020b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80020ba:	4618      	mov	r0, r3
 80020bc:	3718      	adds	r7, #24
 80020be:	46bd      	mov	sp, r7
 80020c0:	bd80      	pop	{r7, pc}
 80020c2:	bf00      	nop
 80020c4:	58024400 	.word	0x58024400
 80020c8:	08003ed0 	.word	0x08003ed0
 80020cc:	24000004 	.word	0x24000004
 80020d0:	24000000 	.word	0x24000000
 80020d4:	24000008 	.word	0x24000008

080020d8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80020d8:	b480      	push	{r7}
 80020da:	b089      	sub	sp, #36	; 0x24
 80020dc:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80020de:	4bb3      	ldr	r3, [pc, #716]	; (80023ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 80020e0:	691b      	ldr	r3, [r3, #16]
 80020e2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80020e6:	2b18      	cmp	r3, #24
 80020e8:	f200 8155 	bhi.w	8002396 <HAL_RCC_GetSysClockFreq+0x2be>
 80020ec:	a201      	add	r2, pc, #4	; (adr r2, 80020f4 <HAL_RCC_GetSysClockFreq+0x1c>)
 80020ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020f2:	bf00      	nop
 80020f4:	08002159 	.word	0x08002159
 80020f8:	08002397 	.word	0x08002397
 80020fc:	08002397 	.word	0x08002397
 8002100:	08002397 	.word	0x08002397
 8002104:	08002397 	.word	0x08002397
 8002108:	08002397 	.word	0x08002397
 800210c:	08002397 	.word	0x08002397
 8002110:	08002397 	.word	0x08002397
 8002114:	0800217f 	.word	0x0800217f
 8002118:	08002397 	.word	0x08002397
 800211c:	08002397 	.word	0x08002397
 8002120:	08002397 	.word	0x08002397
 8002124:	08002397 	.word	0x08002397
 8002128:	08002397 	.word	0x08002397
 800212c:	08002397 	.word	0x08002397
 8002130:	08002397 	.word	0x08002397
 8002134:	08002185 	.word	0x08002185
 8002138:	08002397 	.word	0x08002397
 800213c:	08002397 	.word	0x08002397
 8002140:	08002397 	.word	0x08002397
 8002144:	08002397 	.word	0x08002397
 8002148:	08002397 	.word	0x08002397
 800214c:	08002397 	.word	0x08002397
 8002150:	08002397 	.word	0x08002397
 8002154:	0800218b 	.word	0x0800218b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002158:	4b94      	ldr	r3, [pc, #592]	; (80023ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f003 0320 	and.w	r3, r3, #32
 8002160:	2b00      	cmp	r3, #0
 8002162:	d009      	beq.n	8002178 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002164:	4b91      	ldr	r3, [pc, #580]	; (80023ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	08db      	lsrs	r3, r3, #3
 800216a:	f003 0303 	and.w	r3, r3, #3
 800216e:	4a90      	ldr	r2, [pc, #576]	; (80023b0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002170:	fa22 f303 	lsr.w	r3, r2, r3
 8002174:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8002176:	e111      	b.n	800239c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8002178:	4b8d      	ldr	r3, [pc, #564]	; (80023b0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800217a:	61bb      	str	r3, [r7, #24]
      break;
 800217c:	e10e      	b.n	800239c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800217e:	4b8d      	ldr	r3, [pc, #564]	; (80023b4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002180:	61bb      	str	r3, [r7, #24]
      break;
 8002182:	e10b      	b.n	800239c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8002184:	4b8c      	ldr	r3, [pc, #560]	; (80023b8 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8002186:	61bb      	str	r3, [r7, #24]
      break;
 8002188:	e108      	b.n	800239c <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800218a:	4b88      	ldr	r3, [pc, #544]	; (80023ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 800218c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800218e:	f003 0303 	and.w	r3, r3, #3
 8002192:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8002194:	4b85      	ldr	r3, [pc, #532]	; (80023ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002196:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002198:	091b      	lsrs	r3, r3, #4
 800219a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800219e:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80021a0:	4b82      	ldr	r3, [pc, #520]	; (80023ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 80021a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021a4:	f003 0301 	and.w	r3, r3, #1
 80021a8:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80021aa:	4b80      	ldr	r3, [pc, #512]	; (80023ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 80021ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021ae:	08db      	lsrs	r3, r3, #3
 80021b0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80021b4:	68fa      	ldr	r2, [r7, #12]
 80021b6:	fb02 f303 	mul.w	r3, r2, r3
 80021ba:	ee07 3a90 	vmov	s15, r3
 80021be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80021c2:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80021c6:	693b      	ldr	r3, [r7, #16]
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	f000 80e1 	beq.w	8002390 <HAL_RCC_GetSysClockFreq+0x2b8>
 80021ce:	697b      	ldr	r3, [r7, #20]
 80021d0:	2b02      	cmp	r3, #2
 80021d2:	f000 8083 	beq.w	80022dc <HAL_RCC_GetSysClockFreq+0x204>
 80021d6:	697b      	ldr	r3, [r7, #20]
 80021d8:	2b02      	cmp	r3, #2
 80021da:	f200 80a1 	bhi.w	8002320 <HAL_RCC_GetSysClockFreq+0x248>
 80021de:	697b      	ldr	r3, [r7, #20]
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d003      	beq.n	80021ec <HAL_RCC_GetSysClockFreq+0x114>
 80021e4:	697b      	ldr	r3, [r7, #20]
 80021e6:	2b01      	cmp	r3, #1
 80021e8:	d056      	beq.n	8002298 <HAL_RCC_GetSysClockFreq+0x1c0>
 80021ea:	e099      	b.n	8002320 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80021ec:	4b6f      	ldr	r3, [pc, #444]	; (80023ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f003 0320 	and.w	r3, r3, #32
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d02d      	beq.n	8002254 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80021f8:	4b6c      	ldr	r3, [pc, #432]	; (80023ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	08db      	lsrs	r3, r3, #3
 80021fe:	f003 0303 	and.w	r3, r3, #3
 8002202:	4a6b      	ldr	r2, [pc, #428]	; (80023b0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002204:	fa22 f303 	lsr.w	r3, r2, r3
 8002208:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	ee07 3a90 	vmov	s15, r3
 8002210:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002214:	693b      	ldr	r3, [r7, #16]
 8002216:	ee07 3a90 	vmov	s15, r3
 800221a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800221e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002222:	4b62      	ldr	r3, [pc, #392]	; (80023ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002226:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800222a:	ee07 3a90 	vmov	s15, r3
 800222e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002232:	ed97 6a02 	vldr	s12, [r7, #8]
 8002236:	eddf 5a61 	vldr	s11, [pc, #388]	; 80023bc <HAL_RCC_GetSysClockFreq+0x2e4>
 800223a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800223e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002242:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002246:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800224a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800224e:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8002252:	e087      	b.n	8002364 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002254:	693b      	ldr	r3, [r7, #16]
 8002256:	ee07 3a90 	vmov	s15, r3
 800225a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800225e:	eddf 6a58 	vldr	s13, [pc, #352]	; 80023c0 <HAL_RCC_GetSysClockFreq+0x2e8>
 8002262:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002266:	4b51      	ldr	r3, [pc, #324]	; (80023ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800226a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800226e:	ee07 3a90 	vmov	s15, r3
 8002272:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002276:	ed97 6a02 	vldr	s12, [r7, #8]
 800227a:	eddf 5a50 	vldr	s11, [pc, #320]	; 80023bc <HAL_RCC_GetSysClockFreq+0x2e4>
 800227e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002282:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002286:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800228a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800228e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002292:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002296:	e065      	b.n	8002364 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002298:	693b      	ldr	r3, [r7, #16]
 800229a:	ee07 3a90 	vmov	s15, r3
 800229e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80022a2:	eddf 6a48 	vldr	s13, [pc, #288]	; 80023c4 <HAL_RCC_GetSysClockFreq+0x2ec>
 80022a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80022aa:	4b40      	ldr	r3, [pc, #256]	; (80023ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 80022ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80022b2:	ee07 3a90 	vmov	s15, r3
 80022b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80022ba:	ed97 6a02 	vldr	s12, [r7, #8]
 80022be:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80023bc <HAL_RCC_GetSysClockFreq+0x2e4>
 80022c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80022c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80022ca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80022ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80022d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80022d6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80022da:	e043      	b.n	8002364 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80022dc:	693b      	ldr	r3, [r7, #16]
 80022de:	ee07 3a90 	vmov	s15, r3
 80022e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80022e6:	eddf 6a38 	vldr	s13, [pc, #224]	; 80023c8 <HAL_RCC_GetSysClockFreq+0x2f0>
 80022ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80022ee:	4b2f      	ldr	r3, [pc, #188]	; (80023ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 80022f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80022f6:	ee07 3a90 	vmov	s15, r3
 80022fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80022fe:	ed97 6a02 	vldr	s12, [r7, #8]
 8002302:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80023bc <HAL_RCC_GetSysClockFreq+0x2e4>
 8002306:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800230a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800230e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002312:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002316:	ee67 7a27 	vmul.f32	s15, s14, s15
 800231a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800231e:	e021      	b.n	8002364 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002320:	693b      	ldr	r3, [r7, #16]
 8002322:	ee07 3a90 	vmov	s15, r3
 8002326:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800232a:	eddf 6a26 	vldr	s13, [pc, #152]	; 80023c4 <HAL_RCC_GetSysClockFreq+0x2ec>
 800232e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002332:	4b1e      	ldr	r3, [pc, #120]	; (80023ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002334:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002336:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800233a:	ee07 3a90 	vmov	s15, r3
 800233e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002342:	ed97 6a02 	vldr	s12, [r7, #8]
 8002346:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80023bc <HAL_RCC_GetSysClockFreq+0x2e4>
 800234a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800234e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002352:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002356:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800235a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800235e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002362:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8002364:	4b11      	ldr	r3, [pc, #68]	; (80023ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002366:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002368:	0a5b      	lsrs	r3, r3, #9
 800236a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800236e:	3301      	adds	r3, #1
 8002370:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	ee07 3a90 	vmov	s15, r3
 8002378:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800237c:	edd7 6a07 	vldr	s13, [r7, #28]
 8002380:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002384:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002388:	ee17 3a90 	vmov	r3, s15
 800238c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800238e:	e005      	b.n	800239c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8002390:	2300      	movs	r3, #0
 8002392:	61bb      	str	r3, [r7, #24]
      break;
 8002394:	e002      	b.n	800239c <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8002396:	4b07      	ldr	r3, [pc, #28]	; (80023b4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002398:	61bb      	str	r3, [r7, #24]
      break;
 800239a:	bf00      	nop
  }

  return sysclockfreq;
 800239c:	69bb      	ldr	r3, [r7, #24]
}
 800239e:	4618      	mov	r0, r3
 80023a0:	3724      	adds	r7, #36	; 0x24
 80023a2:	46bd      	mov	sp, r7
 80023a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a8:	4770      	bx	lr
 80023aa:	bf00      	nop
 80023ac:	58024400 	.word	0x58024400
 80023b0:	03d09000 	.word	0x03d09000
 80023b4:	003d0900 	.word	0x003d0900
 80023b8:	017d7840 	.word	0x017d7840
 80023bc:	46000000 	.word	0x46000000
 80023c0:	4c742400 	.word	0x4c742400
 80023c4:	4a742400 	.word	0x4a742400
 80023c8:	4bbebc20 	.word	0x4bbebc20

080023cc <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80023cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80023d0:	b0cc      	sub	sp, #304	; 0x130
 80023d2:	af00      	add	r7, sp, #0
 80023d4:	f8c7 011c 	str.w	r0, [r7, #284]	; 0x11c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80023d8:	2300      	movs	r3, #0
 80023da:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80023de:	2300      	movs	r3, #0
 80023e0:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80023e4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80023e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023ec:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 80023f0:	2500      	movs	r5, #0
 80023f2:	ea54 0305 	orrs.w	r3, r4, r5
 80023f6:	d049      	beq.n	800248c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80023f8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80023fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80023fe:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002402:	d02f      	beq.n	8002464 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8002404:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002408:	d828      	bhi.n	800245c <HAL_RCCEx_PeriphCLKConfig+0x90>
 800240a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800240e:	d01a      	beq.n	8002446 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8002410:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002414:	d822      	bhi.n	800245c <HAL_RCCEx_PeriphCLKConfig+0x90>
 8002416:	2b00      	cmp	r3, #0
 8002418:	d003      	beq.n	8002422 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800241a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800241e:	d007      	beq.n	8002430 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002420:	e01c      	b.n	800245c <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002422:	4bb8      	ldr	r3, [pc, #736]	; (8002704 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002424:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002426:	4ab7      	ldr	r2, [pc, #732]	; (8002704 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002428:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800242c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800242e:	e01a      	b.n	8002466 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002430:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002434:	3308      	adds	r3, #8
 8002436:	2102      	movs	r1, #2
 8002438:	4618      	mov	r0, r3
 800243a:	f001 fa11 	bl	8003860 <RCCEx_PLL2_Config>
 800243e:	4603      	mov	r3, r0
 8002440:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002444:	e00f      	b.n	8002466 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8002446:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800244a:	3328      	adds	r3, #40	; 0x28
 800244c:	2102      	movs	r1, #2
 800244e:	4618      	mov	r0, r3
 8002450:	f001 fab8 	bl	80039c4 <RCCEx_PLL3_Config>
 8002454:	4603      	mov	r3, r0
 8002456:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800245a:	e004      	b.n	8002466 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800245c:	2301      	movs	r3, #1
 800245e:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8002462:	e000      	b.n	8002466 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8002464:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002466:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800246a:	2b00      	cmp	r3, #0
 800246c:	d10a      	bne.n	8002484 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800246e:	4ba5      	ldr	r3, [pc, #660]	; (8002704 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002470:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002472:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8002476:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800247a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800247c:	4aa1      	ldr	r2, [pc, #644]	; (8002704 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800247e:	430b      	orrs	r3, r1
 8002480:	6513      	str	r3, [r2, #80]	; 0x50
 8002482:	e003      	b.n	800248c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002484:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8002488:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800248c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002490:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002494:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8002498:	f04f 0900 	mov.w	r9, #0
 800249c:	ea58 0309 	orrs.w	r3, r8, r9
 80024a0:	d047      	beq.n	8002532 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80024a2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80024a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024a8:	2b04      	cmp	r3, #4
 80024aa:	d82a      	bhi.n	8002502 <HAL_RCCEx_PeriphCLKConfig+0x136>
 80024ac:	a201      	add	r2, pc, #4	; (adr r2, 80024b4 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80024ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024b2:	bf00      	nop
 80024b4:	080024c9 	.word	0x080024c9
 80024b8:	080024d7 	.word	0x080024d7
 80024bc:	080024ed 	.word	0x080024ed
 80024c0:	0800250b 	.word	0x0800250b
 80024c4:	0800250b 	.word	0x0800250b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80024c8:	4b8e      	ldr	r3, [pc, #568]	; (8002704 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80024ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024cc:	4a8d      	ldr	r2, [pc, #564]	; (8002704 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80024ce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80024d2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80024d4:	e01a      	b.n	800250c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80024d6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80024da:	3308      	adds	r3, #8
 80024dc:	2100      	movs	r1, #0
 80024de:	4618      	mov	r0, r3
 80024e0:	f001 f9be 	bl	8003860 <RCCEx_PLL2_Config>
 80024e4:	4603      	mov	r3, r0
 80024e6:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80024ea:	e00f      	b.n	800250c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80024ec:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80024f0:	3328      	adds	r3, #40	; 0x28
 80024f2:	2100      	movs	r1, #0
 80024f4:	4618      	mov	r0, r3
 80024f6:	f001 fa65 	bl	80039c4 <RCCEx_PLL3_Config>
 80024fa:	4603      	mov	r3, r0
 80024fc:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002500:	e004      	b.n	800250c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002502:	2301      	movs	r3, #1
 8002504:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8002508:	e000      	b.n	800250c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800250a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800250c:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8002510:	2b00      	cmp	r3, #0
 8002512:	d10a      	bne.n	800252a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002514:	4b7b      	ldr	r3, [pc, #492]	; (8002704 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002516:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002518:	f023 0107 	bic.w	r1, r3, #7
 800251c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002520:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002522:	4a78      	ldr	r2, [pc, #480]	; (8002704 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002524:	430b      	orrs	r3, r1
 8002526:	6513      	str	r3, [r2, #80]	; 0x50
 8002528:	e003      	b.n	8002532 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800252a:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800252e:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8002532:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002536:	e9d3 2300 	ldrd	r2, r3, [r3]
 800253a:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 800253e:	f04f 0b00 	mov.w	fp, #0
 8002542:	ea5a 030b 	orrs.w	r3, sl, fp
 8002546:	d04c      	beq.n	80025e2 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8002548:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800254c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800254e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002552:	d030      	beq.n	80025b6 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8002554:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002558:	d829      	bhi.n	80025ae <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800255a:	2bc0      	cmp	r3, #192	; 0xc0
 800255c:	d02d      	beq.n	80025ba <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800255e:	2bc0      	cmp	r3, #192	; 0xc0
 8002560:	d825      	bhi.n	80025ae <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8002562:	2b80      	cmp	r3, #128	; 0x80
 8002564:	d018      	beq.n	8002598 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8002566:	2b80      	cmp	r3, #128	; 0x80
 8002568:	d821      	bhi.n	80025ae <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800256a:	2b00      	cmp	r3, #0
 800256c:	d002      	beq.n	8002574 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800256e:	2b40      	cmp	r3, #64	; 0x40
 8002570:	d007      	beq.n	8002582 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8002572:	e01c      	b.n	80025ae <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002574:	4b63      	ldr	r3, [pc, #396]	; (8002704 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002576:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002578:	4a62      	ldr	r2, [pc, #392]	; (8002704 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800257a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800257e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8002580:	e01c      	b.n	80025bc <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002582:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002586:	3308      	adds	r3, #8
 8002588:	2100      	movs	r1, #0
 800258a:	4618      	mov	r0, r3
 800258c:	f001 f968 	bl	8003860 <RCCEx_PLL2_Config>
 8002590:	4603      	mov	r3, r0
 8002592:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8002596:	e011      	b.n	80025bc <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002598:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800259c:	3328      	adds	r3, #40	; 0x28
 800259e:	2100      	movs	r1, #0
 80025a0:	4618      	mov	r0, r3
 80025a2:	f001 fa0f 	bl	80039c4 <RCCEx_PLL3_Config>
 80025a6:	4603      	mov	r3, r0
 80025a8:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80025ac:	e006      	b.n	80025bc <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80025ae:	2301      	movs	r3, #1
 80025b0:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 80025b4:	e002      	b.n	80025bc <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80025b6:	bf00      	nop
 80025b8:	e000      	b.n	80025bc <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80025ba:	bf00      	nop
    }

    if (ret == HAL_OK)
 80025bc:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d10a      	bne.n	80025da <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80025c4:	4b4f      	ldr	r3, [pc, #316]	; (8002704 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80025c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80025c8:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 80025cc:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80025d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80025d2:	4a4c      	ldr	r2, [pc, #304]	; (8002704 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80025d4:	430b      	orrs	r3, r1
 80025d6:	6513      	str	r3, [r2, #80]	; 0x50
 80025d8:	e003      	b.n	80025e2 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80025da:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80025de:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80025e2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80025e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025ea:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 80025ee:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80025f2:	2300      	movs	r3, #0
 80025f4:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80025f8:	e9d7 1244 	ldrd	r1, r2, [r7, #272]	; 0x110
 80025fc:	460b      	mov	r3, r1
 80025fe:	4313      	orrs	r3, r2
 8002600:	d053      	beq.n	80026aa <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8002602:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002606:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800260a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800260e:	d035      	beq.n	800267c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8002610:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002614:	d82e      	bhi.n	8002674 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8002616:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800261a:	d031      	beq.n	8002680 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 800261c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8002620:	d828      	bhi.n	8002674 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8002622:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002626:	d01a      	beq.n	800265e <HAL_RCCEx_PeriphCLKConfig+0x292>
 8002628:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800262c:	d822      	bhi.n	8002674 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800262e:	2b00      	cmp	r3, #0
 8002630:	d003      	beq.n	800263a <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8002632:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002636:	d007      	beq.n	8002648 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8002638:	e01c      	b.n	8002674 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800263a:	4b32      	ldr	r3, [pc, #200]	; (8002704 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800263c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800263e:	4a31      	ldr	r2, [pc, #196]	; (8002704 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002640:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002644:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002646:	e01c      	b.n	8002682 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002648:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800264c:	3308      	adds	r3, #8
 800264e:	2100      	movs	r1, #0
 8002650:	4618      	mov	r0, r3
 8002652:	f001 f905 	bl	8003860 <RCCEx_PLL2_Config>
 8002656:	4603      	mov	r3, r0
 8002658:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800265c:	e011      	b.n	8002682 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800265e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002662:	3328      	adds	r3, #40	; 0x28
 8002664:	2100      	movs	r1, #0
 8002666:	4618      	mov	r0, r3
 8002668:	f001 f9ac 	bl	80039c4 <RCCEx_PLL3_Config>
 800266c:	4603      	mov	r3, r0
 800266e:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002672:	e006      	b.n	8002682 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8002674:	2301      	movs	r3, #1
 8002676:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 800267a:	e002      	b.n	8002682 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800267c:	bf00      	nop
 800267e:	e000      	b.n	8002682 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8002680:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002682:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8002686:	2b00      	cmp	r3, #0
 8002688:	d10b      	bne.n	80026a2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800268a:	4b1e      	ldr	r3, [pc, #120]	; (8002704 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800268c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800268e:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 8002692:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002696:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800269a:	4a1a      	ldr	r2, [pc, #104]	; (8002704 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800269c:	430b      	orrs	r3, r1
 800269e:	6593      	str	r3, [r2, #88]	; 0x58
 80026a0:	e003      	b.n	80026aa <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80026a2:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80026a6:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80026aa:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80026ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026b2:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 80026b6:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80026ba:	2300      	movs	r3, #0
 80026bc:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80026c0:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 80026c4:	460b      	mov	r3, r1
 80026c6:	4313      	orrs	r3, r2
 80026c8:	d056      	beq.n	8002778 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 80026ca:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80026ce:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80026d2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80026d6:	d038      	beq.n	800274a <HAL_RCCEx_PeriphCLKConfig+0x37e>
 80026d8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80026dc:	d831      	bhi.n	8002742 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80026de:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80026e2:	d034      	beq.n	800274e <HAL_RCCEx_PeriphCLKConfig+0x382>
 80026e4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80026e8:	d82b      	bhi.n	8002742 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80026ea:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80026ee:	d01d      	beq.n	800272c <HAL_RCCEx_PeriphCLKConfig+0x360>
 80026f0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80026f4:	d825      	bhi.n	8002742 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d006      	beq.n	8002708 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 80026fa:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80026fe:	d00a      	beq.n	8002716 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8002700:	e01f      	b.n	8002742 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8002702:	bf00      	nop
 8002704:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002708:	4ba2      	ldr	r3, [pc, #648]	; (8002994 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800270a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800270c:	4aa1      	ldr	r2, [pc, #644]	; (8002994 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800270e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002712:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002714:	e01c      	b.n	8002750 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002716:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800271a:	3308      	adds	r3, #8
 800271c:	2100      	movs	r1, #0
 800271e:	4618      	mov	r0, r3
 8002720:	f001 f89e 	bl	8003860 <RCCEx_PLL2_Config>
 8002724:	4603      	mov	r3, r0
 8002726:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800272a:	e011      	b.n	8002750 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800272c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002730:	3328      	adds	r3, #40	; 0x28
 8002732:	2100      	movs	r1, #0
 8002734:	4618      	mov	r0, r3
 8002736:	f001 f945 	bl	80039c4 <RCCEx_PLL3_Config>
 800273a:	4603      	mov	r3, r0
 800273c:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002740:	e006      	b.n	8002750 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8002742:	2301      	movs	r3, #1
 8002744:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8002748:	e002      	b.n	8002750 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800274a:	bf00      	nop
 800274c:	e000      	b.n	8002750 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800274e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002750:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8002754:	2b00      	cmp	r3, #0
 8002756:	d10b      	bne.n	8002770 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8002758:	4b8e      	ldr	r3, [pc, #568]	; (8002994 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800275a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800275c:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8002760:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002764:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002768:	4a8a      	ldr	r2, [pc, #552]	; (8002994 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800276a:	430b      	orrs	r3, r1
 800276c:	6593      	str	r3, [r2, #88]	; 0x58
 800276e:	e003      	b.n	8002778 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002770:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8002774:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8002778:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800277c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002780:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8002784:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8002788:	2300      	movs	r3, #0
 800278a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800278e:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8002792:	460b      	mov	r3, r1
 8002794:	4313      	orrs	r3, r2
 8002796:	d03a      	beq.n	800280e <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8002798:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800279c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800279e:	2b30      	cmp	r3, #48	; 0x30
 80027a0:	d01f      	beq.n	80027e2 <HAL_RCCEx_PeriphCLKConfig+0x416>
 80027a2:	2b30      	cmp	r3, #48	; 0x30
 80027a4:	d819      	bhi.n	80027da <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80027a6:	2b20      	cmp	r3, #32
 80027a8:	d00c      	beq.n	80027c4 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 80027aa:	2b20      	cmp	r3, #32
 80027ac:	d815      	bhi.n	80027da <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d019      	beq.n	80027e6 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 80027b2:	2b10      	cmp	r3, #16
 80027b4:	d111      	bne.n	80027da <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80027b6:	4b77      	ldr	r3, [pc, #476]	; (8002994 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80027b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027ba:	4a76      	ldr	r2, [pc, #472]	; (8002994 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80027bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80027c0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80027c2:	e011      	b.n	80027e8 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80027c4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80027c8:	3308      	adds	r3, #8
 80027ca:	2102      	movs	r1, #2
 80027cc:	4618      	mov	r0, r3
 80027ce:	f001 f847 	bl	8003860 <RCCEx_PLL2_Config>
 80027d2:	4603      	mov	r3, r0
 80027d4:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80027d8:	e006      	b.n	80027e8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80027da:	2301      	movs	r3, #1
 80027dc:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 80027e0:	e002      	b.n	80027e8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80027e2:	bf00      	nop
 80027e4:	e000      	b.n	80027e8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80027e6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80027e8:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d10a      	bne.n	8002806 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80027f0:	4b68      	ldr	r3, [pc, #416]	; (8002994 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80027f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027f4:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 80027f8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80027fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027fe:	4a65      	ldr	r2, [pc, #404]	; (8002994 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002800:	430b      	orrs	r3, r1
 8002802:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002804:	e003      	b.n	800280e <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002806:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800280a:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800280e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002812:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002816:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 800281a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800281e:	2300      	movs	r3, #0
 8002820:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8002824:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8002828:	460b      	mov	r3, r1
 800282a:	4313      	orrs	r3, r2
 800282c:	d051      	beq.n	80028d2 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800282e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002832:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002834:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002838:	d035      	beq.n	80028a6 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800283a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800283e:	d82e      	bhi.n	800289e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8002840:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002844:	d031      	beq.n	80028aa <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8002846:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800284a:	d828      	bhi.n	800289e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800284c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002850:	d01a      	beq.n	8002888 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8002852:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002856:	d822      	bhi.n	800289e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8002858:	2b00      	cmp	r3, #0
 800285a:	d003      	beq.n	8002864 <HAL_RCCEx_PeriphCLKConfig+0x498>
 800285c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002860:	d007      	beq.n	8002872 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8002862:	e01c      	b.n	800289e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002864:	4b4b      	ldr	r3, [pc, #300]	; (8002994 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002866:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002868:	4a4a      	ldr	r2, [pc, #296]	; (8002994 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800286a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800286e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8002870:	e01c      	b.n	80028ac <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002872:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002876:	3308      	adds	r3, #8
 8002878:	2100      	movs	r1, #0
 800287a:	4618      	mov	r0, r3
 800287c:	f000 fff0 	bl	8003860 <RCCEx_PLL2_Config>
 8002880:	4603      	mov	r3, r0
 8002882:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8002886:	e011      	b.n	80028ac <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002888:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800288c:	3328      	adds	r3, #40	; 0x28
 800288e:	2100      	movs	r1, #0
 8002890:	4618      	mov	r0, r3
 8002892:	f001 f897 	bl	80039c4 <RCCEx_PLL3_Config>
 8002896:	4603      	mov	r3, r0
 8002898:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800289c:	e006      	b.n	80028ac <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800289e:	2301      	movs	r3, #1
 80028a0:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 80028a4:	e002      	b.n	80028ac <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80028a6:	bf00      	nop
 80028a8:	e000      	b.n	80028ac <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80028aa:	bf00      	nop
    }

    if (ret == HAL_OK)
 80028ac:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d10a      	bne.n	80028ca <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80028b4:	4b37      	ldr	r3, [pc, #220]	; (8002994 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80028b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80028b8:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 80028bc:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80028c0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80028c2:	4a34      	ldr	r2, [pc, #208]	; (8002994 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80028c4:	430b      	orrs	r3, r1
 80028c6:	6513      	str	r3, [r2, #80]	; 0x50
 80028c8:	e003      	b.n	80028d2 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80028ca:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80028ce:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80028d2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80028d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028da:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 80028de:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80028e2:	2300      	movs	r3, #0
 80028e4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80028e8:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 80028ec:	460b      	mov	r3, r1
 80028ee:	4313      	orrs	r3, r2
 80028f0:	d056      	beq.n	80029a0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80028f2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80028f6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80028f8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80028fc:	d033      	beq.n	8002966 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 80028fe:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002902:	d82c      	bhi.n	800295e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8002904:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002908:	d02f      	beq.n	800296a <HAL_RCCEx_PeriphCLKConfig+0x59e>
 800290a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800290e:	d826      	bhi.n	800295e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8002910:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002914:	d02b      	beq.n	800296e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8002916:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800291a:	d820      	bhi.n	800295e <HAL_RCCEx_PeriphCLKConfig+0x592>
 800291c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002920:	d012      	beq.n	8002948 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8002922:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002926:	d81a      	bhi.n	800295e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8002928:	2b00      	cmp	r3, #0
 800292a:	d022      	beq.n	8002972 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 800292c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002930:	d115      	bne.n	800295e <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002932:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002936:	3308      	adds	r3, #8
 8002938:	2101      	movs	r1, #1
 800293a:	4618      	mov	r0, r3
 800293c:	f000 ff90 	bl	8003860 <RCCEx_PLL2_Config>
 8002940:	4603      	mov	r3, r0
 8002942:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8002946:	e015      	b.n	8002974 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002948:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800294c:	3328      	adds	r3, #40	; 0x28
 800294e:	2101      	movs	r1, #1
 8002950:	4618      	mov	r0, r3
 8002952:	f001 f837 	bl	80039c4 <RCCEx_PLL3_Config>
 8002956:	4603      	mov	r3, r0
 8002958:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800295c:	e00a      	b.n	8002974 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800295e:	2301      	movs	r3, #1
 8002960:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8002964:	e006      	b.n	8002974 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8002966:	bf00      	nop
 8002968:	e004      	b.n	8002974 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800296a:	bf00      	nop
 800296c:	e002      	b.n	8002974 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800296e:	bf00      	nop
 8002970:	e000      	b.n	8002974 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8002972:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002974:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8002978:	2b00      	cmp	r3, #0
 800297a:	d10d      	bne.n	8002998 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800297c:	4b05      	ldr	r3, [pc, #20]	; (8002994 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800297e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002980:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8002984:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002988:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800298a:	4a02      	ldr	r2, [pc, #8]	; (8002994 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800298c:	430b      	orrs	r3, r1
 800298e:	6513      	str	r3, [r2, #80]	; 0x50
 8002990:	e006      	b.n	80029a0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8002992:	bf00      	nop
 8002994:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002998:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800299c:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80029a0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80029a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029a8:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 80029ac:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80029b0:	2300      	movs	r3, #0
 80029b2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80029b6:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 80029ba:	460b      	mov	r3, r1
 80029bc:	4313      	orrs	r3, r2
 80029be:	d055      	beq.n	8002a6c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80029c0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80029c4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80029c8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80029cc:	d033      	beq.n	8002a36 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 80029ce:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80029d2:	d82c      	bhi.n	8002a2e <HAL_RCCEx_PeriphCLKConfig+0x662>
 80029d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029d8:	d02f      	beq.n	8002a3a <HAL_RCCEx_PeriphCLKConfig+0x66e>
 80029da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029de:	d826      	bhi.n	8002a2e <HAL_RCCEx_PeriphCLKConfig+0x662>
 80029e0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80029e4:	d02b      	beq.n	8002a3e <HAL_RCCEx_PeriphCLKConfig+0x672>
 80029e6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80029ea:	d820      	bhi.n	8002a2e <HAL_RCCEx_PeriphCLKConfig+0x662>
 80029ec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80029f0:	d012      	beq.n	8002a18 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 80029f2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80029f6:	d81a      	bhi.n	8002a2e <HAL_RCCEx_PeriphCLKConfig+0x662>
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d022      	beq.n	8002a42 <HAL_RCCEx_PeriphCLKConfig+0x676>
 80029fc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002a00:	d115      	bne.n	8002a2e <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002a02:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002a06:	3308      	adds	r3, #8
 8002a08:	2101      	movs	r1, #1
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	f000 ff28 	bl	8003860 <RCCEx_PLL2_Config>
 8002a10:	4603      	mov	r3, r0
 8002a12:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8002a16:	e015      	b.n	8002a44 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002a18:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002a1c:	3328      	adds	r3, #40	; 0x28
 8002a1e:	2101      	movs	r1, #1
 8002a20:	4618      	mov	r0, r3
 8002a22:	f000 ffcf 	bl	80039c4 <RCCEx_PLL3_Config>
 8002a26:	4603      	mov	r3, r0
 8002a28:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8002a2c:	e00a      	b.n	8002a44 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8002a2e:	2301      	movs	r3, #1
 8002a30:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8002a34:	e006      	b.n	8002a44 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8002a36:	bf00      	nop
 8002a38:	e004      	b.n	8002a44 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8002a3a:	bf00      	nop
 8002a3c:	e002      	b.n	8002a44 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8002a3e:	bf00      	nop
 8002a40:	e000      	b.n	8002a44 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8002a42:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002a44:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d10b      	bne.n	8002a64 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8002a4c:	4bb6      	ldr	r3, [pc, #728]	; (8002d28 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8002a4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a50:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8002a54:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002a58:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8002a5c:	4ab2      	ldr	r2, [pc, #712]	; (8002d28 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8002a5e:	430b      	orrs	r3, r1
 8002a60:	6593      	str	r3, [r2, #88]	; 0x58
 8002a62:	e003      	b.n	8002a6c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a64:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8002a68:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

#if defined(DSI)
  /*---------------------------- DSI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 8002a6c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002a70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a74:	f002 6380 	and.w	r3, r2, #67108864	; 0x4000000
 8002a78:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002a7c:	2300      	movs	r3, #0
 8002a7e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002a82:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8002a86:	460b      	mov	r3, r1
 8002a88:	4313      	orrs	r3, r2
 8002a8a:	d02a      	beq.n	8002ae2 <HAL_RCCEx_PeriphCLKConfig+0x716>
  {
    switch (PeriphClkInit->DsiClockSelection)
 8002a8c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002a90:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d011      	beq.n	8002aba <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 8002a96:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002a9a:	d10a      	bne.n	8002ab2 <HAL_RCCEx_PeriphCLKConfig+0x6e6>
    {

      case RCC_DSICLKSOURCE_PLL2: /* PLL2 is used as clock source for DSI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002a9c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002aa0:	3308      	adds	r3, #8
 8002aa2:	2101      	movs	r1, #1
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	f000 fedb 	bl	8003860 <RCCEx_PLL2_Config>
 8002aaa:	4603      	mov	r3, r0
 8002aac:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* DSI clock source configuration done later after clock selection check */
        break;
 8002ab0:	e004      	b.n	8002abc <HAL_RCCEx_PeriphCLKConfig+0x6f0>
        /* PHY is used as clock source for DSI*/
        /* DSI clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002ab2:	2301      	movs	r3, #1
 8002ab4:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8002ab8:	e000      	b.n	8002abc <HAL_RCCEx_PeriphCLKConfig+0x6f0>
        break;
 8002aba:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002abc:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d10a      	bne.n	8002ada <HAL_RCCEx_PeriphCLKConfig+0x70e>
    {
      /* Set the source of DSI clock*/
      __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 8002ac4:	4b98      	ldr	r3, [pc, #608]	; (8002d28 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8002ac6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ac8:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 8002acc:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002ad0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ad2:	4a95      	ldr	r2, [pc, #596]	; (8002d28 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8002ad4:	430b      	orrs	r3, r1
 8002ad6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002ad8:	e003      	b.n	8002ae2 <HAL_RCCEx_PeriphCLKConfig+0x716>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ada:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8002ade:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002ae2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002ae6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002aea:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8002aee:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002af2:	2300      	movs	r3, #0
 8002af4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8002af8:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002afc:	460b      	mov	r3, r1
 8002afe:	4313      	orrs	r3, r2
 8002b00:	d037      	beq.n	8002b72 <HAL_RCCEx_PeriphCLKConfig+0x7a6>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8002b02:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002b06:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b08:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002b0c:	d00e      	beq.n	8002b2c <HAL_RCCEx_PeriphCLKConfig+0x760>
 8002b0e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002b12:	d816      	bhi.n	8002b42 <HAL_RCCEx_PeriphCLKConfig+0x776>
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d018      	beq.n	8002b4a <HAL_RCCEx_PeriphCLKConfig+0x77e>
 8002b18:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002b1c:	d111      	bne.n	8002b42 <HAL_RCCEx_PeriphCLKConfig+0x776>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002b1e:	4b82      	ldr	r3, [pc, #520]	; (8002d28 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8002b20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b22:	4a81      	ldr	r2, [pc, #516]	; (8002d28 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8002b24:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b28:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8002b2a:	e00f      	b.n	8002b4c <HAL_RCCEx_PeriphCLKConfig+0x780>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002b2c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002b30:	3308      	adds	r3, #8
 8002b32:	2101      	movs	r1, #1
 8002b34:	4618      	mov	r0, r3
 8002b36:	f000 fe93 	bl	8003860 <RCCEx_PLL2_Config>
 8002b3a:	4603      	mov	r3, r0
 8002b3c:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8002b40:	e004      	b.n	8002b4c <HAL_RCCEx_PeriphCLKConfig+0x780>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002b42:	2301      	movs	r3, #1
 8002b44:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8002b48:	e000      	b.n	8002b4c <HAL_RCCEx_PeriphCLKConfig+0x780>
        break;
 8002b4a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002b4c:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d10a      	bne.n	8002b6a <HAL_RCCEx_PeriphCLKConfig+0x79e>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002b54:	4b74      	ldr	r3, [pc, #464]	; (8002d28 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8002b56:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b58:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8002b5c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002b60:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b62:	4a71      	ldr	r2, [pc, #452]	; (8002d28 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8002b64:	430b      	orrs	r3, r1
 8002b66:	6513      	str	r3, [r2, #80]	; 0x50
 8002b68:	e003      	b.n	8002b72 <HAL_RCCEx_PeriphCLKConfig+0x7a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b6a:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8002b6e:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8002b72:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002b76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b7a:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8002b7e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002b82:	2300      	movs	r3, #0
 8002b84:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8002b88:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8002b8c:	460b      	mov	r3, r1
 8002b8e:	4313      	orrs	r3, r2
 8002b90:	d03a      	beq.n	8002c08 <HAL_RCCEx_PeriphCLKConfig+0x83c>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8002b92:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002b96:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b98:	2b03      	cmp	r3, #3
 8002b9a:	d81d      	bhi.n	8002bd8 <HAL_RCCEx_PeriphCLKConfig+0x80c>
 8002b9c:	a201      	add	r2, pc, #4	; (adr r2, 8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8002b9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ba2:	bf00      	nop
 8002ba4:	08002be1 	.word	0x08002be1
 8002ba8:	08002bb5 	.word	0x08002bb5
 8002bac:	08002bc3 	.word	0x08002bc3
 8002bb0:	08002be1 	.word	0x08002be1
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002bb4:	4b5c      	ldr	r3, [pc, #368]	; (8002d28 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8002bb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bb8:	4a5b      	ldr	r2, [pc, #364]	; (8002d28 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8002bba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002bbe:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8002bc0:	e00f      	b.n	8002be2 <HAL_RCCEx_PeriphCLKConfig+0x816>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002bc2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002bc6:	3308      	adds	r3, #8
 8002bc8:	2102      	movs	r1, #2
 8002bca:	4618      	mov	r0, r3
 8002bcc:	f000 fe48 	bl	8003860 <RCCEx_PLL2_Config>
 8002bd0:	4603      	mov	r3, r0
 8002bd2:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* FMC clock source configuration done later after clock selection check */
        break;
 8002bd6:	e004      	b.n	8002be2 <HAL_RCCEx_PeriphCLKConfig+0x816>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8002bd8:	2301      	movs	r3, #1
 8002bda:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8002bde:	e000      	b.n	8002be2 <HAL_RCCEx_PeriphCLKConfig+0x816>
        break;
 8002be0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002be2:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d10a      	bne.n	8002c00 <HAL_RCCEx_PeriphCLKConfig+0x834>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8002bea:	4b4f      	ldr	r3, [pc, #316]	; (8002d28 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8002bec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bee:	f023 0103 	bic.w	r1, r3, #3
 8002bf2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002bf6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002bf8:	4a4b      	ldr	r2, [pc, #300]	; (8002d28 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8002bfa:	430b      	orrs	r3, r1
 8002bfc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002bfe:	e003      	b.n	8002c08 <HAL_RCCEx_PeriphCLKConfig+0x83c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c00:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8002c04:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002c08:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002c0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c10:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8002c14:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002c18:	2300      	movs	r3, #0
 8002c1a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002c1e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8002c22:	460b      	mov	r3, r1
 8002c24:	4313      	orrs	r3, r2
 8002c26:	f000 80a0 	beq.w	8002d6a <HAL_RCCEx_PeriphCLKConfig+0x99e>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002c2a:	4b40      	ldr	r3, [pc, #256]	; (8002d2c <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	4a3f      	ldr	r2, [pc, #252]	; (8002d2c <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8002c30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c34:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002c36:	f7fe f8e1 	bl	8000dfc <HAL_GetTick>
 8002c3a:	f8c7 0128 	str.w	r0, [r7, #296]	; 0x128

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002c3e:	e00b      	b.n	8002c58 <HAL_RCCEx_PeriphCLKConfig+0x88c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c40:	f7fe f8dc 	bl	8000dfc <HAL_GetTick>
 8002c44:	4602      	mov	r2, r0
 8002c46:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8002c4a:	1ad3      	subs	r3, r2, r3
 8002c4c:	2b64      	cmp	r3, #100	; 0x64
 8002c4e:	d903      	bls.n	8002c58 <HAL_RCCEx_PeriphCLKConfig+0x88c>
      {
        ret = HAL_TIMEOUT;
 8002c50:	2303      	movs	r3, #3
 8002c52:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8002c56:	e005      	b.n	8002c64 <HAL_RCCEx_PeriphCLKConfig+0x898>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002c58:	4b34      	ldr	r3, [pc, #208]	; (8002d2c <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d0ed      	beq.n	8002c40 <HAL_RCCEx_PeriphCLKConfig+0x874>
      }
    }

    if (ret == HAL_OK)
 8002c64:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d17a      	bne.n	8002d62 <HAL_RCCEx_PeriphCLKConfig+0x996>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8002c6c:	4b2e      	ldr	r3, [pc, #184]	; (8002d28 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8002c6e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002c70:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002c74:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8002c78:	4053      	eors	r3, r2
 8002c7a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d015      	beq.n	8002cae <HAL_RCCEx_PeriphCLKConfig+0x8e2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002c82:	4b29      	ldr	r3, [pc, #164]	; (8002d28 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8002c84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c86:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c8a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002c8e:	4b26      	ldr	r3, [pc, #152]	; (8002d28 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8002c90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c92:	4a25      	ldr	r2, [pc, #148]	; (8002d28 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8002c94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c98:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002c9a:	4b23      	ldr	r3, [pc, #140]	; (8002d28 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8002c9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c9e:	4a22      	ldr	r2, [pc, #136]	; (8002d28 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8002ca0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ca4:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8002ca6:	4a20      	ldr	r2, [pc, #128]	; (8002d28 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8002ca8:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8002cac:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8002cae:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002cb2:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8002cb6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002cba:	d118      	bne.n	8002cee <HAL_RCCEx_PeriphCLKConfig+0x922>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cbc:	f7fe f89e 	bl	8000dfc <HAL_GetTick>
 8002cc0:	f8c7 0128 	str.w	r0, [r7, #296]	; 0x128

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002cc4:	e00d      	b.n	8002ce2 <HAL_RCCEx_PeriphCLKConfig+0x916>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002cc6:	f7fe f899 	bl	8000dfc <HAL_GetTick>
 8002cca:	4602      	mov	r2, r0
 8002ccc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8002cd0:	1ad2      	subs	r2, r2, r3
 8002cd2:	f241 3388 	movw	r3, #5000	; 0x1388
 8002cd6:	429a      	cmp	r2, r3
 8002cd8:	d903      	bls.n	8002ce2 <HAL_RCCEx_PeriphCLKConfig+0x916>
          {
            ret = HAL_TIMEOUT;
 8002cda:	2303      	movs	r3, #3
 8002cdc:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
            break;
 8002ce0:	e005      	b.n	8002cee <HAL_RCCEx_PeriphCLKConfig+0x922>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002ce2:	4b11      	ldr	r3, [pc, #68]	; (8002d28 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8002ce4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ce6:	f003 0302 	and.w	r3, r3, #2
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d0eb      	beq.n	8002cc6 <HAL_RCCEx_PeriphCLKConfig+0x8fa>
          }
        }
      }

      if (ret == HAL_OK)
 8002cee:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d130      	bne.n	8002d58 <HAL_RCCEx_PeriphCLKConfig+0x98c>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002cf6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002cfa:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8002cfe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d02:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002d06:	d115      	bne.n	8002d34 <HAL_RCCEx_PeriphCLKConfig+0x968>
 8002d08:	4b07      	ldr	r3, [pc, #28]	; (8002d28 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8002d0a:	691b      	ldr	r3, [r3, #16]
 8002d0c:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8002d10:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002d14:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8002d18:	091a      	lsrs	r2, r3, #4
 8002d1a:	4b05      	ldr	r3, [pc, #20]	; (8002d30 <HAL_RCCEx_PeriphCLKConfig+0x964>)
 8002d1c:	4013      	ands	r3, r2
 8002d1e:	4a02      	ldr	r2, [pc, #8]	; (8002d28 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8002d20:	430b      	orrs	r3, r1
 8002d22:	6113      	str	r3, [r2, #16]
 8002d24:	e00c      	b.n	8002d40 <HAL_RCCEx_PeriphCLKConfig+0x974>
 8002d26:	bf00      	nop
 8002d28:	58024400 	.word	0x58024400
 8002d2c:	58024800 	.word	0x58024800
 8002d30:	00ffffcf 	.word	0x00ffffcf
 8002d34:	4bd4      	ldr	r3, [pc, #848]	; (8003088 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8002d36:	691b      	ldr	r3, [r3, #16]
 8002d38:	4ad3      	ldr	r2, [pc, #844]	; (8003088 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8002d3a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8002d3e:	6113      	str	r3, [r2, #16]
 8002d40:	4bd1      	ldr	r3, [pc, #836]	; (8003088 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8002d42:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8002d44:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002d48:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8002d4c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d50:	4acd      	ldr	r2, [pc, #820]	; (8003088 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8002d52:	430b      	orrs	r3, r1
 8002d54:	6713      	str	r3, [r2, #112]	; 0x70
 8002d56:	e008      	b.n	8002d6a <HAL_RCCEx_PeriphCLKConfig+0x99e>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002d58:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8002d5c:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
 8002d60:	e003      	b.n	8002d6a <HAL_RCCEx_PeriphCLKConfig+0x99e>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d62:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8002d66:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8002d6a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002d6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d72:	f002 0301 	and.w	r3, r2, #1
 8002d76:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002d80:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002d84:	460b      	mov	r3, r1
 8002d86:	4313      	orrs	r3, r2
 8002d88:	f000 808b 	beq.w	8002ea2 <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8002d8c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002d90:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002d94:	2b28      	cmp	r3, #40	; 0x28
 8002d96:	d86b      	bhi.n	8002e70 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 8002d98:	a201      	add	r2, pc, #4	; (adr r2, 8002da0 <HAL_RCCEx_PeriphCLKConfig+0x9d4>)
 8002d9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d9e:	bf00      	nop
 8002da0:	08002e79 	.word	0x08002e79
 8002da4:	08002e71 	.word	0x08002e71
 8002da8:	08002e71 	.word	0x08002e71
 8002dac:	08002e71 	.word	0x08002e71
 8002db0:	08002e71 	.word	0x08002e71
 8002db4:	08002e71 	.word	0x08002e71
 8002db8:	08002e71 	.word	0x08002e71
 8002dbc:	08002e71 	.word	0x08002e71
 8002dc0:	08002e45 	.word	0x08002e45
 8002dc4:	08002e71 	.word	0x08002e71
 8002dc8:	08002e71 	.word	0x08002e71
 8002dcc:	08002e71 	.word	0x08002e71
 8002dd0:	08002e71 	.word	0x08002e71
 8002dd4:	08002e71 	.word	0x08002e71
 8002dd8:	08002e71 	.word	0x08002e71
 8002ddc:	08002e71 	.word	0x08002e71
 8002de0:	08002e5b 	.word	0x08002e5b
 8002de4:	08002e71 	.word	0x08002e71
 8002de8:	08002e71 	.word	0x08002e71
 8002dec:	08002e71 	.word	0x08002e71
 8002df0:	08002e71 	.word	0x08002e71
 8002df4:	08002e71 	.word	0x08002e71
 8002df8:	08002e71 	.word	0x08002e71
 8002dfc:	08002e71 	.word	0x08002e71
 8002e00:	08002e79 	.word	0x08002e79
 8002e04:	08002e71 	.word	0x08002e71
 8002e08:	08002e71 	.word	0x08002e71
 8002e0c:	08002e71 	.word	0x08002e71
 8002e10:	08002e71 	.word	0x08002e71
 8002e14:	08002e71 	.word	0x08002e71
 8002e18:	08002e71 	.word	0x08002e71
 8002e1c:	08002e71 	.word	0x08002e71
 8002e20:	08002e79 	.word	0x08002e79
 8002e24:	08002e71 	.word	0x08002e71
 8002e28:	08002e71 	.word	0x08002e71
 8002e2c:	08002e71 	.word	0x08002e71
 8002e30:	08002e71 	.word	0x08002e71
 8002e34:	08002e71 	.word	0x08002e71
 8002e38:	08002e71 	.word	0x08002e71
 8002e3c:	08002e71 	.word	0x08002e71
 8002e40:	08002e79 	.word	0x08002e79
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002e44:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002e48:	3308      	adds	r3, #8
 8002e4a:	2101      	movs	r1, #1
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	f000 fd07 	bl	8003860 <RCCEx_PLL2_Config>
 8002e52:	4603      	mov	r3, r0
 8002e54:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8002e58:	e00f      	b.n	8002e7a <HAL_RCCEx_PeriphCLKConfig+0xaae>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002e5a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002e5e:	3328      	adds	r3, #40	; 0x28
 8002e60:	2101      	movs	r1, #1
 8002e62:	4618      	mov	r0, r3
 8002e64:	f000 fdae 	bl	80039c4 <RCCEx_PLL3_Config>
 8002e68:	4603      	mov	r3, r0
 8002e6a:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8002e6e:	e004      	b.n	8002e7a <HAL_RCCEx_PeriphCLKConfig+0xaae>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002e70:	2301      	movs	r3, #1
 8002e72:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8002e76:	e000      	b.n	8002e7a <HAL_RCCEx_PeriphCLKConfig+0xaae>
        break;
 8002e78:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002e7a:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d10b      	bne.n	8002e9a <HAL_RCCEx_PeriphCLKConfig+0xace>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8002e82:	4b81      	ldr	r3, [pc, #516]	; (8003088 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8002e84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e86:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8002e8a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002e8e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002e92:	4a7d      	ldr	r2, [pc, #500]	; (8003088 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8002e94:	430b      	orrs	r3, r1
 8002e96:	6553      	str	r3, [r2, #84]	; 0x54
 8002e98:	e003      	b.n	8002ea2 <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e9a:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8002e9e:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8002ea2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002ea6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002eaa:	f002 0302 	and.w	r3, r2, #2
 8002eae:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002eb2:	2300      	movs	r3, #0
 8002eb4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8002eb8:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8002ebc:	460b      	mov	r3, r1
 8002ebe:	4313      	orrs	r3, r2
 8002ec0:	d042      	beq.n	8002f48 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8002ec2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002ec6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002ec8:	2b05      	cmp	r3, #5
 8002eca:	d825      	bhi.n	8002f18 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
 8002ecc:	a201      	add	r2, pc, #4	; (adr r2, 8002ed4 <HAL_RCCEx_PeriphCLKConfig+0xb08>)
 8002ece:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ed2:	bf00      	nop
 8002ed4:	08002f21 	.word	0x08002f21
 8002ed8:	08002eed 	.word	0x08002eed
 8002edc:	08002f03 	.word	0x08002f03
 8002ee0:	08002f21 	.word	0x08002f21
 8002ee4:	08002f21 	.word	0x08002f21
 8002ee8:	08002f21 	.word	0x08002f21
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002eec:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002ef0:	3308      	adds	r3, #8
 8002ef2:	2101      	movs	r1, #1
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	f000 fcb3 	bl	8003860 <RCCEx_PLL2_Config>
 8002efa:	4603      	mov	r3, r0
 8002efc:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8002f00:	e00f      	b.n	8002f22 <HAL_RCCEx_PeriphCLKConfig+0xb56>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002f02:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002f06:	3328      	adds	r3, #40	; 0x28
 8002f08:	2101      	movs	r1, #1
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	f000 fd5a 	bl	80039c4 <RCCEx_PLL3_Config>
 8002f10:	4603      	mov	r3, r0
 8002f12:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8002f16:	e004      	b.n	8002f22 <HAL_RCCEx_PeriphCLKConfig+0xb56>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002f18:	2301      	movs	r3, #1
 8002f1a:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8002f1e:	e000      	b.n	8002f22 <HAL_RCCEx_PeriphCLKConfig+0xb56>
        break;
 8002f20:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002f22:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d10a      	bne.n	8002f40 <HAL_RCCEx_PeriphCLKConfig+0xb74>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8002f2a:	4b57      	ldr	r3, [pc, #348]	; (8003088 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8002f2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f2e:	f023 0107 	bic.w	r1, r3, #7
 8002f32:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002f36:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002f38:	4a53      	ldr	r2, [pc, #332]	; (8003088 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8002f3a:	430b      	orrs	r3, r1
 8002f3c:	6553      	str	r3, [r2, #84]	; 0x54
 8002f3e:	e003      	b.n	8002f48 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f40:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8002f44:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002f48:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002f4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f50:	f002 0304 	and.w	r3, r2, #4
 8002f54:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002f58:	2300      	movs	r3, #0
 8002f5a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002f5e:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8002f62:	460b      	mov	r3, r1
 8002f64:	4313      	orrs	r3, r2
 8002f66:	d044      	beq.n	8002ff2 <HAL_RCCEx_PeriphCLKConfig+0xc26>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8002f68:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002f6c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002f70:	2b05      	cmp	r3, #5
 8002f72:	d825      	bhi.n	8002fc0 <HAL_RCCEx_PeriphCLKConfig+0xbf4>
 8002f74:	a201      	add	r2, pc, #4	; (adr r2, 8002f7c <HAL_RCCEx_PeriphCLKConfig+0xbb0>)
 8002f76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f7a:	bf00      	nop
 8002f7c:	08002fc9 	.word	0x08002fc9
 8002f80:	08002f95 	.word	0x08002f95
 8002f84:	08002fab 	.word	0x08002fab
 8002f88:	08002fc9 	.word	0x08002fc9
 8002f8c:	08002fc9 	.word	0x08002fc9
 8002f90:	08002fc9 	.word	0x08002fc9
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002f94:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002f98:	3308      	adds	r3, #8
 8002f9a:	2101      	movs	r1, #1
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	f000 fc5f 	bl	8003860 <RCCEx_PLL2_Config>
 8002fa2:	4603      	mov	r3, r0
 8002fa4:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8002fa8:	e00f      	b.n	8002fca <HAL_RCCEx_PeriphCLKConfig+0xbfe>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002faa:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002fae:	3328      	adds	r3, #40	; 0x28
 8002fb0:	2101      	movs	r1, #1
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	f000 fd06 	bl	80039c4 <RCCEx_PLL3_Config>
 8002fb8:	4603      	mov	r3, r0
 8002fba:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8002fbe:	e004      	b.n	8002fca <HAL_RCCEx_PeriphCLKConfig+0xbfe>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002fc0:	2301      	movs	r3, #1
 8002fc2:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8002fc6:	e000      	b.n	8002fca <HAL_RCCEx_PeriphCLKConfig+0xbfe>
        break;
 8002fc8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002fca:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d10b      	bne.n	8002fea <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002fd2:	4b2d      	ldr	r3, [pc, #180]	; (8003088 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8002fd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fd6:	f023 0107 	bic.w	r1, r3, #7
 8002fda:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002fde:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002fe2:	4a29      	ldr	r2, [pc, #164]	; (8003088 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8002fe4:	430b      	orrs	r3, r1
 8002fe6:	6593      	str	r3, [r2, #88]	; 0x58
 8002fe8:	e003      	b.n	8002ff2 <HAL_RCCEx_PeriphCLKConfig+0xc26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002fea:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8002fee:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002ff2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002ff6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ffa:	f002 0320 	and.w	r3, r2, #32
 8002ffe:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003002:	2300      	movs	r3, #0
 8003004:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003008:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800300c:	460b      	mov	r3, r1
 800300e:	4313      	orrs	r3, r2
 8003010:	d057      	beq.n	80030c2 <HAL_RCCEx_PeriphCLKConfig+0xcf6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8003012:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003016:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800301a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800301e:	d035      	beq.n	800308c <HAL_RCCEx_PeriphCLKConfig+0xcc0>
 8003020:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003024:	d82c      	bhi.n	8003080 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 8003026:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800302a:	d031      	beq.n	8003090 <HAL_RCCEx_PeriphCLKConfig+0xcc4>
 800302c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003030:	d826      	bhi.n	8003080 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 8003032:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003036:	d02d      	beq.n	8003094 <HAL_RCCEx_PeriphCLKConfig+0xcc8>
 8003038:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800303c:	d820      	bhi.n	8003080 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 800303e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003042:	d012      	beq.n	800306a <HAL_RCCEx_PeriphCLKConfig+0xc9e>
 8003044:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003048:	d81a      	bhi.n	8003080 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 800304a:	2b00      	cmp	r3, #0
 800304c:	d024      	beq.n	8003098 <HAL_RCCEx_PeriphCLKConfig+0xccc>
 800304e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003052:	d115      	bne.n	8003080 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003054:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003058:	3308      	adds	r3, #8
 800305a:	2100      	movs	r1, #0
 800305c:	4618      	mov	r0, r3
 800305e:	f000 fbff 	bl	8003860 <RCCEx_PLL2_Config>
 8003062:	4603      	mov	r3, r0
 8003064:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003068:	e017      	b.n	800309a <HAL_RCCEx_PeriphCLKConfig+0xcce>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800306a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800306e:	3328      	adds	r3, #40	; 0x28
 8003070:	2102      	movs	r1, #2
 8003072:	4618      	mov	r0, r3
 8003074:	f000 fca6 	bl	80039c4 <RCCEx_PLL3_Config>
 8003078:	4603      	mov	r3, r0
 800307a:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800307e:	e00c      	b.n	800309a <HAL_RCCEx_PeriphCLKConfig+0xcce>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003080:	2301      	movs	r3, #1
 8003082:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8003086:	e008      	b.n	800309a <HAL_RCCEx_PeriphCLKConfig+0xcce>
 8003088:	58024400 	.word	0x58024400
        break;
 800308c:	bf00      	nop
 800308e:	e004      	b.n	800309a <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 8003090:	bf00      	nop
 8003092:	e002      	b.n	800309a <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 8003094:	bf00      	nop
 8003096:	e000      	b.n	800309a <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 8003098:	bf00      	nop
    }

    if (ret == HAL_OK)
 800309a:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d10b      	bne.n	80030ba <HAL_RCCEx_PeriphCLKConfig+0xcee>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80030a2:	4bc2      	ldr	r3, [pc, #776]	; (80033ac <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80030a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030a6:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 80030aa:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80030ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80030b2:	4abe      	ldr	r2, [pc, #760]	; (80033ac <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80030b4:	430b      	orrs	r3, r1
 80030b6:	6553      	str	r3, [r2, #84]	; 0x54
 80030b8:	e003      	b.n	80030c2 <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80030ba:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80030be:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80030c2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80030c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030ca:	f002 0340 	and.w	r3, r2, #64	; 0x40
 80030ce:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80030d2:	2300      	movs	r3, #0
 80030d4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80030d8:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 80030dc:	460b      	mov	r3, r1
 80030de:	4313      	orrs	r3, r2
 80030e0:	d055      	beq.n	800318e <HAL_RCCEx_PeriphCLKConfig+0xdc2>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80030e2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80030e6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80030ea:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80030ee:	d033      	beq.n	8003158 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
 80030f0:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80030f4:	d82c      	bhi.n	8003150 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 80030f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80030fa:	d02f      	beq.n	800315c <HAL_RCCEx_PeriphCLKConfig+0xd90>
 80030fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003100:	d826      	bhi.n	8003150 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 8003102:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003106:	d02b      	beq.n	8003160 <HAL_RCCEx_PeriphCLKConfig+0xd94>
 8003108:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800310c:	d820      	bhi.n	8003150 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 800310e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003112:	d012      	beq.n	800313a <HAL_RCCEx_PeriphCLKConfig+0xd6e>
 8003114:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003118:	d81a      	bhi.n	8003150 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 800311a:	2b00      	cmp	r3, #0
 800311c:	d022      	beq.n	8003164 <HAL_RCCEx_PeriphCLKConfig+0xd98>
 800311e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003122:	d115      	bne.n	8003150 <HAL_RCCEx_PeriphCLKConfig+0xd84>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003124:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003128:	3308      	adds	r3, #8
 800312a:	2100      	movs	r1, #0
 800312c:	4618      	mov	r0, r3
 800312e:	f000 fb97 	bl	8003860 <RCCEx_PLL2_Config>
 8003132:	4603      	mov	r3, r0
 8003134:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8003138:	e015      	b.n	8003166 <HAL_RCCEx_PeriphCLKConfig+0xd9a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800313a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800313e:	3328      	adds	r3, #40	; 0x28
 8003140:	2102      	movs	r1, #2
 8003142:	4618      	mov	r0, r3
 8003144:	f000 fc3e 	bl	80039c4 <RCCEx_PLL3_Config>
 8003148:	4603      	mov	r3, r0
 800314a:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800314e:	e00a      	b.n	8003166 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003150:	2301      	movs	r3, #1
 8003152:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8003156:	e006      	b.n	8003166 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 8003158:	bf00      	nop
 800315a:	e004      	b.n	8003166 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 800315c:	bf00      	nop
 800315e:	e002      	b.n	8003166 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 8003160:	bf00      	nop
 8003162:	e000      	b.n	8003166 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 8003164:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003166:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800316a:	2b00      	cmp	r3, #0
 800316c:	d10b      	bne.n	8003186 <HAL_RCCEx_PeriphCLKConfig+0xdba>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800316e:	4b8f      	ldr	r3, [pc, #572]	; (80033ac <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003170:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003172:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 8003176:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800317a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800317e:	4a8b      	ldr	r2, [pc, #556]	; (80033ac <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003180:	430b      	orrs	r3, r1
 8003182:	6593      	str	r3, [r2, #88]	; 0x58
 8003184:	e003      	b.n	800318e <HAL_RCCEx_PeriphCLKConfig+0xdc2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003186:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800318a:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800318e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003192:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003196:	f002 0380 	and.w	r3, r2, #128	; 0x80
 800319a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800319e:	2300      	movs	r3, #0
 80031a0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80031a4:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 80031a8:	460b      	mov	r3, r1
 80031aa:	4313      	orrs	r3, r2
 80031ac:	d055      	beq.n	800325a <HAL_RCCEx_PeriphCLKConfig+0xe8e>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80031ae:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80031b2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80031b6:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80031ba:	d033      	beq.n	8003224 <HAL_RCCEx_PeriphCLKConfig+0xe58>
 80031bc:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80031c0:	d82c      	bhi.n	800321c <HAL_RCCEx_PeriphCLKConfig+0xe50>
 80031c2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80031c6:	d02f      	beq.n	8003228 <HAL_RCCEx_PeriphCLKConfig+0xe5c>
 80031c8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80031cc:	d826      	bhi.n	800321c <HAL_RCCEx_PeriphCLKConfig+0xe50>
 80031ce:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80031d2:	d02b      	beq.n	800322c <HAL_RCCEx_PeriphCLKConfig+0xe60>
 80031d4:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80031d8:	d820      	bhi.n	800321c <HAL_RCCEx_PeriphCLKConfig+0xe50>
 80031da:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80031de:	d012      	beq.n	8003206 <HAL_RCCEx_PeriphCLKConfig+0xe3a>
 80031e0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80031e4:	d81a      	bhi.n	800321c <HAL_RCCEx_PeriphCLKConfig+0xe50>
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d022      	beq.n	8003230 <HAL_RCCEx_PeriphCLKConfig+0xe64>
 80031ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80031ee:	d115      	bne.n	800321c <HAL_RCCEx_PeriphCLKConfig+0xe50>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80031f0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80031f4:	3308      	adds	r3, #8
 80031f6:	2100      	movs	r1, #0
 80031f8:	4618      	mov	r0, r3
 80031fa:	f000 fb31 	bl	8003860 <RCCEx_PLL2_Config>
 80031fe:	4603      	mov	r3, r0
 8003200:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8003204:	e015      	b.n	8003232 <HAL_RCCEx_PeriphCLKConfig+0xe66>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003206:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800320a:	3328      	adds	r3, #40	; 0x28
 800320c:	2102      	movs	r1, #2
 800320e:	4618      	mov	r0, r3
 8003210:	f000 fbd8 	bl	80039c4 <RCCEx_PLL3_Config>
 8003214:	4603      	mov	r3, r0
 8003216:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800321a:	e00a      	b.n	8003232 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800321c:	2301      	movs	r3, #1
 800321e:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8003222:	e006      	b.n	8003232 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 8003224:	bf00      	nop
 8003226:	e004      	b.n	8003232 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 8003228:	bf00      	nop
 800322a:	e002      	b.n	8003232 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 800322c:	bf00      	nop
 800322e:	e000      	b.n	8003232 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 8003230:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003232:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8003236:	2b00      	cmp	r3, #0
 8003238:	d10b      	bne.n	8003252 <HAL_RCCEx_PeriphCLKConfig+0xe86>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800323a:	4b5c      	ldr	r3, [pc, #368]	; (80033ac <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800323c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800323e:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8003242:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003246:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800324a:	4a58      	ldr	r2, [pc, #352]	; (80033ac <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800324c:	430b      	orrs	r3, r1
 800324e:	6593      	str	r3, [r2, #88]	; 0x58
 8003250:	e003      	b.n	800325a <HAL_RCCEx_PeriphCLKConfig+0xe8e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003252:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8003256:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800325a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800325e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003262:	f002 0308 	and.w	r3, r2, #8
 8003266:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800326a:	2300      	movs	r3, #0
 800326c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003270:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8003274:	460b      	mov	r3, r1
 8003276:	4313      	orrs	r3, r2
 8003278:	d01e      	beq.n	80032b8 <HAL_RCCEx_PeriphCLKConfig+0xeec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800327a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800327e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003282:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003286:	d10c      	bne.n	80032a2 <HAL_RCCEx_PeriphCLKConfig+0xed6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003288:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800328c:	3328      	adds	r3, #40	; 0x28
 800328e:	2102      	movs	r1, #2
 8003290:	4618      	mov	r0, r3
 8003292:	f000 fb97 	bl	80039c4 <RCCEx_PLL3_Config>
 8003296:	4603      	mov	r3, r0
 8003298:	2b00      	cmp	r3, #0
 800329a:	d002      	beq.n	80032a2 <HAL_RCCEx_PeriphCLKConfig+0xed6>
      {
        status = HAL_ERROR;
 800329c:	2301      	movs	r3, #1
 800329e:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80032a2:	4b42      	ldr	r3, [pc, #264]	; (80033ac <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80032a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032a6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80032aa:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80032ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032b2:	4a3e      	ldr	r2, [pc, #248]	; (80033ac <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80032b4:	430b      	orrs	r3, r1
 80032b6:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80032b8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80032bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032c0:	f002 0310 	and.w	r3, r2, #16
 80032c4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80032c8:	2300      	movs	r3, #0
 80032ca:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80032ce:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 80032d2:	460b      	mov	r3, r1
 80032d4:	4313      	orrs	r3, r2
 80032d6:	d01e      	beq.n	8003316 <HAL_RCCEx_PeriphCLKConfig+0xf4a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80032d8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80032dc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80032e0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80032e4:	d10c      	bne.n	8003300 <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80032e6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80032ea:	3328      	adds	r3, #40	; 0x28
 80032ec:	2102      	movs	r1, #2
 80032ee:	4618      	mov	r0, r3
 80032f0:	f000 fb68 	bl	80039c4 <RCCEx_PLL3_Config>
 80032f4:	4603      	mov	r3, r0
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d002      	beq.n	8003300 <HAL_RCCEx_PeriphCLKConfig+0xf34>
      {
        status = HAL_ERROR;
 80032fa:	2301      	movs	r3, #1
 80032fc:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003300:	4b2a      	ldr	r3, [pc, #168]	; (80033ac <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003302:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003304:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003308:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800330c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003310:	4a26      	ldr	r2, [pc, #152]	; (80033ac <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003312:	430b      	orrs	r3, r1
 8003314:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003316:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800331a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800331e:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8003322:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003326:	2300      	movs	r3, #0
 8003328:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800332c:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8003330:	460b      	mov	r3, r1
 8003332:	4313      	orrs	r3, r2
 8003334:	d040      	beq.n	80033b8 <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8003336:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800333a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800333e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003342:	d022      	beq.n	800338a <HAL_RCCEx_PeriphCLKConfig+0xfbe>
 8003344:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003348:	d81b      	bhi.n	8003382 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800334a:	2b00      	cmp	r3, #0
 800334c:	d003      	beq.n	8003356 <HAL_RCCEx_PeriphCLKConfig+0xf8a>
 800334e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003352:	d00b      	beq.n	800336c <HAL_RCCEx_PeriphCLKConfig+0xfa0>
 8003354:	e015      	b.n	8003382 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003356:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800335a:	3308      	adds	r3, #8
 800335c:	2100      	movs	r1, #0
 800335e:	4618      	mov	r0, r3
 8003360:	f000 fa7e 	bl	8003860 <RCCEx_PLL2_Config>
 8003364:	4603      	mov	r3, r0
 8003366:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* ADC clock source configuration done later after clock selection check */
        break;
 800336a:	e00f      	b.n	800338c <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800336c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003370:	3328      	adds	r3, #40	; 0x28
 8003372:	2102      	movs	r1, #2
 8003374:	4618      	mov	r0, r3
 8003376:	f000 fb25 	bl	80039c4 <RCCEx_PLL3_Config>
 800337a:	4603      	mov	r3, r0
 800337c:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8003380:	e004      	b.n	800338c <HAL_RCCEx_PeriphCLKConfig+0xfc0>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003382:	2301      	movs	r3, #1
 8003384:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8003388:	e000      	b.n	800338c <HAL_RCCEx_PeriphCLKConfig+0xfc0>
        break;
 800338a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800338c:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8003390:	2b00      	cmp	r3, #0
 8003392:	d10d      	bne.n	80033b0 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003394:	4b05      	ldr	r3, [pc, #20]	; (80033ac <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003396:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003398:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800339c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80033a0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80033a4:	4a01      	ldr	r2, [pc, #4]	; (80033ac <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80033a6:	430b      	orrs	r3, r1
 80033a8:	6593      	str	r3, [r2, #88]	; 0x58
 80033aa:	e005      	b.n	80033b8 <HAL_RCCEx_PeriphCLKConfig+0xfec>
 80033ac:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033b0:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80033b4:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80033b8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80033bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033c0:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 80033c4:	67bb      	str	r3, [r7, #120]	; 0x78
 80033c6:	2300      	movs	r3, #0
 80033c8:	67fb      	str	r3, [r7, #124]	; 0x7c
 80033ca:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 80033ce:	460b      	mov	r3, r1
 80033d0:	4313      	orrs	r3, r2
 80033d2:	d03b      	beq.n	800344c <HAL_RCCEx_PeriphCLKConfig+0x1080>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80033d4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80033d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80033dc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80033e0:	d01f      	beq.n	8003422 <HAL_RCCEx_PeriphCLKConfig+0x1056>
 80033e2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80033e6:	d818      	bhi.n	800341a <HAL_RCCEx_PeriphCLKConfig+0x104e>
 80033e8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80033ec:	d003      	beq.n	80033f6 <HAL_RCCEx_PeriphCLKConfig+0x102a>
 80033ee:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80033f2:	d007      	beq.n	8003404 <HAL_RCCEx_PeriphCLKConfig+0x1038>
 80033f4:	e011      	b.n	800341a <HAL_RCCEx_PeriphCLKConfig+0x104e>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80033f6:	4b64      	ldr	r3, [pc, #400]	; (8003588 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 80033f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033fa:	4a63      	ldr	r2, [pc, #396]	; (8003588 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 80033fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003400:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8003402:	e00f      	b.n	8003424 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003404:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003408:	3328      	adds	r3, #40	; 0x28
 800340a:	2101      	movs	r1, #1
 800340c:	4618      	mov	r0, r3
 800340e:	f000 fad9 	bl	80039c4 <RCCEx_PLL3_Config>
 8003412:	4603      	mov	r3, r0
 8003414:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* USB clock source configuration done later after clock selection check */
        break;
 8003418:	e004      	b.n	8003424 <HAL_RCCEx_PeriphCLKConfig+0x1058>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800341a:	2301      	movs	r3, #1
 800341c:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8003420:	e000      	b.n	8003424 <HAL_RCCEx_PeriphCLKConfig+0x1058>
        break;
 8003422:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003424:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8003428:	2b00      	cmp	r3, #0
 800342a:	d10b      	bne.n	8003444 <HAL_RCCEx_PeriphCLKConfig+0x1078>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800342c:	4b56      	ldr	r3, [pc, #344]	; (8003588 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 800342e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003430:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8003434:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003438:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800343c:	4a52      	ldr	r2, [pc, #328]	; (8003588 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 800343e:	430b      	orrs	r3, r1
 8003440:	6553      	str	r3, [r2, #84]	; 0x54
 8003442:	e003      	b.n	800344c <HAL_RCCEx_PeriphCLKConfig+0x1080>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003444:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8003448:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800344c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003450:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003454:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8003458:	673b      	str	r3, [r7, #112]	; 0x70
 800345a:	2300      	movs	r3, #0
 800345c:	677b      	str	r3, [r7, #116]	; 0x74
 800345e:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8003462:	460b      	mov	r3, r1
 8003464:	4313      	orrs	r3, r2
 8003466:	d031      	beq.n	80034cc <HAL_RCCEx_PeriphCLKConfig+0x1100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8003468:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800346c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800346e:	2b00      	cmp	r3, #0
 8003470:	d003      	beq.n	800347a <HAL_RCCEx_PeriphCLKConfig+0x10ae>
 8003472:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003476:	d007      	beq.n	8003488 <HAL_RCCEx_PeriphCLKConfig+0x10bc>
 8003478:	e011      	b.n	800349e <HAL_RCCEx_PeriphCLKConfig+0x10d2>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800347a:	4b43      	ldr	r3, [pc, #268]	; (8003588 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 800347c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800347e:	4a42      	ldr	r2, [pc, #264]	; (8003588 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8003480:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003484:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8003486:	e00e      	b.n	80034a6 <HAL_RCCEx_PeriphCLKConfig+0x10da>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003488:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800348c:	3308      	adds	r3, #8
 800348e:	2102      	movs	r1, #2
 8003490:	4618      	mov	r0, r3
 8003492:	f000 f9e5 	bl	8003860 <RCCEx_PLL2_Config>
 8003496:	4603      	mov	r3, r0
 8003498:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800349c:	e003      	b.n	80034a6 <HAL_RCCEx_PeriphCLKConfig+0x10da>

      default:
        ret = HAL_ERROR;
 800349e:	2301      	movs	r3, #1
 80034a0:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 80034a4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80034a6:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d10a      	bne.n	80034c4 <HAL_RCCEx_PeriphCLKConfig+0x10f8>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80034ae:	4b36      	ldr	r3, [pc, #216]	; (8003588 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 80034b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034b2:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80034b6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80034ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034bc:	4a32      	ldr	r2, [pc, #200]	; (8003588 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 80034be:	430b      	orrs	r3, r1
 80034c0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80034c2:	e003      	b.n	80034cc <HAL_RCCEx_PeriphCLKConfig+0x1100>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034c4:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80034c8:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80034cc:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80034d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034d4:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 80034d8:	66bb      	str	r3, [r7, #104]	; 0x68
 80034da:	2300      	movs	r3, #0
 80034dc:	66fb      	str	r3, [r7, #108]	; 0x6c
 80034de:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 80034e2:	460b      	mov	r3, r1
 80034e4:	4313      	orrs	r3, r2
 80034e6:	d00c      	beq.n	8003502 <HAL_RCCEx_PeriphCLKConfig+0x1136>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80034e8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80034ec:	3328      	adds	r3, #40	; 0x28
 80034ee:	2102      	movs	r1, #2
 80034f0:	4618      	mov	r0, r3
 80034f2:	f000 fa67 	bl	80039c4 <RCCEx_PLL3_Config>
 80034f6:	4603      	mov	r3, r0
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d002      	beq.n	8003502 <HAL_RCCEx_PeriphCLKConfig+0x1136>
    {
      status = HAL_ERROR;
 80034fc:	2301      	movs	r3, #1
 80034fe:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8003502:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003506:	e9d3 2300 	ldrd	r2, r3, [r3]
 800350a:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800350e:	663b      	str	r3, [r7, #96]	; 0x60
 8003510:	2300      	movs	r3, #0
 8003512:	667b      	str	r3, [r7, #100]	; 0x64
 8003514:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8003518:	460b      	mov	r3, r1
 800351a:	4313      	orrs	r3, r2
 800351c:	d03a      	beq.n	8003594 <HAL_RCCEx_PeriphCLKConfig+0x11c8>
  {

    switch (PeriphClkInit->RngClockSelection)
 800351e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003522:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003526:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800352a:	d018      	beq.n	800355e <HAL_RCCEx_PeriphCLKConfig+0x1192>
 800352c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003530:	d811      	bhi.n	8003556 <HAL_RCCEx_PeriphCLKConfig+0x118a>
 8003532:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003536:	d014      	beq.n	8003562 <HAL_RCCEx_PeriphCLKConfig+0x1196>
 8003538:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800353c:	d80b      	bhi.n	8003556 <HAL_RCCEx_PeriphCLKConfig+0x118a>
 800353e:	2b00      	cmp	r3, #0
 8003540:	d011      	beq.n	8003566 <HAL_RCCEx_PeriphCLKConfig+0x119a>
 8003542:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003546:	d106      	bne.n	8003556 <HAL_RCCEx_PeriphCLKConfig+0x118a>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003548:	4b0f      	ldr	r3, [pc, #60]	; (8003588 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 800354a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800354c:	4a0e      	ldr	r2, [pc, #56]	; (8003588 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 800354e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003552:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8003554:	e008      	b.n	8003568 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003556:	2301      	movs	r3, #1
 8003558:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 800355c:	e004      	b.n	8003568 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 800355e:	bf00      	nop
 8003560:	e002      	b.n	8003568 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 8003562:	bf00      	nop
 8003564:	e000      	b.n	8003568 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 8003566:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003568:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800356c:	2b00      	cmp	r3, #0
 800356e:	d10d      	bne.n	800358c <HAL_RCCEx_PeriphCLKConfig+0x11c0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003570:	4b05      	ldr	r3, [pc, #20]	; (8003588 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8003572:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003574:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003578:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800357c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003580:	4a01      	ldr	r2, [pc, #4]	; (8003588 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8003582:	430b      	orrs	r3, r1
 8003584:	6553      	str	r3, [r2, #84]	; 0x54
 8003586:	e005      	b.n	8003594 <HAL_RCCEx_PeriphCLKConfig+0x11c8>
 8003588:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800358c:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8003590:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003594:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003598:	e9d3 2300 	ldrd	r2, r3, [r3]
 800359c:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 80035a0:	65bb      	str	r3, [r7, #88]	; 0x58
 80035a2:	2300      	movs	r3, #0
 80035a4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80035a6:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 80035aa:	460b      	mov	r3, r1
 80035ac:	4313      	orrs	r3, r2
 80035ae:	d009      	beq.n	80035c4 <HAL_RCCEx_PeriphCLKConfig+0x11f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80035b0:	4baa      	ldr	r3, [pc, #680]	; (800385c <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80035b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035b4:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80035b8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80035bc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80035be:	4aa7      	ldr	r2, [pc, #668]	; (800385c <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80035c0:	430b      	orrs	r3, r1
 80035c2:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80035c4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80035c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035cc:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 80035d0:	653b      	str	r3, [r7, #80]	; 0x50
 80035d2:	2300      	movs	r3, #0
 80035d4:	657b      	str	r3, [r7, #84]	; 0x54
 80035d6:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 80035da:	460b      	mov	r3, r1
 80035dc:	4313      	orrs	r3, r2
 80035de:	d00a      	beq.n	80035f6 <HAL_RCCEx_PeriphCLKConfig+0x122a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80035e0:	4b9e      	ldr	r3, [pc, #632]	; (800385c <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80035e2:	691b      	ldr	r3, [r3, #16]
 80035e4:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 80035e8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80035ec:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80035f0:	4a9a      	ldr	r2, [pc, #616]	; (800385c <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80035f2:	430b      	orrs	r3, r1
 80035f4:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80035f6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80035fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035fe:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8003602:	64bb      	str	r3, [r7, #72]	; 0x48
 8003604:	2300      	movs	r3, #0
 8003606:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003608:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800360c:	460b      	mov	r3, r1
 800360e:	4313      	orrs	r3, r2
 8003610:	d009      	beq.n	8003626 <HAL_RCCEx_PeriphCLKConfig+0x125a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003612:	4b92      	ldr	r3, [pc, #584]	; (800385c <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8003614:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003616:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 800361a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800361e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003620:	4a8e      	ldr	r2, [pc, #568]	; (800385c <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8003622:	430b      	orrs	r3, r1
 8003624:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8003626:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800362a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800362e:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8003632:	643b      	str	r3, [r7, #64]	; 0x40
 8003634:	2300      	movs	r3, #0
 8003636:	647b      	str	r3, [r7, #68]	; 0x44
 8003638:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800363c:	460b      	mov	r3, r1
 800363e:	4313      	orrs	r3, r2
 8003640:	d00e      	beq.n	8003660 <HAL_RCCEx_PeriphCLKConfig+0x1294>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003642:	4b86      	ldr	r3, [pc, #536]	; (800385c <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8003644:	691b      	ldr	r3, [r3, #16]
 8003646:	4a85      	ldr	r2, [pc, #532]	; (800385c <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8003648:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800364c:	6113      	str	r3, [r2, #16]
 800364e:	4b83      	ldr	r3, [pc, #524]	; (800385c <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8003650:	6919      	ldr	r1, [r3, #16]
 8003652:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003656:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800365a:	4a80      	ldr	r2, [pc, #512]	; (800385c <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 800365c:	430b      	orrs	r3, r1
 800365e:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8003660:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003664:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003668:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 800366c:	63bb      	str	r3, [r7, #56]	; 0x38
 800366e:	2300      	movs	r3, #0
 8003670:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003672:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8003676:	460b      	mov	r3, r1
 8003678:	4313      	orrs	r3, r2
 800367a:	d009      	beq.n	8003690 <HAL_RCCEx_PeriphCLKConfig+0x12c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800367c:	4b77      	ldr	r3, [pc, #476]	; (800385c <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 800367e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003680:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8003684:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003688:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800368a:	4a74      	ldr	r2, [pc, #464]	; (800385c <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 800368c:	430b      	orrs	r3, r1
 800368e:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003690:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003694:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003698:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 800369c:	633b      	str	r3, [r7, #48]	; 0x30
 800369e:	2300      	movs	r3, #0
 80036a0:	637b      	str	r3, [r7, #52]	; 0x34
 80036a2:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 80036a6:	460b      	mov	r3, r1
 80036a8:	4313      	orrs	r3, r2
 80036aa:	d00a      	beq.n	80036c2 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80036ac:	4b6b      	ldr	r3, [pc, #428]	; (800385c <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80036ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036b0:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 80036b4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80036b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036bc:	4a67      	ldr	r2, [pc, #412]	; (800385c <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80036be:	430b      	orrs	r3, r1
 80036c0:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80036c2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80036c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036ca:	2100      	movs	r1, #0
 80036cc:	62b9      	str	r1, [r7, #40]	; 0x28
 80036ce:	f003 0301 	and.w	r3, r3, #1
 80036d2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80036d4:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 80036d8:	460b      	mov	r3, r1
 80036da:	4313      	orrs	r3, r2
 80036dc:	d011      	beq.n	8003702 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80036de:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80036e2:	3308      	adds	r3, #8
 80036e4:	2100      	movs	r1, #0
 80036e6:	4618      	mov	r0, r3
 80036e8:	f000 f8ba 	bl	8003860 <RCCEx_PLL2_Config>
 80036ec:	4603      	mov	r3, r0
 80036ee:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
    
    if (ret == HAL_OK)
 80036f2:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d003      	beq.n	8003702 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036fa:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80036fe:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8003702:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003706:	e9d3 2300 	ldrd	r2, r3, [r3]
 800370a:	2100      	movs	r1, #0
 800370c:	6239      	str	r1, [r7, #32]
 800370e:	f003 0302 	and.w	r3, r3, #2
 8003712:	627b      	str	r3, [r7, #36]	; 0x24
 8003714:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8003718:	460b      	mov	r3, r1
 800371a:	4313      	orrs	r3, r2
 800371c:	d011      	beq.n	8003742 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800371e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003722:	3308      	adds	r3, #8
 8003724:	2101      	movs	r1, #1
 8003726:	4618      	mov	r0, r3
 8003728:	f000 f89a 	bl	8003860 <RCCEx_PLL2_Config>
 800372c:	4603      	mov	r3, r0
 800372e:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
    
    if (ret == HAL_OK)
 8003732:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8003736:	2b00      	cmp	r3, #0
 8003738:	d003      	beq.n	8003742 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800373a:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800373e:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8003742:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003746:	e9d3 2300 	ldrd	r2, r3, [r3]
 800374a:	2100      	movs	r1, #0
 800374c:	61b9      	str	r1, [r7, #24]
 800374e:	f003 0304 	and.w	r3, r3, #4
 8003752:	61fb      	str	r3, [r7, #28]
 8003754:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8003758:	460b      	mov	r3, r1
 800375a:	4313      	orrs	r3, r2
 800375c:	d011      	beq.n	8003782 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800375e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003762:	3308      	adds	r3, #8
 8003764:	2102      	movs	r1, #2
 8003766:	4618      	mov	r0, r3
 8003768:	f000 f87a 	bl	8003860 <RCCEx_PLL2_Config>
 800376c:	4603      	mov	r3, r0
 800376e:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
    
    if (ret == HAL_OK)
 8003772:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8003776:	2b00      	cmp	r3, #0
 8003778:	d003      	beq.n	8003782 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800377a:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800377e:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8003782:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003786:	e9d3 2300 	ldrd	r2, r3, [r3]
 800378a:	2100      	movs	r1, #0
 800378c:	6139      	str	r1, [r7, #16]
 800378e:	f003 0308 	and.w	r3, r3, #8
 8003792:	617b      	str	r3, [r7, #20]
 8003794:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8003798:	460b      	mov	r3, r1
 800379a:	4313      	orrs	r3, r2
 800379c:	d011      	beq.n	80037c2 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800379e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80037a2:	3328      	adds	r3, #40	; 0x28
 80037a4:	2100      	movs	r1, #0
 80037a6:	4618      	mov	r0, r3
 80037a8:	f000 f90c 	bl	80039c4 <RCCEx_PLL3_Config>
 80037ac:	4603      	mov	r3, r0
 80037ae:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
  
    if (ret == HAL_OK)
 80037b2:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d003      	beq.n	80037c2 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037ba:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80037be:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80037c2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80037c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037ca:	2100      	movs	r1, #0
 80037cc:	60b9      	str	r1, [r7, #8]
 80037ce:	f003 0310 	and.w	r3, r3, #16
 80037d2:	60fb      	str	r3, [r7, #12]
 80037d4:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80037d8:	460b      	mov	r3, r1
 80037da:	4313      	orrs	r3, r2
 80037dc:	d011      	beq.n	8003802 <HAL_RCCEx_PeriphCLKConfig+0x1436>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80037de:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80037e2:	3328      	adds	r3, #40	; 0x28
 80037e4:	2101      	movs	r1, #1
 80037e6:	4618      	mov	r0, r3
 80037e8:	f000 f8ec 	bl	80039c4 <RCCEx_PLL3_Config>
 80037ec:	4603      	mov	r3, r0
 80037ee:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
    
    if (ret == HAL_OK)
 80037f2:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d003      	beq.n	8003802 <HAL_RCCEx_PeriphCLKConfig+0x1436>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037fa:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80037fe:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8003802:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003806:	e9d3 2300 	ldrd	r2, r3, [r3]
 800380a:	2100      	movs	r1, #0
 800380c:	6039      	str	r1, [r7, #0]
 800380e:	f003 0320 	and.w	r3, r3, #32
 8003812:	607b      	str	r3, [r7, #4]
 8003814:	e9d7 1200 	ldrd	r1, r2, [r7]
 8003818:	460b      	mov	r3, r1
 800381a:	4313      	orrs	r3, r2
 800381c:	d011      	beq.n	8003842 <HAL_RCCEx_PeriphCLKConfig+0x1476>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800381e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003822:	3328      	adds	r3, #40	; 0x28
 8003824:	2102      	movs	r1, #2
 8003826:	4618      	mov	r0, r3
 8003828:	f000 f8cc 	bl	80039c4 <RCCEx_PLL3_Config>
 800382c:	4603      	mov	r3, r0
 800382e:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
    
    if (ret == HAL_OK)
 8003832:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8003836:	2b00      	cmp	r3, #0
 8003838:	d003      	beq.n	8003842 <HAL_RCCEx_PeriphCLKConfig+0x1476>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800383a:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800383e:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    } 
  }

  if (status == HAL_OK)
 8003842:	f897 312e 	ldrb.w	r3, [r7, #302]	; 0x12e
 8003846:	2b00      	cmp	r3, #0
 8003848:	d101      	bne.n	800384e <HAL_RCCEx_PeriphCLKConfig+0x1482>
  {
    return HAL_OK;
 800384a:	2300      	movs	r3, #0
 800384c:	e000      	b.n	8003850 <HAL_RCCEx_PeriphCLKConfig+0x1484>
  }
  return HAL_ERROR;
 800384e:	2301      	movs	r3, #1
}
 8003850:	4618      	mov	r0, r3
 8003852:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8003856:	46bd      	mov	sp, r7
 8003858:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800385c:	58024400 	.word	0x58024400

08003860 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8003860:	b580      	push	{r7, lr}
 8003862:	b084      	sub	sp, #16
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
 8003868:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800386a:	2300      	movs	r3, #0
 800386c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800386e:	4b53      	ldr	r3, [pc, #332]	; (80039bc <RCCEx_PLL2_Config+0x15c>)
 8003870:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003872:	f003 0303 	and.w	r3, r3, #3
 8003876:	2b03      	cmp	r3, #3
 8003878:	d101      	bne.n	800387e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800387a:	2301      	movs	r3, #1
 800387c:	e099      	b.n	80039b2 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800387e:	4b4f      	ldr	r3, [pc, #316]	; (80039bc <RCCEx_PLL2_Config+0x15c>)
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	4a4e      	ldr	r2, [pc, #312]	; (80039bc <RCCEx_PLL2_Config+0x15c>)
 8003884:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003888:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800388a:	f7fd fab7 	bl	8000dfc <HAL_GetTick>
 800388e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003890:	e008      	b.n	80038a4 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8003892:	f7fd fab3 	bl	8000dfc <HAL_GetTick>
 8003896:	4602      	mov	r2, r0
 8003898:	68bb      	ldr	r3, [r7, #8]
 800389a:	1ad3      	subs	r3, r2, r3
 800389c:	2b02      	cmp	r3, #2
 800389e:	d901      	bls.n	80038a4 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80038a0:	2303      	movs	r3, #3
 80038a2:	e086      	b.n	80039b2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80038a4:	4b45      	ldr	r3, [pc, #276]	; (80039bc <RCCEx_PLL2_Config+0x15c>)
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d1f0      	bne.n	8003892 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80038b0:	4b42      	ldr	r3, [pc, #264]	; (80039bc <RCCEx_PLL2_Config+0x15c>)
 80038b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038b4:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	031b      	lsls	r3, r3, #12
 80038be:	493f      	ldr	r1, [pc, #252]	; (80039bc <RCCEx_PLL2_Config+0x15c>)
 80038c0:	4313      	orrs	r3, r2
 80038c2:	628b      	str	r3, [r1, #40]	; 0x28
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	685b      	ldr	r3, [r3, #4]
 80038c8:	3b01      	subs	r3, #1
 80038ca:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	689b      	ldr	r3, [r3, #8]
 80038d2:	3b01      	subs	r3, #1
 80038d4:	025b      	lsls	r3, r3, #9
 80038d6:	b29b      	uxth	r3, r3
 80038d8:	431a      	orrs	r2, r3
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	68db      	ldr	r3, [r3, #12]
 80038de:	3b01      	subs	r3, #1
 80038e0:	041b      	lsls	r3, r3, #16
 80038e2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80038e6:	431a      	orrs	r2, r3
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	691b      	ldr	r3, [r3, #16]
 80038ec:	3b01      	subs	r3, #1
 80038ee:	061b      	lsls	r3, r3, #24
 80038f0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80038f4:	4931      	ldr	r1, [pc, #196]	; (80039bc <RCCEx_PLL2_Config+0x15c>)
 80038f6:	4313      	orrs	r3, r2
 80038f8:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80038fa:	4b30      	ldr	r3, [pc, #192]	; (80039bc <RCCEx_PLL2_Config+0x15c>)
 80038fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038fe:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	695b      	ldr	r3, [r3, #20]
 8003906:	492d      	ldr	r1, [pc, #180]	; (80039bc <RCCEx_PLL2_Config+0x15c>)
 8003908:	4313      	orrs	r3, r2
 800390a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800390c:	4b2b      	ldr	r3, [pc, #172]	; (80039bc <RCCEx_PLL2_Config+0x15c>)
 800390e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003910:	f023 0220 	bic.w	r2, r3, #32
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	699b      	ldr	r3, [r3, #24]
 8003918:	4928      	ldr	r1, [pc, #160]	; (80039bc <RCCEx_PLL2_Config+0x15c>)
 800391a:	4313      	orrs	r3, r2
 800391c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800391e:	4b27      	ldr	r3, [pc, #156]	; (80039bc <RCCEx_PLL2_Config+0x15c>)
 8003920:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003922:	4a26      	ldr	r2, [pc, #152]	; (80039bc <RCCEx_PLL2_Config+0x15c>)
 8003924:	f023 0310 	bic.w	r3, r3, #16
 8003928:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800392a:	4b24      	ldr	r3, [pc, #144]	; (80039bc <RCCEx_PLL2_Config+0x15c>)
 800392c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800392e:	4b24      	ldr	r3, [pc, #144]	; (80039c0 <RCCEx_PLL2_Config+0x160>)
 8003930:	4013      	ands	r3, r2
 8003932:	687a      	ldr	r2, [r7, #4]
 8003934:	69d2      	ldr	r2, [r2, #28]
 8003936:	00d2      	lsls	r2, r2, #3
 8003938:	4920      	ldr	r1, [pc, #128]	; (80039bc <RCCEx_PLL2_Config+0x15c>)
 800393a:	4313      	orrs	r3, r2
 800393c:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800393e:	4b1f      	ldr	r3, [pc, #124]	; (80039bc <RCCEx_PLL2_Config+0x15c>)
 8003940:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003942:	4a1e      	ldr	r2, [pc, #120]	; (80039bc <RCCEx_PLL2_Config+0x15c>)
 8003944:	f043 0310 	orr.w	r3, r3, #16
 8003948:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800394a:	683b      	ldr	r3, [r7, #0]
 800394c:	2b00      	cmp	r3, #0
 800394e:	d106      	bne.n	800395e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8003950:	4b1a      	ldr	r3, [pc, #104]	; (80039bc <RCCEx_PLL2_Config+0x15c>)
 8003952:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003954:	4a19      	ldr	r2, [pc, #100]	; (80039bc <RCCEx_PLL2_Config+0x15c>)
 8003956:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800395a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800395c:	e00f      	b.n	800397e <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800395e:	683b      	ldr	r3, [r7, #0]
 8003960:	2b01      	cmp	r3, #1
 8003962:	d106      	bne.n	8003972 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8003964:	4b15      	ldr	r3, [pc, #84]	; (80039bc <RCCEx_PLL2_Config+0x15c>)
 8003966:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003968:	4a14      	ldr	r2, [pc, #80]	; (80039bc <RCCEx_PLL2_Config+0x15c>)
 800396a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800396e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003970:	e005      	b.n	800397e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8003972:	4b12      	ldr	r3, [pc, #72]	; (80039bc <RCCEx_PLL2_Config+0x15c>)
 8003974:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003976:	4a11      	ldr	r2, [pc, #68]	; (80039bc <RCCEx_PLL2_Config+0x15c>)
 8003978:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800397c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800397e:	4b0f      	ldr	r3, [pc, #60]	; (80039bc <RCCEx_PLL2_Config+0x15c>)
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	4a0e      	ldr	r2, [pc, #56]	; (80039bc <RCCEx_PLL2_Config+0x15c>)
 8003984:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003988:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800398a:	f7fd fa37 	bl	8000dfc <HAL_GetTick>
 800398e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8003990:	e008      	b.n	80039a4 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8003992:	f7fd fa33 	bl	8000dfc <HAL_GetTick>
 8003996:	4602      	mov	r2, r0
 8003998:	68bb      	ldr	r3, [r7, #8]
 800399a:	1ad3      	subs	r3, r2, r3
 800399c:	2b02      	cmp	r3, #2
 800399e:	d901      	bls.n	80039a4 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80039a0:	2303      	movs	r3, #3
 80039a2:	e006      	b.n	80039b2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80039a4:	4b05      	ldr	r3, [pc, #20]	; (80039bc <RCCEx_PLL2_Config+0x15c>)
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d0f0      	beq.n	8003992 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80039b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80039b2:	4618      	mov	r0, r3
 80039b4:	3710      	adds	r7, #16
 80039b6:	46bd      	mov	sp, r7
 80039b8:	bd80      	pop	{r7, pc}
 80039ba:	bf00      	nop
 80039bc:	58024400 	.word	0x58024400
 80039c0:	ffff0007 	.word	0xffff0007

080039c4 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80039c4:	b580      	push	{r7, lr}
 80039c6:	b084      	sub	sp, #16
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	6078      	str	r0, [r7, #4]
 80039cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80039ce:	2300      	movs	r3, #0
 80039d0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80039d2:	4b53      	ldr	r3, [pc, #332]	; (8003b20 <RCCEx_PLL3_Config+0x15c>)
 80039d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039d6:	f003 0303 	and.w	r3, r3, #3
 80039da:	2b03      	cmp	r3, #3
 80039dc:	d101      	bne.n	80039e2 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80039de:	2301      	movs	r3, #1
 80039e0:	e099      	b.n	8003b16 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80039e2:	4b4f      	ldr	r3, [pc, #316]	; (8003b20 <RCCEx_PLL3_Config+0x15c>)
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	4a4e      	ldr	r2, [pc, #312]	; (8003b20 <RCCEx_PLL3_Config+0x15c>)
 80039e8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80039ec:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80039ee:	f7fd fa05 	bl	8000dfc <HAL_GetTick>
 80039f2:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80039f4:	e008      	b.n	8003a08 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80039f6:	f7fd fa01 	bl	8000dfc <HAL_GetTick>
 80039fa:	4602      	mov	r2, r0
 80039fc:	68bb      	ldr	r3, [r7, #8]
 80039fe:	1ad3      	subs	r3, r2, r3
 8003a00:	2b02      	cmp	r3, #2
 8003a02:	d901      	bls.n	8003a08 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8003a04:	2303      	movs	r3, #3
 8003a06:	e086      	b.n	8003b16 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003a08:	4b45      	ldr	r3, [pc, #276]	; (8003b20 <RCCEx_PLL3_Config+0x15c>)
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d1f0      	bne.n	80039f6 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8003a14:	4b42      	ldr	r3, [pc, #264]	; (8003b20 <RCCEx_PLL3_Config+0x15c>)
 8003a16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a18:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	051b      	lsls	r3, r3, #20
 8003a22:	493f      	ldr	r1, [pc, #252]	; (8003b20 <RCCEx_PLL3_Config+0x15c>)
 8003a24:	4313      	orrs	r3, r2
 8003a26:	628b      	str	r3, [r1, #40]	; 0x28
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	685b      	ldr	r3, [r3, #4]
 8003a2c:	3b01      	subs	r3, #1
 8003a2e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	689b      	ldr	r3, [r3, #8]
 8003a36:	3b01      	subs	r3, #1
 8003a38:	025b      	lsls	r3, r3, #9
 8003a3a:	b29b      	uxth	r3, r3
 8003a3c:	431a      	orrs	r2, r3
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	68db      	ldr	r3, [r3, #12]
 8003a42:	3b01      	subs	r3, #1
 8003a44:	041b      	lsls	r3, r3, #16
 8003a46:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003a4a:	431a      	orrs	r2, r3
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	691b      	ldr	r3, [r3, #16]
 8003a50:	3b01      	subs	r3, #1
 8003a52:	061b      	lsls	r3, r3, #24
 8003a54:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003a58:	4931      	ldr	r1, [pc, #196]	; (8003b20 <RCCEx_PLL3_Config+0x15c>)
 8003a5a:	4313      	orrs	r3, r2
 8003a5c:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8003a5e:	4b30      	ldr	r3, [pc, #192]	; (8003b20 <RCCEx_PLL3_Config+0x15c>)
 8003a60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a62:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	695b      	ldr	r3, [r3, #20]
 8003a6a:	492d      	ldr	r1, [pc, #180]	; (8003b20 <RCCEx_PLL3_Config+0x15c>)
 8003a6c:	4313      	orrs	r3, r2
 8003a6e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8003a70:	4b2b      	ldr	r3, [pc, #172]	; (8003b20 <RCCEx_PLL3_Config+0x15c>)
 8003a72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a74:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	699b      	ldr	r3, [r3, #24]
 8003a7c:	4928      	ldr	r1, [pc, #160]	; (8003b20 <RCCEx_PLL3_Config+0x15c>)
 8003a7e:	4313      	orrs	r3, r2
 8003a80:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8003a82:	4b27      	ldr	r3, [pc, #156]	; (8003b20 <RCCEx_PLL3_Config+0x15c>)
 8003a84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a86:	4a26      	ldr	r2, [pc, #152]	; (8003b20 <RCCEx_PLL3_Config+0x15c>)
 8003a88:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003a8c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8003a8e:	4b24      	ldr	r3, [pc, #144]	; (8003b20 <RCCEx_PLL3_Config+0x15c>)
 8003a90:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003a92:	4b24      	ldr	r3, [pc, #144]	; (8003b24 <RCCEx_PLL3_Config+0x160>)
 8003a94:	4013      	ands	r3, r2
 8003a96:	687a      	ldr	r2, [r7, #4]
 8003a98:	69d2      	ldr	r2, [r2, #28]
 8003a9a:	00d2      	lsls	r2, r2, #3
 8003a9c:	4920      	ldr	r1, [pc, #128]	; (8003b20 <RCCEx_PLL3_Config+0x15c>)
 8003a9e:	4313      	orrs	r3, r2
 8003aa0:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8003aa2:	4b1f      	ldr	r3, [pc, #124]	; (8003b20 <RCCEx_PLL3_Config+0x15c>)
 8003aa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003aa6:	4a1e      	ldr	r2, [pc, #120]	; (8003b20 <RCCEx_PLL3_Config+0x15c>)
 8003aa8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003aac:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8003aae:	683b      	ldr	r3, [r7, #0]
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d106      	bne.n	8003ac2 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8003ab4:	4b1a      	ldr	r3, [pc, #104]	; (8003b20 <RCCEx_PLL3_Config+0x15c>)
 8003ab6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ab8:	4a19      	ldr	r2, [pc, #100]	; (8003b20 <RCCEx_PLL3_Config+0x15c>)
 8003aba:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003abe:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003ac0:	e00f      	b.n	8003ae2 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8003ac2:	683b      	ldr	r3, [r7, #0]
 8003ac4:	2b01      	cmp	r3, #1
 8003ac6:	d106      	bne.n	8003ad6 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8003ac8:	4b15      	ldr	r3, [pc, #84]	; (8003b20 <RCCEx_PLL3_Config+0x15c>)
 8003aca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003acc:	4a14      	ldr	r2, [pc, #80]	; (8003b20 <RCCEx_PLL3_Config+0x15c>)
 8003ace:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003ad2:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003ad4:	e005      	b.n	8003ae2 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8003ad6:	4b12      	ldr	r3, [pc, #72]	; (8003b20 <RCCEx_PLL3_Config+0x15c>)
 8003ad8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ada:	4a11      	ldr	r2, [pc, #68]	; (8003b20 <RCCEx_PLL3_Config+0x15c>)
 8003adc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003ae0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8003ae2:	4b0f      	ldr	r3, [pc, #60]	; (8003b20 <RCCEx_PLL3_Config+0x15c>)
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	4a0e      	ldr	r2, [pc, #56]	; (8003b20 <RCCEx_PLL3_Config+0x15c>)
 8003ae8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003aec:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003aee:	f7fd f985 	bl	8000dfc <HAL_GetTick>
 8003af2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8003af4:	e008      	b.n	8003b08 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8003af6:	f7fd f981 	bl	8000dfc <HAL_GetTick>
 8003afa:	4602      	mov	r2, r0
 8003afc:	68bb      	ldr	r3, [r7, #8]
 8003afe:	1ad3      	subs	r3, r2, r3
 8003b00:	2b02      	cmp	r3, #2
 8003b02:	d901      	bls.n	8003b08 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8003b04:	2303      	movs	r3, #3
 8003b06:	e006      	b.n	8003b16 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8003b08:	4b05      	ldr	r3, [pc, #20]	; (8003b20 <RCCEx_PLL3_Config+0x15c>)
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d0f0      	beq.n	8003af6 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8003b14:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b16:	4618      	mov	r0, r3
 8003b18:	3710      	adds	r7, #16
 8003b1a:	46bd      	mov	sp, r7
 8003b1c:	bd80      	pop	{r7, pc}
 8003b1e:	bf00      	nop
 8003b20:	58024400 	.word	0x58024400
 8003b24:	ffff0007 	.word	0xffff0007

08003b28 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 8003b28:	b580      	push	{r7, lr}
 8003b2a:	b082      	sub	sp, #8
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	6078      	str	r0, [r7, #4]
 8003b30:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d101      	bne.n	8003b3c <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8003b38:	2301      	movs	r3, #1
 8003b3a:	e02b      	b.n	8003b94 <HAL_SDRAM_Init+0x6c>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8003b42:	b2db      	uxtb	r3, r3
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d106      	bne.n	8003b56 <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	2200      	movs	r2, #0
 8003b4c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8003b50:	6878      	ldr	r0, [r7, #4]
 8003b52:	f7fc fd99 	bl	8000688 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	2202      	movs	r2, #2
 8003b5a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681a      	ldr	r2, [r3, #0]
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	3304      	adds	r3, #4
 8003b66:	4619      	mov	r1, r3
 8003b68:	4610      	mov	r0, r2
 8003b6a:	f000 f877 	bl	8003c5c <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	6818      	ldr	r0, [r3, #0]
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	685b      	ldr	r3, [r3, #4]
 8003b76:	461a      	mov	r2, r3
 8003b78:	6839      	ldr	r1, [r7, #0]
 8003b7a:	f000 f8cb 	bl	8003d14 <FMC_SDRAM_Timing_Init>

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
 8003b7e:	4b07      	ldr	r3, [pc, #28]	; (8003b9c <HAL_SDRAM_Init+0x74>)
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	4a06      	ldr	r2, [pc, #24]	; (8003b9c <HAL_SDRAM_Init+0x74>)
 8003b84:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003b88:	6013      	str	r3, [r2, #0]
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	2201      	movs	r2, #1
 8003b8e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8003b92:	2300      	movs	r3, #0
}
 8003b94:	4618      	mov	r0, r3
 8003b96:	3708      	adds	r7, #8
 8003b98:	46bd      	mov	sp, r7
 8003b9a:	bd80      	pop	{r7, pc}
 8003b9c:	52004000 	.word	0x52004000

08003ba0 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 8003ba0:	b580      	push	{r7, lr}
 8003ba2:	b086      	sub	sp, #24
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	60f8      	str	r0, [r7, #12]
 8003ba8:	60b9      	str	r1, [r7, #8]
 8003baa:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8003bb2:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 8003bb4:	7dfb      	ldrb	r3, [r7, #23]
 8003bb6:	2b02      	cmp	r3, #2
 8003bb8:	d101      	bne.n	8003bbe <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
 8003bba:	2302      	movs	r3, #2
 8003bbc:	e021      	b.n	8003c02 <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 8003bbe:	7dfb      	ldrb	r3, [r7, #23]
 8003bc0:	2b01      	cmp	r3, #1
 8003bc2:	d002      	beq.n	8003bca <HAL_SDRAM_SendCommand+0x2a>
 8003bc4:	7dfb      	ldrb	r3, [r7, #23]
 8003bc6:	2b05      	cmp	r3, #5
 8003bc8:	d118      	bne.n	8003bfc <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	2202      	movs	r2, #2
 8003bce:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	687a      	ldr	r2, [r7, #4]
 8003bd8:	68b9      	ldr	r1, [r7, #8]
 8003bda:	4618      	mov	r0, r3
 8003bdc:	f000 f904 	bl	8003de8 <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8003be0:	68bb      	ldr	r3, [r7, #8]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	2b02      	cmp	r3, #2
 8003be6:	d104      	bne.n	8003bf2 <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	2205      	movs	r2, #5
 8003bec:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8003bf0:	e006      	b.n	8003c00 <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	2201      	movs	r2, #1
 8003bf6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8003bfa:	e001      	b.n	8003c00 <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
 8003bfc:	2301      	movs	r3, #1
 8003bfe:	e000      	b.n	8003c02 <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
 8003c00:	2300      	movs	r3, #0
}
 8003c02:	4618      	mov	r0, r3
 8003c04:	3718      	adds	r7, #24
 8003c06:	46bd      	mov	sp, r7
 8003c08:	bd80      	pop	{r7, pc}

08003c0a <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8003c0a:	b580      	push	{r7, lr}
 8003c0c:	b082      	sub	sp, #8
 8003c0e:	af00      	add	r7, sp, #0
 8003c10:	6078      	str	r0, [r7, #4]
 8003c12:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8003c1a:	b2db      	uxtb	r3, r3
 8003c1c:	2b02      	cmp	r3, #2
 8003c1e:	d101      	bne.n	8003c24 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 8003c20:	2302      	movs	r3, #2
 8003c22:	e016      	b.n	8003c52 <HAL_SDRAM_ProgramRefreshRate+0x48>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8003c2a:	b2db      	uxtb	r3, r3
 8003c2c:	2b01      	cmp	r3, #1
 8003c2e:	d10f      	bne.n	8003c50 <HAL_SDRAM_ProgramRefreshRate+0x46>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	2202      	movs	r2, #2
 8003c34:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	6839      	ldr	r1, [r7, #0]
 8003c3e:	4618      	mov	r0, r3
 8003c40:	f000 f8f6 	bl	8003e30 <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	2201      	movs	r2, #1
 8003c48:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 8003c4c:	2300      	movs	r3, #0
 8003c4e:	e000      	b.n	8003c52 <HAL_SDRAM_ProgramRefreshRate+0x48>
    return HAL_ERROR;
 8003c50:	2301      	movs	r3, #1
}
 8003c52:	4618      	mov	r0, r3
 8003c54:	3708      	adds	r7, #8
 8003c56:	46bd      	mov	sp, r7
 8003c58:	bd80      	pop	{r7, pc}
	...

08003c5c <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8003c5c:	b480      	push	{r7}
 8003c5e:	b083      	sub	sp, #12
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	6078      	str	r0, [r7, #4]
 8003c64:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 8003c66:	683b      	ldr	r3, [r7, #0]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d121      	bne.n	8003cb2 <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681a      	ldr	r2, [r3, #0]
 8003c72:	4b27      	ldr	r3, [pc, #156]	; (8003d10 <FMC_SDRAM_Init+0xb4>)
 8003c74:	4013      	ands	r3, r2
 8003c76:	683a      	ldr	r2, [r7, #0]
 8003c78:	6851      	ldr	r1, [r2, #4]
 8003c7a:	683a      	ldr	r2, [r7, #0]
 8003c7c:	6892      	ldr	r2, [r2, #8]
 8003c7e:	4311      	orrs	r1, r2
 8003c80:	683a      	ldr	r2, [r7, #0]
 8003c82:	68d2      	ldr	r2, [r2, #12]
 8003c84:	4311      	orrs	r1, r2
 8003c86:	683a      	ldr	r2, [r7, #0]
 8003c88:	6912      	ldr	r2, [r2, #16]
 8003c8a:	4311      	orrs	r1, r2
 8003c8c:	683a      	ldr	r2, [r7, #0]
 8003c8e:	6952      	ldr	r2, [r2, #20]
 8003c90:	4311      	orrs	r1, r2
 8003c92:	683a      	ldr	r2, [r7, #0]
 8003c94:	6992      	ldr	r2, [r2, #24]
 8003c96:	4311      	orrs	r1, r2
 8003c98:	683a      	ldr	r2, [r7, #0]
 8003c9a:	69d2      	ldr	r2, [r2, #28]
 8003c9c:	4311      	orrs	r1, r2
 8003c9e:	683a      	ldr	r2, [r7, #0]
 8003ca0:	6a12      	ldr	r2, [r2, #32]
 8003ca2:	4311      	orrs	r1, r2
 8003ca4:	683a      	ldr	r2, [r7, #0]
 8003ca6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003ca8:	430a      	orrs	r2, r1
 8003caa:	431a      	orrs	r2, r3
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	601a      	str	r2, [r3, #0]
 8003cb0:	e026      	b.n	8003d00 <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8003cba:	683b      	ldr	r3, [r7, #0]
 8003cbc:	69d9      	ldr	r1, [r3, #28]
 8003cbe:	683b      	ldr	r3, [r7, #0]
 8003cc0:	6a1b      	ldr	r3, [r3, #32]
 8003cc2:	4319      	orrs	r1, r3
 8003cc4:	683b      	ldr	r3, [r7, #0]
 8003cc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cc8:	430b      	orrs	r3, r1
 8003cca:	431a      	orrs	r2, r3
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	601a      	str	r2, [r3, #0]
               FMC_SDCRx_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	685a      	ldr	r2, [r3, #4]
 8003cd4:	4b0e      	ldr	r3, [pc, #56]	; (8003d10 <FMC_SDRAM_Init+0xb4>)
 8003cd6:	4013      	ands	r3, r2
 8003cd8:	683a      	ldr	r2, [r7, #0]
 8003cda:	6851      	ldr	r1, [r2, #4]
 8003cdc:	683a      	ldr	r2, [r7, #0]
 8003cde:	6892      	ldr	r2, [r2, #8]
 8003ce0:	4311      	orrs	r1, r2
 8003ce2:	683a      	ldr	r2, [r7, #0]
 8003ce4:	68d2      	ldr	r2, [r2, #12]
 8003ce6:	4311      	orrs	r1, r2
 8003ce8:	683a      	ldr	r2, [r7, #0]
 8003cea:	6912      	ldr	r2, [r2, #16]
 8003cec:	4311      	orrs	r1, r2
 8003cee:	683a      	ldr	r2, [r7, #0]
 8003cf0:	6952      	ldr	r2, [r2, #20]
 8003cf2:	4311      	orrs	r1, r2
 8003cf4:	683a      	ldr	r2, [r7, #0]
 8003cf6:	6992      	ldr	r2, [r2, #24]
 8003cf8:	430a      	orrs	r2, r1
 8003cfa:	431a      	orrs	r2, r3
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 8003d00:	2300      	movs	r3, #0
}
 8003d02:	4618      	mov	r0, r3
 8003d04:	370c      	adds	r7, #12
 8003d06:	46bd      	mov	sp, r7
 8003d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0c:	4770      	bx	lr
 8003d0e:	bf00      	nop
 8003d10:	ffff8000 	.word	0xffff8000

08003d14 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8003d14:	b480      	push	{r7}
 8003d16:	b085      	sub	sp, #20
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	60f8      	str	r0, [r7, #12]
 8003d1c:	60b9      	str	r1, [r7, #8]
 8003d1e:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d128      	bne.n	8003d78 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	689b      	ldr	r3, [r3, #8]
 8003d2a:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8003d2e:	68bb      	ldr	r3, [r7, #8]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	1e59      	subs	r1, r3, #1
 8003d34:	68bb      	ldr	r3, [r7, #8]
 8003d36:	685b      	ldr	r3, [r3, #4]
 8003d38:	3b01      	subs	r3, #1
 8003d3a:	011b      	lsls	r3, r3, #4
 8003d3c:	4319      	orrs	r1, r3
 8003d3e:	68bb      	ldr	r3, [r7, #8]
 8003d40:	689b      	ldr	r3, [r3, #8]
 8003d42:	3b01      	subs	r3, #1
 8003d44:	021b      	lsls	r3, r3, #8
 8003d46:	4319      	orrs	r1, r3
 8003d48:	68bb      	ldr	r3, [r7, #8]
 8003d4a:	68db      	ldr	r3, [r3, #12]
 8003d4c:	3b01      	subs	r3, #1
 8003d4e:	031b      	lsls	r3, r3, #12
 8003d50:	4319      	orrs	r1, r3
 8003d52:	68bb      	ldr	r3, [r7, #8]
 8003d54:	691b      	ldr	r3, [r3, #16]
 8003d56:	3b01      	subs	r3, #1
 8003d58:	041b      	lsls	r3, r3, #16
 8003d5a:	4319      	orrs	r1, r3
 8003d5c:	68bb      	ldr	r3, [r7, #8]
 8003d5e:	695b      	ldr	r3, [r3, #20]
 8003d60:	3b01      	subs	r3, #1
 8003d62:	051b      	lsls	r3, r3, #20
 8003d64:	4319      	orrs	r1, r3
 8003d66:	68bb      	ldr	r3, [r7, #8]
 8003d68:	699b      	ldr	r3, [r3, #24]
 8003d6a:	3b01      	subs	r3, #1
 8003d6c:	061b      	lsls	r3, r3, #24
 8003d6e:	430b      	orrs	r3, r1
 8003d70:	431a      	orrs	r2, r3
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	609a      	str	r2, [r3, #8]
 8003d76:	e02d      	b.n	8003dd4 <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTRx_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	689a      	ldr	r2, [r3, #8]
 8003d7c:	4b19      	ldr	r3, [pc, #100]	; (8003de4 <FMC_SDRAM_Timing_Init+0xd0>)
 8003d7e:	4013      	ands	r3, r2
 8003d80:	68ba      	ldr	r2, [r7, #8]
 8003d82:	68d2      	ldr	r2, [r2, #12]
 8003d84:	3a01      	subs	r2, #1
 8003d86:	0311      	lsls	r1, r2, #12
 8003d88:	68ba      	ldr	r2, [r7, #8]
 8003d8a:	6952      	ldr	r2, [r2, #20]
 8003d8c:	3a01      	subs	r2, #1
 8003d8e:	0512      	lsls	r2, r2, #20
 8003d90:	430a      	orrs	r2, r1
 8003d92:	431a      	orrs	r2, r3
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	609a      	str	r2, [r3, #8]
               FMC_SDTRx_TRC |
               FMC_SDTRx_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTRx_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTRx_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	68db      	ldr	r3, [r3, #12]
 8003d9c:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8003da0:	68bb      	ldr	r3, [r7, #8]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	1e59      	subs	r1, r3, #1
 8003da6:	68bb      	ldr	r3, [r7, #8]
 8003da8:	685b      	ldr	r3, [r3, #4]
 8003daa:	3b01      	subs	r3, #1
 8003dac:	011b      	lsls	r3, r3, #4
 8003dae:	4319      	orrs	r1, r3
 8003db0:	68bb      	ldr	r3, [r7, #8]
 8003db2:	689b      	ldr	r3, [r3, #8]
 8003db4:	3b01      	subs	r3, #1
 8003db6:	021b      	lsls	r3, r3, #8
 8003db8:	4319      	orrs	r1, r3
 8003dba:	68bb      	ldr	r3, [r7, #8]
 8003dbc:	691b      	ldr	r3, [r3, #16]
 8003dbe:	3b01      	subs	r3, #1
 8003dc0:	041b      	lsls	r3, r3, #16
 8003dc2:	4319      	orrs	r1, r3
 8003dc4:	68bb      	ldr	r3, [r7, #8]
 8003dc6:	699b      	ldr	r3, [r3, #24]
 8003dc8:	3b01      	subs	r3, #1
 8003dca:	061b      	lsls	r3, r3, #24
 8003dcc:	430b      	orrs	r3, r1
 8003dce:	431a      	orrs	r2, r3
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTRx_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTRx_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }

  return HAL_OK;
 8003dd4:	2300      	movs	r3, #0
}
 8003dd6:	4618      	mov	r0, r3
 8003dd8:	3714      	adds	r7, #20
 8003dda:	46bd      	mov	sp, r7
 8003ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de0:	4770      	bx	lr
 8003de2:	bf00      	nop
 8003de4:	ff0f0fff 	.word	0xff0f0fff

08003de8 <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8003de8:	b480      	push	{r7}
 8003dea:	b085      	sub	sp, #20
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	60f8      	str	r0, [r7, #12]
 8003df0:	60b9      	str	r1, [r7, #8]
 8003df2:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	691a      	ldr	r2, [r3, #16]
 8003df8:	4b0c      	ldr	r3, [pc, #48]	; (8003e2c <FMC_SDRAM_SendCommand+0x44>)
 8003dfa:	4013      	ands	r3, r2
 8003dfc:	68ba      	ldr	r2, [r7, #8]
 8003dfe:	6811      	ldr	r1, [r2, #0]
 8003e00:	68ba      	ldr	r2, [r7, #8]
 8003e02:	6852      	ldr	r2, [r2, #4]
 8003e04:	4311      	orrs	r1, r2
 8003e06:	68ba      	ldr	r2, [r7, #8]
 8003e08:	6892      	ldr	r2, [r2, #8]
 8003e0a:	3a01      	subs	r2, #1
 8003e0c:	0152      	lsls	r2, r2, #5
 8003e0e:	4311      	orrs	r1, r2
 8003e10:	68ba      	ldr	r2, [r7, #8]
 8003e12:	68d2      	ldr	r2, [r2, #12]
 8003e14:	0252      	lsls	r2, r2, #9
 8003e16:	430a      	orrs	r2, r1
 8003e18:	431a      	orrs	r2, r3
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
 8003e1e:	2300      	movs	r3, #0
}
 8003e20:	4618      	mov	r0, r3
 8003e22:	3714      	adds	r7, #20
 8003e24:	46bd      	mov	sp, r7
 8003e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2a:	4770      	bx	lr
 8003e2c:	ffc00000 	.word	0xffc00000

08003e30 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 8003e30:	b480      	push	{r7}
 8003e32:	b083      	sub	sp, #12
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	6078      	str	r0, [r7, #4]
 8003e38:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	695a      	ldr	r2, [r3, #20]
 8003e3e:	4b07      	ldr	r3, [pc, #28]	; (8003e5c <FMC_SDRAM_ProgramRefreshRate+0x2c>)
 8003e40:	4013      	ands	r3, r2
 8003e42:	683a      	ldr	r2, [r7, #0]
 8003e44:	0052      	lsls	r2, r2, #1
 8003e46:	431a      	orrs	r2, r3
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 8003e4c:	2300      	movs	r3, #0
}
 8003e4e:	4618      	mov	r0, r3
 8003e50:	370c      	adds	r7, #12
 8003e52:	46bd      	mov	sp, r7
 8003e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e58:	4770      	bx	lr
 8003e5a:	bf00      	nop
 8003e5c:	ffffc001 	.word	0xffffc001

08003e60 <__libc_init_array>:
 8003e60:	b570      	push	{r4, r5, r6, lr}
 8003e62:	4d0d      	ldr	r5, [pc, #52]	; (8003e98 <__libc_init_array+0x38>)
 8003e64:	4c0d      	ldr	r4, [pc, #52]	; (8003e9c <__libc_init_array+0x3c>)
 8003e66:	1b64      	subs	r4, r4, r5
 8003e68:	10a4      	asrs	r4, r4, #2
 8003e6a:	2600      	movs	r6, #0
 8003e6c:	42a6      	cmp	r6, r4
 8003e6e:	d109      	bne.n	8003e84 <__libc_init_array+0x24>
 8003e70:	4d0b      	ldr	r5, [pc, #44]	; (8003ea0 <__libc_init_array+0x40>)
 8003e72:	4c0c      	ldr	r4, [pc, #48]	; (8003ea4 <__libc_init_array+0x44>)
 8003e74:	f000 f820 	bl	8003eb8 <_init>
 8003e78:	1b64      	subs	r4, r4, r5
 8003e7a:	10a4      	asrs	r4, r4, #2
 8003e7c:	2600      	movs	r6, #0
 8003e7e:	42a6      	cmp	r6, r4
 8003e80:	d105      	bne.n	8003e8e <__libc_init_array+0x2e>
 8003e82:	bd70      	pop	{r4, r5, r6, pc}
 8003e84:	f855 3b04 	ldr.w	r3, [r5], #4
 8003e88:	4798      	blx	r3
 8003e8a:	3601      	adds	r6, #1
 8003e8c:	e7ee      	b.n	8003e6c <__libc_init_array+0xc>
 8003e8e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003e92:	4798      	blx	r3
 8003e94:	3601      	adds	r6, #1
 8003e96:	e7f2      	b.n	8003e7e <__libc_init_array+0x1e>
 8003e98:	08003ee0 	.word	0x08003ee0
 8003e9c:	08003ee0 	.word	0x08003ee0
 8003ea0:	08003ee0 	.word	0x08003ee0
 8003ea4:	08003ee4 	.word	0x08003ee4

08003ea8 <memset>:
 8003ea8:	4402      	add	r2, r0
 8003eaa:	4603      	mov	r3, r0
 8003eac:	4293      	cmp	r3, r2
 8003eae:	d100      	bne.n	8003eb2 <memset+0xa>
 8003eb0:	4770      	bx	lr
 8003eb2:	f803 1b01 	strb.w	r1, [r3], #1
 8003eb6:	e7f9      	b.n	8003eac <memset+0x4>

08003eb8 <_init>:
 8003eb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003eba:	bf00      	nop
 8003ebc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003ebe:	bc08      	pop	{r3}
 8003ec0:	469e      	mov	lr, r3
 8003ec2:	4770      	bx	lr

08003ec4 <_fini>:
 8003ec4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ec6:	bf00      	nop
 8003ec8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003eca:	bc08      	pop	{r3}
 8003ecc:	469e      	mov	lr, r3
 8003ece:	4770      	bx	lr
